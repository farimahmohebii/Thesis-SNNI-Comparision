/*
This is an autogenerated file, generated using the EzPC compiler.
*/
#include "globals.h"

#include<vector>
#include<math.h>
#include<cstdlib>
#include<iostream>
#include<fstream>
#include "EzPCFunctionalities.h"

using namespace std;
uint32_t FLOAT_PRECISION = 12;
uint32_t public_lrshift(uint32_t x, uint32_t y){
return (x >> y);
}

int32_t public_lrshift(int32_t x, uint32_t y){
return ((int32_t)(((uint32_t)x) >> y));
}

uint64_t public_lrshift(uint64_t x, uint64_t y){
return (x >> y);
}

int64_t public_lrshift(int64_t x, uint64_t y){
return ((int64_t)(((uint64_t)x) >> y));
}

template<typename T>
vector<T> make_vector(size_t size) {
return std::vector<T>(size);
}

template <typename T, typename... Args>
auto make_vector(size_t first, Args... sizes)
{
auto inner = make_vector<T>(sizes...);
return vector<decltype(inner)>(first, inner);
}

template<typename T>
ostream& operator<< (ostream &os, const vector<T> &v)
{
for(auto it = v.begin (); it != v.end (); ++it) {
os << *it << endl;
}
return os;
}


#include "ezpc.h"

extern int partyNum;
extern string key_directory;
vector<uint64_t*> toFreeMemoryLaterArr;
int NUM_OF_PARTIES;

AESObject* aes_common;
AESObject* aes_indep;
AESObject* aes_a_1;
AESObject* aes_a_2;
AESObject* aes_b_1;
AESObject* aes_b_2;
AESObject* aes_c_1;
AESObject* aes_share_conv_bit_shares_p0_p2;
AESObject* aes_share_conv_bit_shares_p1_p2;
AESObject* aes_share_conv_shares_mod_odd_p0_p2;
AESObject* aes_share_conv_shares_mod_odd_p1_p2;
AESObject* aes_comp_msb_shares_lsb_p0_p2;
AESObject* aes_comp_msb_shares_lsb_p1_p2;
AESObject* aes_comp_msb_shares_bit_vec_p0_p2;
AESObject* aes_comp_msb_shares_bit_vec_p1_p2;
AESObject* aes_conv_opti_a_1;
AESObject* aes_conv_opti_a_2;
AESObject* aes_conv_opti_b_1;
AESObject* aes_conv_opti_b_2;
AESObject* aes_conv_opti_c_1;
ParallelAESObject* aes_parallel;































void TanhImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, vector < uint64_t >& A, vector < uint64_t >& B){

/* Empty Function */

}

void SigmoidImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, vector < uint64_t >& A, vector < uint64_t >& B){

/* Empty Function */

}

void SqrtImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, vector < uint64_t >& A, vector < uint64_t >& B){

/* Empty Function */

}

void MatAddBroadCast2(int32_t a1, int32_t a2, int32_t b1, int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < uint64_t >& B, vector < vector < uint64_t > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i2];
}
}
}

void MatAdd2(int32_t a1, int32_t a2, int32_t b1, int32_t b2, int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < vector < uint64_t > >& B, vector < vector < uint64_t > >& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
outArr[i1][i2] = A[aIdx1][aIdx2]+B[bIdx1][bIdx2];
}
}
}

void MatAddBroadCast4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i4];
}
}
}
}
}

void MatAddBroadCast5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i5];
}
}
}
}
}
}

void MatAdd4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < vector < vector < vector < uint64_t > > > >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
outArr[i1][i2][i3][i4] = A[aIdx1][aIdx2][aIdx3][aIdx4]+B[bIdx1][bIdx2][bIdx3][bIdx4];
}
}
}
}
}

void MatAdd5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t b5, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < vector < vector < vector < vector < uint64_t > > > > >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t aIdx5 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;

int32_t bIdx5 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
aIdx5 = (a5 ==  (int32_t)1) ?  (int32_t)0 : i5;
bIdx5 = (b5 ==  (int32_t)1) ?  (int32_t)0 : i5;
outArr[i1][i2][i3][i4][i5] = A[aIdx1][aIdx2][aIdx3][aIdx4][aIdx5]+B[bIdx1][bIdx2][bIdx3][bIdx4][bIdx5];
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int64_t val, vector < int64_t >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
arr[i1] = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int64_t val, vector < vector < int64_t > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
arr[i1][i2] = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int64_t val, vector < vector < vector < int64_t > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
arr[i1][i2][i3] = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int64_t val, vector < vector < vector < vector < int64_t > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
arr[i1][i2][i3][i4] = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int64_t val, vector < vector < vector < vector < vector < int64_t > > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
arr[i1][i2][i3][i4][i5] = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, vector < uint64_t >& targetArr, vector < uint64_t >& fromArr, vector < uint64_t >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
targetArr[i1] = fromArr[i1];
}
}

void CopyTensor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& targetArr, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
targetArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& targetArr, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
targetArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& targetArr, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateIdentity11(int32_t s1, vector < uint64_t >& fromArr, vector < uint64_t >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
newArr[i1] = fromArr[i1];
}
}

void CreateIdentity22(int32_t s1, int32_t s2, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
newArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
newArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, vector < vector < uint64_t > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)];
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
outArr[i][j][k][l][m] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)][(beginIdx[ (int32_t)2] + k)][(beginIdx[ (int32_t)3] + l)][(beginIdx[ (int32_t)4] + m)];
}
}
}
}
}
}

void Concat1T44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, vector < vector < uint64_t > >& inp1, int32_t inp2s1, int32_t inp2s2, vector < vector < uint64_t > >& inp2, int32_t axis, vector < vector < uint64_t > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[(i1 - inp1s1)][i2];
}
} else {
if ((i2 < inp1s2)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[i1][(i2 - inp1s2)];
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
}
}
}
}
}
}
}
}
}

void Concat3T4444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
}
}
}
}
}
}
}
}
}
}

void Concat4T44444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
}
}
}
}
}
}
}
}
}
}
}

void Concat5T444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
}
}
}
}
}
}
}
}
}
}
}
}

void Concat6T4444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat7T44444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat8T444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat9T4444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat10T44444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat11T444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat12T4444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat13T44444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat14T444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat15T4444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat16T44444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat17T444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat18T4444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat19T44444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat20T444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat21T4444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, vector < vector < vector < vector < uint64_t > > > >& inp21, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp21[((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp21[i1][((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp21[i1][i2][((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
} else {
outp[i1][i2][i3][i4] = inp21[i1][i2][i3][((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat22T44444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, vector < vector < vector < vector < uint64_t > > > >& inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, vector < vector < vector < vector < uint64_t > > > >& inp22, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
outp[i1][i2][i3][i4] = inp21[((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp22[(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
outp[i1][i2][i3][i4] = inp21[i1][((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp22[i1][(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp22[i1][i2][(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][i3][((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4)];
} else {
outp[i1][i2][i3][i4] = inp22[i1][i2][i3][(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat23T444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, vector < vector < vector < vector < uint64_t > > > >& inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, vector < vector < vector < vector < uint64_t > > > >& inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, vector < vector < vector < vector < uint64_t > > > >& inp23, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
outp[i1][i2][i3][i4] = inp21[((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
outp[i1][i2][i3][i4] = inp22[(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp23[((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
outp[i1][i2][i3][i4] = inp21[i1][((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
outp[i1][i2][i3][i4] = inp22[i1][(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp23[i1][((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3)][i4];
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp23[i1][i2][((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][i3][((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4)];
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][i3][(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4)];
} else {
outp[i1][i2][i3][i4] = inp23[i1][i2][i3][((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat24T4444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, vector < vector < vector < vector < uint64_t > > > >& inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, vector < vector < vector < vector < uint64_t > > > >& inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, vector < vector < vector < vector < uint64_t > > > >& inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, vector < vector < vector < vector < uint64_t > > > >& inp24, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
outp[i1][i2][i3][i4] = inp21[((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
outp[i1][i2][i3][i4] = inp22[(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
outp[i1][i2][i3][i4] = inp23[((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp24[(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
outp[i1][i2][i3][i4] = inp21[i1][((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
outp[i1][i2][i3][i4] = inp22[i1][(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
outp[i1][i2][i3][i4] = inp23[i1][((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp24[i1][(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3)][i4];
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
outp[i1][i2][i3][i4] = inp23[i1][i2][((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp24[i1][i2][(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][i3][((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4)];
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][i3][(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4)];
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
outp[i1][i2][i3][i4] = inp23[i1][i2][i3][((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4)];
} else {
outp[i1][i2][i3][i4] = inp24[i1][i2][i3][(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat25T44444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, vector < vector < vector < vector < uint64_t > > > >& inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, vector < vector < vector < vector < uint64_t > > > >& inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, vector < vector < vector < vector < uint64_t > > > >& inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, vector < vector < vector < vector < uint64_t > > > >& inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, vector < vector < vector < vector < uint64_t > > > >& inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, vector < vector < vector < vector < uint64_t > > > >& inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, vector < vector < vector < vector < uint64_t > > > >& inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, vector < vector < vector < vector < uint64_t > > > >& inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, vector < vector < vector < vector < uint64_t > > > >& inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, vector < vector < vector < vector < uint64_t > > > >& inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, vector < vector < vector < vector < uint64_t > > > >& inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, vector < vector < vector < vector < uint64_t > > > >& inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, vector < vector < vector < vector < uint64_t > > > >& inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, vector < vector < vector < vector < uint64_t > > > >& inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, vector < vector < vector < vector < uint64_t > > > >& inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, vector < vector < vector < vector < uint64_t > > > >& inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, vector < vector < vector < vector < uint64_t > > > >& inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, vector < vector < vector < vector < uint64_t > > > >& inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, vector < vector < vector < vector < uint64_t > > > >& inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, vector < vector < vector < vector < uint64_t > > > >& inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, vector < vector < vector < vector < uint64_t > > > >& inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, vector < vector < vector < vector < uint64_t > > > >& inp24, int32_t inp25s1, int32_t inp25s2, int32_t inp25s3, int32_t inp25s4, vector < vector < vector < vector < uint64_t > > > >& inp25, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i1 < (inp1s1 + inp2s1))) {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
outp[i1][i2][i3][i4] = inp3[((i1 - inp1s1) - inp2s1)][i2][i3][i4];
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
outp[i1][i2][i3][i4] = inp4[(((i1 - inp1s1) - inp2s1) - inp3s1)][i2][i3][i4];
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
outp[i1][i2][i3][i4] = inp5[((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1)][i2][i3][i4];
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
outp[i1][i2][i3][i4] = inp6[(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1)][i2][i3][i4];
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
outp[i1][i2][i3][i4] = inp7[((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1)][i2][i3][i4];
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
outp[i1][i2][i3][i4] = inp8[(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
outp[i1][i2][i3][i4] = inp9[((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
outp[i1][i2][i3][i4] = inp10[(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
outp[i1][i2][i3][i4] = inp11[((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
outp[i1][i2][i3][i4] = inp12[(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
outp[i1][i2][i3][i4] = inp13[((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
outp[i1][i2][i3][i4] = inp14[(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
outp[i1][i2][i3][i4] = inp15[((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
outp[i1][i2][i3][i4] = inp16[(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
outp[i1][i2][i3][i4] = inp17[((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
outp[i1][i2][i3][i4] = inp18[(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
outp[i1][i2][i3][i4] = inp19[((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
outp[i1][i2][i3][i4] = inp20[(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
outp[i1][i2][i3][i4] = inp21[((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
outp[i1][i2][i3][i4] = inp22[(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1)][i2][i3][i4];
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
outp[i1][i2][i3][i4] = inp23[((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1)][i2][i3][i4];
} else {
if ((i1 < (((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1) + inp24s1))) {
outp[i1][i2][i3][i4] = inp24[(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1)][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp25[((((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1) - inp24s1)][i2][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i2 < (inp1s2 + inp2s2))) {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
outp[i1][i2][i3][i4] = inp3[i1][((i2 - inp1s2) - inp2s2)][i3][i4];
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
outp[i1][i2][i3][i4] = inp4[i1][(((i2 - inp1s2) - inp2s2) - inp3s2)][i3][i4];
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
outp[i1][i2][i3][i4] = inp5[i1][((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2)][i3][i4];
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
outp[i1][i2][i3][i4] = inp6[i1][(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2)][i3][i4];
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
outp[i1][i2][i3][i4] = inp7[i1][((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2)][i3][i4];
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
outp[i1][i2][i3][i4] = inp8[i1][(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2)][i3][i4];
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
outp[i1][i2][i3][i4] = inp9[i1][((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2)][i3][i4];
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
outp[i1][i2][i3][i4] = inp10[i1][(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2)][i3][i4];
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
outp[i1][i2][i3][i4] = inp11[i1][((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2)][i3][i4];
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
outp[i1][i2][i3][i4] = inp12[i1][(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2)][i3][i4];
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
outp[i1][i2][i3][i4] = inp13[i1][((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2)][i3][i4];
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
outp[i1][i2][i3][i4] = inp14[i1][(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
outp[i1][i2][i3][i4] = inp15[i1][((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
outp[i1][i2][i3][i4] = inp16[i1][(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
outp[i1][i2][i3][i4] = inp17[i1][((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
outp[i1][i2][i3][i4] = inp18[i1][(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
outp[i1][i2][i3][i4] = inp19[i1][((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
outp[i1][i2][i3][i4] = inp20[i1][(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
outp[i1][i2][i3][i4] = inp21[i1][((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
outp[i1][i2][i3][i4] = inp22[i1][(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2)][i3][i4];
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
outp[i1][i2][i3][i4] = inp23[i1][((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2)][i3][i4];
} else {
if ((i2 < (((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2) + inp24s2))) {
outp[i1][i2][i3][i4] = inp24[i1][(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2)][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp25[i1][((((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2) - inp24s2)][i3][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i3 < (inp1s3 + inp2s3))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][((i3 - inp1s3) - inp2s3)][i4];
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][(((i3 - inp1s3) - inp2s3) - inp3s3)][i4];
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3)][i4];
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3)][i4];
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3)][i4];
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3)][i4];
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3)][i4];
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3)][i4];
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3)][i4];
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3)][i4];
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3)][i4];
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3)][i4];
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3)][i4];
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3)][i4];
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3)][i4];
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3)][i4];
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3)][i4];
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3)][i4];
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3)][i4];
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
outp[i1][i2][i3][i4] = inp23[i1][i2][((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3)][i4];
} else {
if ((i3 < (((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3) + inp24s3))) {
outp[i1][i2][i3][i4] = inp24[i1][i2][(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3)][i4];
} else {
outp[i1][i2][i3][i4] = inp25[i1][i2][((((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3) - inp24s3)][i4];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
if ((i4 < (inp1s4 + inp2s4))) {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
outp[i1][i2][i3][i4] = inp3[i1][i2][i3][((i4 - inp1s4) - inp2s4)];
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
outp[i1][i2][i3][i4] = inp4[i1][i2][i3][(((i4 - inp1s4) - inp2s4) - inp3s4)];
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
outp[i1][i2][i3][i4] = inp5[i1][i2][i3][((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4)];
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
outp[i1][i2][i3][i4] = inp6[i1][i2][i3][(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4)];
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
outp[i1][i2][i3][i4] = inp7[i1][i2][i3][((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4)];
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
outp[i1][i2][i3][i4] = inp8[i1][i2][i3][(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4)];
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
outp[i1][i2][i3][i4] = inp9[i1][i2][i3][((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4)];
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
outp[i1][i2][i3][i4] = inp10[i1][i2][i3][(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4)];
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
outp[i1][i2][i3][i4] = inp11[i1][i2][i3][((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4)];
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
outp[i1][i2][i3][i4] = inp12[i1][i2][i3][(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4)];
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
outp[i1][i2][i3][i4] = inp13[i1][i2][i3][((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4)];
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
outp[i1][i2][i3][i4] = inp14[i1][i2][i3][(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4)];
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
outp[i1][i2][i3][i4] = inp15[i1][i2][i3][((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4)];
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
outp[i1][i2][i3][i4] = inp16[i1][i2][i3][(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4)];
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
outp[i1][i2][i3][i4] = inp17[i1][i2][i3][((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4)];
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
outp[i1][i2][i3][i4] = inp18[i1][i2][i3][(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4)];
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
outp[i1][i2][i3][i4] = inp19[i1][i2][i3][((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4)];
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
outp[i1][i2][i3][i4] = inp20[i1][i2][i3][(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4)];
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
outp[i1][i2][i3][i4] = inp21[i1][i2][i3][((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4)];
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
outp[i1][i2][i3][i4] = inp22[i1][i2][i3][(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4)];
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
outp[i1][i2][i3][i4] = inp23[i1][i2][i3][((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4)];
} else {
if ((i4 < (((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4) + inp24s4))) {
outp[i1][i2][i3][i4] = inp24[i1][i2][i3][(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4)];
} else {
outp[i1][i2][i3][i4] = inp25[i1][i2][i3][((((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4) - inp24s4)];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, vector < vector < vector < vector < uint64_t > > > >& inp, int32_t axis, int32_t curCount, int32_t total, vector < vector < vector < vector < uint64_t > > > >& out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][ci];
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t GIS = (CI / G);

int32_t GOS = (CO / G);
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint32_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint32_t g =  (int32_t)0; g < G; g++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){

uint64_t val = funcSSCons( (int64_t)0);

int32_t ci = ((GIS * g) + cig);

int32_t co = ((GOS * g) + cog);

int32_t curPosH = ((strideH * h) - zPadHLeft);
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){

int32_t curPosW = ((strideW * w) - zPadWLeft);
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = val+funcMult(inputArr[n][curPosH][curPosW][ci], filterArr[fh][fw][(ci / G)][co]);
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
outArr[n][h][w][co] = outArr[n][h][w][co]+val;
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][(co + startCO)];
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][(co + startCO)] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][(ci + startCI)];
}
outputArr[((((fh * FW) * CIG) + (fw * CIG)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][d][h][w][co] = inputArr[co][((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w)];
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosD][curPosH][curPosW][ci];
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint32_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint32_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int32_t curPosD = (fd - zPadDLeft);

int32_t curPosH = (fh - zPadHLeft);

int32_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int32_t curFilterPosD = (fd - (d * strideD));

int32_t curFilterPosH = (fh - (h * strideH));

int32_t curFilterPosW = (fw - (w * strideW));
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][ci][co]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FD -  (int32_t)1) - fd)][((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t reshapedIPCols = (((N * D) * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = d; fd < (d + FD); fd++){
for (uint32_t fh = h; fh < (h + FH); fh++){
for (uint32_t fw = w; fw < (w + FW); fw++){

int32_t curPosD = ((fd - zPadDLeft) / strideD);

int32_t curPosH = ((fh - zPadHLeft) / strideH);

int32_t curPosW = ((fw - zPadWLeft) / strideW);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int32_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int32_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int32_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][co][ci]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[j][i];
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);

int32_t lbounds5 = paddings[ (int32_t)4][ (int32_t)0];

int32_t rbounds5excl = (s5 - paddings[ (int32_t)4][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
outArr[i][j][k][l][m] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])][(m - paddings[ (int32_t)4][ (int32_t)0])];
} else {
outArr[i][j][k][l][m] = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads, vector < int32_t >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0];

int32_t rbounds1excl = (o1 - paddings[ (int32_t)4]);

int32_t lbounds2 = paddings[ (int32_t)1];

int32_t rbounds2excl = (o2 - paddings[ (int32_t)5]);

int32_t lbounds3 = paddings[ (int32_t)2];

int32_t rbounds3excl = (o3 - paddings[ (int32_t)6]);

int32_t lbounds4 = paddings[ (int32_t)3];

int32_t rbounds4excl = (o4 - paddings[ (int32_t)7]);
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0])][(j - paddings[ (int32_t)1])][(k - paddings[ (int32_t)2])][(l - paddings[ (int32_t)3])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
}
}
}
}
}

void Squeeze34(int32_t s1, int32_t s2, int32_t s3, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < vector < uint64_t > > >& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / (s2 * s3));

int32_t outIdx2 = ((linIdx - ((outIdx1 * s2) * s3)) / s3);

int32_t outIdx3 = ((linIdx - ((outIdx1 * s2) * s3)) - (outIdx2 * s3));
outArr[outIdx1][outIdx2][outIdx3] = inArr[i][j][k][l];
}
}
}
}
}

void Squeeze23(int32_t s1, int32_t s2, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, vector < vector < vector < uint64_t > > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){

int32_t linIdx = ((((i * ins2) * ins3) + (j * ins3)) + k);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
outArr[outIdx1][outIdx2] = inArr[i][j][k];
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4];
multArrReshaped[linIdx] = multArr[i4];
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s4);
for (uint32_t ii =  (int32_t)0; ii < s4; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outputArr[i1][i2][i3][i4] = multExprAns[linIdx]+biasArrScaledUp[i4];
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4][i5];
multArrReshaped[linIdx] = multArr[i5];
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s5);
for (uint32_t ii =  (int32_t)0; ii < s5; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outputArr[i1][i2][i3][i4][i5] = multExprAns[linIdx]+biasArrScaledUp[i5];
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr1, vector < vector < uint64_t > >& arr2, vector < vector < uint64_t > >& outArr){

int32_t inpSize = (s1 * s2);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr1Reshaped[linIdx] = arr1[i1][i2];
arr2Reshaped[linIdx] = arr2[i1][i2];
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = outArrReshaped[linIdx];
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr1, vector < vector < vector < vector < uint64_t > > > >& arr2, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4];
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = outArrReshaped[linIdx];
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& arr1, vector < vector < vector < vector < vector < uint64_t > > > > >& arr2, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5];
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = outArrReshaped[linIdx];
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < int32_t >& axes, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS2 * inS3);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS2; i++){
for (uint32_t j =  (int32_t)0; j < inS3; j++){
summ = summ+inputArr[i1][i][j][i2];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, int32_t axis1, int32_t axis2, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS3 * inS4);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS3; i++){
for (uint32_t j =  (int32_t)0; j < inS4; j++){
summ = summ+inputArr[i1][i2][i][j];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, vector < vector < uint64_t > >& inArr, int32_t dim, vector < uint64_t >& outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, int32_t dim, vector < vector < vector < uint64_t > > >& outArr){

int32_t size = ((ins1 * ins2) * ins3);

vector < vector < uint64_t > > reshapedInArr = make_vector<uint64_t>(size, ins4);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < ins4; i4++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
reshapedInArr[linIdx][i4] = inArr[i1][i2][i3][i4];
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
outArr[i1][i2][i3] = reshapedOutArr[linIdx];
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu1(int32_t s1, vector < uint64_t >& inArr, vector < uint64_t >& outArr, int32_t sf, uint32_t doTruncation){
Relu(s1, inArr, outArr, sf, doTruncation);
}

void Relu2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < vector < vector < uint64_t > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& arr, int32_t sf){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
}
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& arr, int32_t sf){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
}
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void Tanh1(int32_t s1, vector < uint64_t >& inp, vector < uint64_t >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
TanhImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Tanh2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inp, vector < vector < uint64_t > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (s1 * s2);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
inpCopy[((i * s1) + j)] = inp[i][j];
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
out[i][j] = outCopy[((i * s2) + j)];
}
}
}

void Tanh3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& inp, vector < vector < vector < uint64_t > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
inpCopy[((((i * s2) * s3) + (j * s3)) + k)] = inp[i][j][k];
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
out[i][j][k] = outCopy[((((i * s2) * s3) + (j * s3)) + k)];
}
}
}
}

void Tanh4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inp, vector < vector < vector < vector < uint64_t > > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)] = inp[i][j][k][l];
}
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
out[i][j][k][l] = inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)];
}
}
}
}
}

void Sigmoid1(int32_t s1, vector < uint64_t >& inp, vector < uint64_t >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
SigmoidImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Sigmoid2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inp, vector < vector < uint64_t > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (s1 * s2);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
inpCopy[((i * s1) + j)] = inp[i][j];
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
out[i][j] = outCopy[((i * s2) + j)];
}
}
}

void Sigmoid3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& inp, vector < vector < vector < uint64_t > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
inpCopy[((((i * s2) * s3) + (j * s3)) + k)] = inp[i][j][k];
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
out[i][j][k] = outCopy[((((i * s2) * s3) + (j * s3)) + k)];
}
}
}
}

void Sigmoid4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inp, vector < vector < vector < vector < uint64_t > > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)] = inp[i][j][k][l];
}
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
out[i][j][k][l] = inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)];
}
}
}
}
}

void Sqrt1(int32_t s1, vector < uint64_t >& inp, vector < uint64_t >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){
SqrtImpl(LUTBITS, s1, sA, sB, bwA, bwB, inverse, inp, out);
}

void Sqrt2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inp, vector < vector < uint64_t > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = (s1 * s2);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
inpCopy[((i * s1) + j)] = inp[i][j];
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
out[i][j] = outCopy[((i * s2) + j)];
}
}
}

void Sqrt3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& inp, vector < vector < vector < uint64_t > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
inpCopy[((((i * s2) * s3) + (j * s3)) + k)] = inp[i][j][k];
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
out[i][j][k] = outCopy[((((i * s2) * s3) + (j * s3)) + k)];
}
}
}
}

void Sqrt4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inp, vector < vector < vector < vector < uint64_t > > > >& out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > inpCopy = make_vector<uint64_t>(size);

vector < uint64_t > outCopy = make_vector<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)] = inp[i][j][k][l];
}
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
out[i][j][k][l] = inpCopy[((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)];
}
}
}
}
}


extern int instanceID;
int main(int argc, char** argv)
{
parseInputs(argc, argv);
string whichNetwork = "Your Network";
show_porthos_mode();
string indep_key_location, common_key_location;
if(partyNum == PARTY_A){
indep_key_location = key_directory + "/keyA";
common_key_location = key_directory + "/keyAB";
}
else if(partyNum == PARTY_B){
indep_key_location = key_directory + "/keyB";
common_key_location = key_directory + "/keyAB";
}
else{
indep_key_location = key_directory + "/keyB";
common_key_location = key_directory + "/keyAB";
}
aes_indep = new AESObject(indep_key_location);
aes_common = new AESObject(common_key_location);
aes_a_1 = new AESObject(key_directory + "/keyD");
aes_a_2 = new AESObject(key_directory + "/keyD");
aes_b_1 = new AESObject(key_directory + "/keyD");
aes_b_2 = new AESObject(key_directory + "/keyD");
aes_c_1 = new AESObject(key_directory + "/keyD");
aes_share_conv_bit_shares_p0_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_bit_shares_p1_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_shares_mod_odd_p0_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_shares_mod_odd_p1_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_lsb_p0_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_lsb_p1_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_bit_vec_p0_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_bit_vec_p1_p2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_a_1 = new AESObject(key_directory + "/keyD");
aes_conv_opti_a_2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_b_1 = new AESObject(key_directory + "/keyD");
aes_conv_opti_b_2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_c_1 = new AESObject(key_directory + "/keyD");
aes_parallel = new ParallelAESObject(common_key_location);

if (MPC)
{
initializeMPC();
initializeCommunication(argv[2], partyNum);
synchronize(2000000); 
}

if (PARALLEL) aes_parallel->precompute();

e_role role = partyNum;


vector < vector < vector < vector < uint64_t > > > > tmp0 = make_vector<uint64_t>( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp0 at (8927,1-8927,46) */
uint64_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)224; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((role == CLIENT)) {
cin >> __tmp_in_tmp0;
}
tmp0[i0][i1][i2][i3] = (role == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp1 = make_vector<uint64_t>( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp1 at (8930,1-8930,43) */
uint64_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)7; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp1;
}
tmp1[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp1 : 0;
}
}
}
}

vector < uint64_t > tmp2 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp2 at (8933,1-8933,34) */
uint64_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp2;
}
tmp2[i0] = (role == SERVER) ? __tmp_in_tmp2 : 0;
}

vector < uint64_t > tmp3 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp3 at (8936,1-8936,34) */
uint64_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp3;
}
tmp3[i0] = (role == SERVER) ? __tmp_in_tmp3 : 0;
}

vector < uint64_t > tmp4 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp4 at (8939,1-8939,34) */
uint64_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp4;
}
tmp4[i0] = (role == SERVER) ? __tmp_in_tmp4 : 0;
}

vector < uint64_t > tmp5 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp5 at (8942,1-8942,34) */
uint64_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp5;
}
tmp5[i0] = (role == SERVER) ? __tmp_in_tmp5 : 0;
}

vector < uint64_t > tmp6 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp6 at (8945,1-8945,34) */
uint64_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp6;
}
tmp6[i0] = (role == SERVER) ? __tmp_in_tmp6 : 0;
}

vector < uint64_t > tmp7 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp7 at (8948,1-8948,34) */
uint64_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp7;
}
tmp7[i0] = (role == SERVER) ? __tmp_in_tmp7 : 0;
}

vector < uint64_t > tmp8 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp8 at (8951,1-8951,34) */
uint64_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp8;
}
tmp8[i0] = (role == SERVER) ? __tmp_in_tmp8 : 0;
}

vector < uint64_t > tmp9 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp9 at (8954,1-8954,34) */
uint64_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp9;
}
tmp9[i0] = (role == SERVER) ? __tmp_in_tmp9 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp10 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp10 at (8957,1-8957,46) */
uint64_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp10;
}
tmp10[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp10 : 0;
}
}
}
}

vector < uint64_t > tmp11 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp11 at (8960,1-8960,36) */
uint64_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp11;
}
tmp11[i0] = (role == SERVER) ? __tmp_in_tmp11 : 0;
}

vector < uint64_t > tmp12 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp12 at (8963,1-8963,36) */
uint64_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp12;
}
tmp12[i0] = (role == SERVER) ? __tmp_in_tmp12 : 0;
}

vector < uint64_t > tmp13 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp13 at (8966,1-8966,36) */
uint64_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp13;
}
tmp13[i0] = (role == SERVER) ? __tmp_in_tmp13 : 0;
}

vector < uint64_t > tmp14 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp14 at (8969,1-8969,36) */
uint64_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp14;
}
tmp14[i0] = (role == SERVER) ? __tmp_in_tmp14 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp15 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp15 at (8972,1-8972,46) */
uint64_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp15;
}
tmp15[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}

vector < uint64_t > tmp16 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp16 at (8975,1-8975,35) */
uint64_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp16;
}
tmp16[i0] = (role == SERVER) ? __tmp_in_tmp16 : 0;
}

vector < uint64_t > tmp17 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp17 at (8978,1-8978,35) */
uint64_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp17;
}
tmp17[i0] = (role == SERVER) ? __tmp_in_tmp17 : 0;
}

vector < uint64_t > tmp18 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp18 at (8981,1-8981,35) */
uint64_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp18;
}
tmp18[i0] = (role == SERVER) ? __tmp_in_tmp18 : 0;
}

vector < uint64_t > tmp19 = make_vector<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp19 at (8984,1-8984,35) */
uint64_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp19;
}
tmp19[i0] = (role == SERVER) ? __tmp_in_tmp19 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp20 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp20 at (8987,1-8987,46) */
uint64_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)96; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp20;
}
tmp20[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp20 : 0;
}
}
}
}

vector < uint64_t > tmp21 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp21 at (8990,1-8990,36) */
uint64_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp21;
}
tmp21[i0] = (role == SERVER) ? __tmp_in_tmp21 : 0;
}

vector < uint64_t > tmp22 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp22 at (8993,1-8993,36) */
uint64_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp22;
}
tmp22[i0] = (role == SERVER) ? __tmp_in_tmp22 : 0;
}

vector < uint64_t > tmp23 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp23 at (8996,1-8996,36) */
uint64_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp23;
}
tmp23[i0] = (role == SERVER) ? __tmp_in_tmp23 : 0;
}

vector < uint64_t > tmp24 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp24 at (8999,1-8999,36) */
uint64_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp24;
}
tmp24[i0] = (role == SERVER) ? __tmp_in_tmp24 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp25 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp25 at (9002,1-9002,46) */
uint64_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp25;
}
tmp25[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}

vector < uint64_t > tmp26 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp26 at (9005,1-9005,36) */
uint64_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp26;
}
tmp26[i0] = (role == SERVER) ? __tmp_in_tmp26 : 0;
}

vector < uint64_t > tmp27 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp27 at (9008,1-9008,36) */
uint64_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp27;
}
tmp27[i0] = (role == SERVER) ? __tmp_in_tmp27 : 0;
}

vector < uint64_t > tmp28 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp28 at (9011,1-9011,36) */
uint64_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp28;
}
tmp28[i0] = (role == SERVER) ? __tmp_in_tmp28 : 0;
}

vector < uint64_t > tmp29 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp29 at (9014,1-9014,36) */
uint64_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp29;
}
tmp29[i0] = (role == SERVER) ? __tmp_in_tmp29 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp30 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp30 at (9017,1-9017,47) */
uint64_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp30;
}
tmp30[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp30 : 0;
}
}
}
}

vector < uint64_t > tmp31 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp31 at (9020,1-9020,36) */
uint64_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp31;
}
tmp31[i0] = (role == SERVER) ? __tmp_in_tmp31 : 0;
}

vector < uint64_t > tmp32 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp32 at (9023,1-9023,36) */
uint64_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp32;
}
tmp32[i0] = (role == SERVER) ? __tmp_in_tmp32 : 0;
}

vector < uint64_t > tmp33 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp33 at (9026,1-9026,36) */
uint64_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp33;
}
tmp33[i0] = (role == SERVER) ? __tmp_in_tmp33 : 0;
}

vector < uint64_t > tmp34 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp34 at (9029,1-9029,36) */
uint64_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp34;
}
tmp34[i0] = (role == SERVER) ? __tmp_in_tmp34 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp35 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp35 at (9032,1-9032,46) */
uint64_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp35;
}
tmp35[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp35 : 0;
}
}
}
}

vector < uint64_t > tmp36 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp36 at (9035,1-9035,36) */
uint64_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp36;
}
tmp36[i0] = (role == SERVER) ? __tmp_in_tmp36 : 0;
}

vector < uint64_t > tmp37 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp37 at (9038,1-9038,36) */
uint64_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp37;
}
tmp37[i0] = (role == SERVER) ? __tmp_in_tmp37 : 0;
}

vector < uint64_t > tmp38 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp38 at (9041,1-9041,36) */
uint64_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp38;
}
tmp38[i0] = (role == SERVER) ? __tmp_in_tmp38 : 0;
}

vector < uint64_t > tmp39 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp39 at (9044,1-9044,36) */
uint64_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp39;
}
tmp39[i0] = (role == SERVER) ? __tmp_in_tmp39 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp40 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp40 at (9047,1-9047,47) */
uint64_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)160; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp40;
}
tmp40[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp40 : 0;
}
}
}
}

vector < uint64_t > tmp41 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp41 at (9050,1-9050,36) */
uint64_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp41;
}
tmp41[i0] = (role == SERVER) ? __tmp_in_tmp41 : 0;
}

vector < uint64_t > tmp42 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp42 at (9053,1-9053,36) */
uint64_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp42;
}
tmp42[i0] = (role == SERVER) ? __tmp_in_tmp42 : 0;
}

vector < uint64_t > tmp43 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp43 at (9056,1-9056,36) */
uint64_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp43;
}
tmp43[i0] = (role == SERVER) ? __tmp_in_tmp43 : 0;
}

vector < uint64_t > tmp44 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp44 at (9059,1-9059,36) */
uint64_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp44;
}
tmp44[i0] = (role == SERVER) ? __tmp_in_tmp44 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp45 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp45 at (9062,1-9062,46) */
uint64_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp45;
}
tmp45[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}

vector < uint64_t > tmp46 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp46 at (9065,1-9065,36) */
uint64_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp46;
}
tmp46[i0] = (role == SERVER) ? __tmp_in_tmp46 : 0;
}

vector < uint64_t > tmp47 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp47 at (9068,1-9068,36) */
uint64_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp47;
}
tmp47[i0] = (role == SERVER) ? __tmp_in_tmp47 : 0;
}

vector < uint64_t > tmp48 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp48 at (9071,1-9071,36) */
uint64_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp48;
}
tmp48[i0] = (role == SERVER) ? __tmp_in_tmp48 : 0;
}

vector < uint64_t > tmp49 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp49 at (9074,1-9074,36) */
uint64_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp49;
}
tmp49[i0] = (role == SERVER) ? __tmp_in_tmp49 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp50 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp50 at (9077,1-9077,47) */
uint64_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)192; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp50;
}
tmp50[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp50 : 0;
}
}
}
}

vector < uint64_t > tmp51 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp51 at (9080,1-9080,36) */
uint64_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp51;
}
tmp51[i0] = (role == SERVER) ? __tmp_in_tmp51 : 0;
}

vector < uint64_t > tmp52 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp52 at (9083,1-9083,36) */
uint64_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp52;
}
tmp52[i0] = (role == SERVER) ? __tmp_in_tmp52 : 0;
}

vector < uint64_t > tmp53 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp53 at (9086,1-9086,36) */
uint64_t __tmp_in_tmp53;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp53;
}
tmp53[i0] = (role == SERVER) ? __tmp_in_tmp53 : 0;
}

vector < uint64_t > tmp54 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp54 at (9089,1-9089,36) */
uint64_t __tmp_in_tmp54;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp54;
}
tmp54[i0] = (role == SERVER) ? __tmp_in_tmp54 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp55 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp55 at (9092,1-9092,46) */
uint64_t __tmp_in_tmp55;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp55;
}
tmp55[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp55 : 0;
}
}
}
}

vector < uint64_t > tmp56 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp56 at (9095,1-9095,36) */
uint64_t __tmp_in_tmp56;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp56;
}
tmp56[i0] = (role == SERVER) ? __tmp_in_tmp56 : 0;
}

vector < uint64_t > tmp57 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp57 at (9098,1-9098,36) */
uint64_t __tmp_in_tmp57;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp57;
}
tmp57[i0] = (role == SERVER) ? __tmp_in_tmp57 : 0;
}

vector < uint64_t > tmp58 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp58 at (9101,1-9101,36) */
uint64_t __tmp_in_tmp58;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp58;
}
tmp58[i0] = (role == SERVER) ? __tmp_in_tmp58 : 0;
}

vector < uint64_t > tmp59 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp59 at (9104,1-9104,36) */
uint64_t __tmp_in_tmp59;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp59;
}
tmp59[i0] = (role == SERVER) ? __tmp_in_tmp59 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp60 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp60 at (9107,1-9107,47) */
uint64_t __tmp_in_tmp60;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp60;
}
tmp60[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp60 : 0;
}
}
}
}

vector < uint64_t > tmp61 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp61 at (9110,1-9110,36) */
uint64_t __tmp_in_tmp61;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp61;
}
tmp61[i0] = (role == SERVER) ? __tmp_in_tmp61 : 0;
}

vector < uint64_t > tmp62 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp62 at (9113,1-9113,36) */
uint64_t __tmp_in_tmp62;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp62;
}
tmp62[i0] = (role == SERVER) ? __tmp_in_tmp62 : 0;
}

vector < uint64_t > tmp63 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp63 at (9116,1-9116,36) */
uint64_t __tmp_in_tmp63;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp63;
}
tmp63[i0] = (role == SERVER) ? __tmp_in_tmp63 : 0;
}

vector < uint64_t > tmp64 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp64 at (9119,1-9119,36) */
uint64_t __tmp_in_tmp64;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp64;
}
tmp64[i0] = (role == SERVER) ? __tmp_in_tmp64 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp65 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp65 at (9122,1-9122,46) */
uint64_t __tmp_in_tmp65;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp65;
}
tmp65[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp65 : 0;
}
}
}
}

vector < uint64_t > tmp66 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp66 at (9125,1-9125,36) */
uint64_t __tmp_in_tmp66;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp66;
}
tmp66[i0] = (role == SERVER) ? __tmp_in_tmp66 : 0;
}

vector < uint64_t > tmp67 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp67 at (9128,1-9128,36) */
uint64_t __tmp_in_tmp67;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp67;
}
tmp67[i0] = (role == SERVER) ? __tmp_in_tmp67 : 0;
}

vector < uint64_t > tmp68 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp68 at (9131,1-9131,36) */
uint64_t __tmp_in_tmp68;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp68;
}
tmp68[i0] = (role == SERVER) ? __tmp_in_tmp68 : 0;
}

vector < uint64_t > tmp69 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp69 at (9134,1-9134,36) */
uint64_t __tmp_in_tmp69;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp69;
}
tmp69[i0] = (role == SERVER) ? __tmp_in_tmp69 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp70 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp70 at (9137,1-9137,47) */
uint64_t __tmp_in_tmp70;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp70;
}
tmp70[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp70 : 0;
}
}
}
}

vector < uint64_t > tmp71 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp71 at (9140,1-9140,36) */
uint64_t __tmp_in_tmp71;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp71;
}
tmp71[i0] = (role == SERVER) ? __tmp_in_tmp71 : 0;
}

vector < uint64_t > tmp72 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp72 at (9143,1-9143,36) */
uint64_t __tmp_in_tmp72;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp72;
}
tmp72[i0] = (role == SERVER) ? __tmp_in_tmp72 : 0;
}

vector < uint64_t > tmp73 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp73 at (9146,1-9146,36) */
uint64_t __tmp_in_tmp73;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp73;
}
tmp73[i0] = (role == SERVER) ? __tmp_in_tmp73 : 0;
}

vector < uint64_t > tmp74 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp74 at (9149,1-9149,36) */
uint64_t __tmp_in_tmp74;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp74;
}
tmp74[i0] = (role == SERVER) ? __tmp_in_tmp74 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp75 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp75 at (9152,1-9152,47) */
uint64_t __tmp_in_tmp75;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp75;
}
tmp75[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp75 : 0;
}
}
}
}

vector < uint64_t > tmp76 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp76 at (9155,1-9155,36) */
uint64_t __tmp_in_tmp76;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp76;
}
tmp76[i0] = (role == SERVER) ? __tmp_in_tmp76 : 0;
}

vector < uint64_t > tmp77 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp77 at (9158,1-9158,36) */
uint64_t __tmp_in_tmp77;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp77;
}
tmp77[i0] = (role == SERVER) ? __tmp_in_tmp77 : 0;
}

vector < uint64_t > tmp78 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp78 at (9161,1-9161,36) */
uint64_t __tmp_in_tmp78;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp78;
}
tmp78[i0] = (role == SERVER) ? __tmp_in_tmp78 : 0;
}

vector < uint64_t > tmp79 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp79 at (9164,1-9164,36) */
uint64_t __tmp_in_tmp79;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp79;
}
tmp79[i0] = (role == SERVER) ? __tmp_in_tmp79 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp80 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp80 at (9167,1-9167,46) */
uint64_t __tmp_in_tmp80;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp80;
}
tmp80[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp80 : 0;
}
}
}
}

vector < uint64_t > tmp81 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp81 at (9170,1-9170,36) */
uint64_t __tmp_in_tmp81;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp81;
}
tmp81[i0] = (role == SERVER) ? __tmp_in_tmp81 : 0;
}

vector < uint64_t > tmp82 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp82 at (9173,1-9173,36) */
uint64_t __tmp_in_tmp82;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp82;
}
tmp82[i0] = (role == SERVER) ? __tmp_in_tmp82 : 0;
}

vector < uint64_t > tmp83 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp83 at (9176,1-9176,36) */
uint64_t __tmp_in_tmp83;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp83;
}
tmp83[i0] = (role == SERVER) ? __tmp_in_tmp83 : 0;
}

vector < uint64_t > tmp84 = make_vector<uint64_t>( (int32_t)160);
/* Variable to read the clear value corresponding to the input variable tmp84 at (9179,1-9179,36) */
uint64_t __tmp_in_tmp84;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)160; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp84;
}
tmp84[i0] = (role == SERVER) ? __tmp_in_tmp84 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp85 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp85 at (9182,1-9182,47) */
uint64_t __tmp_in_tmp85;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)160; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp85;
}
tmp85[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp85 : 0;
}
}
}
}

vector < uint64_t > tmp86 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp86 at (9185,1-9185,36) */
uint64_t __tmp_in_tmp86;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp86;
}
tmp86[i0] = (role == SERVER) ? __tmp_in_tmp86 : 0;
}

vector < uint64_t > tmp87 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp87 at (9188,1-9188,36) */
uint64_t __tmp_in_tmp87;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp87;
}
tmp87[i0] = (role == SERVER) ? __tmp_in_tmp87 : 0;
}

vector < uint64_t > tmp88 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp88 at (9191,1-9191,36) */
uint64_t __tmp_in_tmp88;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp88;
}
tmp88[i0] = (role == SERVER) ? __tmp_in_tmp88 : 0;
}

vector < uint64_t > tmp89 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp89 at (9194,1-9194,36) */
uint64_t __tmp_in_tmp89;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp89;
}
tmp89[i0] = (role == SERVER) ? __tmp_in_tmp89 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp90 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp90 at (9197,1-9197,46) */
uint64_t __tmp_in_tmp90;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp90;
}
tmp90[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp90 : 0;
}
}
}
}

vector < uint64_t > tmp91 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp91 at (9200,1-9200,36) */
uint64_t __tmp_in_tmp91;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp91;
}
tmp91[i0] = (role == SERVER) ? __tmp_in_tmp91 : 0;
}

vector < uint64_t > tmp92 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp92 at (9203,1-9203,36) */
uint64_t __tmp_in_tmp92;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp92;
}
tmp92[i0] = (role == SERVER) ? __tmp_in_tmp92 : 0;
}

vector < uint64_t > tmp93 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp93 at (9206,1-9206,36) */
uint64_t __tmp_in_tmp93;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp93;
}
tmp93[i0] = (role == SERVER) ? __tmp_in_tmp93 : 0;
}

vector < uint64_t > tmp94 = make_vector<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp94 at (9209,1-9209,36) */
uint64_t __tmp_in_tmp94;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp94;
}
tmp94[i0] = (role == SERVER) ? __tmp_in_tmp94 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp95 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp95 at (9212,1-9212,47) */
uint64_t __tmp_in_tmp95;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)192; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp95;
}
tmp95[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp95 : 0;
}
}
}
}

vector < uint64_t > tmp96 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp96 at (9215,1-9215,36) */
uint64_t __tmp_in_tmp96;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp96;
}
tmp96[i0] = (role == SERVER) ? __tmp_in_tmp96 : 0;
}

vector < uint64_t > tmp97 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp97 at (9218,1-9218,36) */
uint64_t __tmp_in_tmp97;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp97;
}
tmp97[i0] = (role == SERVER) ? __tmp_in_tmp97 : 0;
}

vector < uint64_t > tmp98 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp98 at (9221,1-9221,36) */
uint64_t __tmp_in_tmp98;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp98;
}
tmp98[i0] = (role == SERVER) ? __tmp_in_tmp98 : 0;
}

vector < uint64_t > tmp99 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp99 at (9224,1-9224,36) */
uint64_t __tmp_in_tmp99;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp99;
}
tmp99[i0] = (role == SERVER) ? __tmp_in_tmp99 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp100 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp100 at (9227,1-9227,47) */
uint64_t __tmp_in_tmp100;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp100;
}
tmp100[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp100 : 0;
}
}
}
}

vector < uint64_t > tmp101 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp101 at (9230,1-9230,37) */
uint64_t __tmp_in_tmp101;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp101;
}
tmp101[i0] = (role == SERVER) ? __tmp_in_tmp101 : 0;
}

vector < uint64_t > tmp102 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp102 at (9233,1-9233,37) */
uint64_t __tmp_in_tmp102;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp102;
}
tmp102[i0] = (role == SERVER) ? __tmp_in_tmp102 : 0;
}

vector < uint64_t > tmp103 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp103 at (9236,1-9236,37) */
uint64_t __tmp_in_tmp103;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp103;
}
tmp103[i0] = (role == SERVER) ? __tmp_in_tmp103 : 0;
}

vector < uint64_t > tmp104 = make_vector<uint64_t>( (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp104 at (9239,1-9239,37) */
uint64_t __tmp_in_tmp104;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)224; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp104;
}
tmp104[i0] = (role == SERVER) ? __tmp_in_tmp104 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp105 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp105 at (9242,1-9242,48) */
uint64_t __tmp_in_tmp105;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp105;
}
tmp105[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp105 : 0;
}
}
}
}

vector < uint64_t > tmp106 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp106 at (9245,1-9245,37) */
uint64_t __tmp_in_tmp106;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp106;
}
tmp106[i0] = (role == SERVER) ? __tmp_in_tmp106 : 0;
}

vector < uint64_t > tmp107 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp107 at (9248,1-9248,37) */
uint64_t __tmp_in_tmp107;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp107;
}
tmp107[i0] = (role == SERVER) ? __tmp_in_tmp107 : 0;
}

vector < uint64_t > tmp108 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp108 at (9251,1-9251,37) */
uint64_t __tmp_in_tmp108;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp108;
}
tmp108[i0] = (role == SERVER) ? __tmp_in_tmp108 : 0;
}

vector < uint64_t > tmp109 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp109 at (9254,1-9254,37) */
uint64_t __tmp_in_tmp109;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp109;
}
tmp109[i0] = (role == SERVER) ? __tmp_in_tmp109 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp110 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp110 at (9257,1-9257,47) */
uint64_t __tmp_in_tmp110;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp110;
}
tmp110[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp110 : 0;
}
}
}
}

vector < uint64_t > tmp111 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp111 at (9260,1-9260,37) */
uint64_t __tmp_in_tmp111;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp111;
}
tmp111[i0] = (role == SERVER) ? __tmp_in_tmp111 : 0;
}

vector < uint64_t > tmp112 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp112 at (9263,1-9263,37) */
uint64_t __tmp_in_tmp112;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp112;
}
tmp112[i0] = (role == SERVER) ? __tmp_in_tmp112 : 0;
}

vector < uint64_t > tmp113 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp113 at (9266,1-9266,37) */
uint64_t __tmp_in_tmp113;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp113;
}
tmp113[i0] = (role == SERVER) ? __tmp_in_tmp113 : 0;
}

vector < uint64_t > tmp114 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp114 at (9269,1-9269,37) */
uint64_t __tmp_in_tmp114;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp114;
}
tmp114[i0] = (role == SERVER) ? __tmp_in_tmp114 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp115 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp115 at (9272,1-9272,48) */
uint64_t __tmp_in_tmp115;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp115;
}
tmp115[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp115 : 0;
}
}
}
}

vector < uint64_t > tmp116 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp116 at (9275,1-9275,37) */
uint64_t __tmp_in_tmp116;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp116;
}
tmp116[i0] = (role == SERVER) ? __tmp_in_tmp116 : 0;
}

vector < uint64_t > tmp117 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp117 at (9278,1-9278,37) */
uint64_t __tmp_in_tmp117;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp117;
}
tmp117[i0] = (role == SERVER) ? __tmp_in_tmp117 : 0;
}

vector < uint64_t > tmp118 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp118 at (9281,1-9281,37) */
uint64_t __tmp_in_tmp118;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp118;
}
tmp118[i0] = (role == SERVER) ? __tmp_in_tmp118 : 0;
}

vector < uint64_t > tmp119 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp119 at (9284,1-9284,37) */
uint64_t __tmp_in_tmp119;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp119;
}
tmp119[i0] = (role == SERVER) ? __tmp_in_tmp119 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp120 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp120 at (9287,1-9287,47) */
uint64_t __tmp_in_tmp120;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp120;
}
tmp120[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp120 : 0;
}
}
}
}

vector < uint64_t > tmp121 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp121 at (9290,1-9290,37) */
uint64_t __tmp_in_tmp121;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp121;
}
tmp121[i0] = (role == SERVER) ? __tmp_in_tmp121 : 0;
}

vector < uint64_t > tmp122 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp122 at (9293,1-9293,37) */
uint64_t __tmp_in_tmp122;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp122;
}
tmp122[i0] = (role == SERVER) ? __tmp_in_tmp122 : 0;
}

vector < uint64_t > tmp123 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp123 at (9296,1-9296,37) */
uint64_t __tmp_in_tmp123;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp123;
}
tmp123[i0] = (role == SERVER) ? __tmp_in_tmp123 : 0;
}

vector < uint64_t > tmp124 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp124 at (9299,1-9299,37) */
uint64_t __tmp_in_tmp124;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp124;
}
tmp124[i0] = (role == SERVER) ? __tmp_in_tmp124 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp125 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp125 at (9302,1-9302,48) */
uint64_t __tmp_in_tmp125;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)288; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp125;
}
tmp125[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp125 : 0;
}
}
}
}

vector < uint64_t > tmp126 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp126 at (9305,1-9305,37) */
uint64_t __tmp_in_tmp126;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp126;
}
tmp126[i0] = (role == SERVER) ? __tmp_in_tmp126 : 0;
}

vector < uint64_t > tmp127 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp127 at (9308,1-9308,37) */
uint64_t __tmp_in_tmp127;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp127;
}
tmp127[i0] = (role == SERVER) ? __tmp_in_tmp127 : 0;
}

vector < uint64_t > tmp128 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp128 at (9311,1-9311,37) */
uint64_t __tmp_in_tmp128;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp128;
}
tmp128[i0] = (role == SERVER) ? __tmp_in_tmp128 : 0;
}

vector < uint64_t > tmp129 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp129 at (9314,1-9314,37) */
uint64_t __tmp_in_tmp129;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp129;
}
tmp129[i0] = (role == SERVER) ? __tmp_in_tmp129 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp130 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp130 at (9317,1-9317,47) */
uint64_t __tmp_in_tmp130;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp130;
}
tmp130[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp130 : 0;
}
}
}
}

vector < uint64_t > tmp131 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp131 at (9320,1-9320,37) */
uint64_t __tmp_in_tmp131;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp131;
}
tmp131[i0] = (role == SERVER) ? __tmp_in_tmp131 : 0;
}

vector < uint64_t > tmp132 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp132 at (9323,1-9323,37) */
uint64_t __tmp_in_tmp132;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp132;
}
tmp132[i0] = (role == SERVER) ? __tmp_in_tmp132 : 0;
}

vector < uint64_t > tmp133 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp133 at (9326,1-9326,37) */
uint64_t __tmp_in_tmp133;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp133;
}
tmp133[i0] = (role == SERVER) ? __tmp_in_tmp133 : 0;
}

vector < uint64_t > tmp134 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp134 at (9329,1-9329,37) */
uint64_t __tmp_in_tmp134;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp134;
}
tmp134[i0] = (role == SERVER) ? __tmp_in_tmp134 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp135 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp135 at (9332,1-9332,48) */
uint64_t __tmp_in_tmp135;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)320; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp135;
}
tmp135[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp135 : 0;
}
}
}
}

vector < uint64_t > tmp136 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp136 at (9335,1-9335,37) */
uint64_t __tmp_in_tmp136;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp136;
}
tmp136[i0] = (role == SERVER) ? __tmp_in_tmp136 : 0;
}

vector < uint64_t > tmp137 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp137 at (9338,1-9338,37) */
uint64_t __tmp_in_tmp137;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp137;
}
tmp137[i0] = (role == SERVER) ? __tmp_in_tmp137 : 0;
}

vector < uint64_t > tmp138 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp138 at (9341,1-9341,37) */
uint64_t __tmp_in_tmp138;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp138;
}
tmp138[i0] = (role == SERVER) ? __tmp_in_tmp138 : 0;
}

vector < uint64_t > tmp139 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp139 at (9344,1-9344,37) */
uint64_t __tmp_in_tmp139;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp139;
}
tmp139[i0] = (role == SERVER) ? __tmp_in_tmp139 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp140 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp140 at (9347,1-9347,47) */
uint64_t __tmp_in_tmp140;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp140;
}
tmp140[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp140 : 0;
}
}
}
}

vector < uint64_t > tmp141 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp141 at (9350,1-9350,37) */
uint64_t __tmp_in_tmp141;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp141;
}
tmp141[i0] = (role == SERVER) ? __tmp_in_tmp141 : 0;
}

vector < uint64_t > tmp142 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp142 at (9353,1-9353,37) */
uint64_t __tmp_in_tmp142;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp142;
}
tmp142[i0] = (role == SERVER) ? __tmp_in_tmp142 : 0;
}

vector < uint64_t > tmp143 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp143 at (9356,1-9356,37) */
uint64_t __tmp_in_tmp143;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp143;
}
tmp143[i0] = (role == SERVER) ? __tmp_in_tmp143 : 0;
}

vector < uint64_t > tmp144 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp144 at (9359,1-9359,37) */
uint64_t __tmp_in_tmp144;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp144;
}
tmp144[i0] = (role == SERVER) ? __tmp_in_tmp144 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp145 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp145 at (9362,1-9362,48) */
uint64_t __tmp_in_tmp145;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)352; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp145;
}
tmp145[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp145 : 0;
}
}
}
}

vector < uint64_t > tmp146 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp146 at (9365,1-9365,37) */
uint64_t __tmp_in_tmp146;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp146;
}
tmp146[i0] = (role == SERVER) ? __tmp_in_tmp146 : 0;
}

vector < uint64_t > tmp147 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp147 at (9368,1-9368,37) */
uint64_t __tmp_in_tmp147;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp147;
}
tmp147[i0] = (role == SERVER) ? __tmp_in_tmp147 : 0;
}

vector < uint64_t > tmp148 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp148 at (9371,1-9371,37) */
uint64_t __tmp_in_tmp148;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp148;
}
tmp148[i0] = (role == SERVER) ? __tmp_in_tmp148 : 0;
}

vector < uint64_t > tmp149 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp149 at (9374,1-9374,37) */
uint64_t __tmp_in_tmp149;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp149;
}
tmp149[i0] = (role == SERVER) ? __tmp_in_tmp149 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp150 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp150 at (9377,1-9377,47) */
uint64_t __tmp_in_tmp150;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp150;
}
tmp150[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp150 : 0;
}
}
}
}

vector < uint64_t > tmp151 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp151 at (9380,1-9380,37) */
uint64_t __tmp_in_tmp151;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp151;
}
tmp151[i0] = (role == SERVER) ? __tmp_in_tmp151 : 0;
}

vector < uint64_t > tmp152 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp152 at (9383,1-9383,37) */
uint64_t __tmp_in_tmp152;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp152;
}
tmp152[i0] = (role == SERVER) ? __tmp_in_tmp152 : 0;
}

vector < uint64_t > tmp153 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp153 at (9386,1-9386,37) */
uint64_t __tmp_in_tmp153;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp153;
}
tmp153[i0] = (role == SERVER) ? __tmp_in_tmp153 : 0;
}

vector < uint64_t > tmp154 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp154 at (9389,1-9389,37) */
uint64_t __tmp_in_tmp154;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp154;
}
tmp154[i0] = (role == SERVER) ? __tmp_in_tmp154 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp155 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp155 at (9392,1-9392,48) */
uint64_t __tmp_in_tmp155;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp155;
}
tmp155[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp155 : 0;
}
}
}
}

vector < uint64_t > tmp156 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp156 at (9395,1-9395,37) */
uint64_t __tmp_in_tmp156;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp156;
}
tmp156[i0] = (role == SERVER) ? __tmp_in_tmp156 : 0;
}

vector < uint64_t > tmp157 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp157 at (9398,1-9398,37) */
uint64_t __tmp_in_tmp157;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp157;
}
tmp157[i0] = (role == SERVER) ? __tmp_in_tmp157 : 0;
}

vector < uint64_t > tmp158 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp158 at (9401,1-9401,37) */
uint64_t __tmp_in_tmp158;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp158;
}
tmp158[i0] = (role == SERVER) ? __tmp_in_tmp158 : 0;
}

vector < uint64_t > tmp159 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp159 at (9404,1-9404,37) */
uint64_t __tmp_in_tmp159;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp159;
}
tmp159[i0] = (role == SERVER) ? __tmp_in_tmp159 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp160 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp160 at (9407,1-9407,47) */
uint64_t __tmp_in_tmp160;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp160;
}
tmp160[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp160 : 0;
}
}
}
}

vector < uint64_t > tmp161 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp161 at (9410,1-9410,37) */
uint64_t __tmp_in_tmp161;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp161;
}
tmp161[i0] = (role == SERVER) ? __tmp_in_tmp161 : 0;
}

vector < uint64_t > tmp162 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp162 at (9413,1-9413,37) */
uint64_t __tmp_in_tmp162;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp162;
}
tmp162[i0] = (role == SERVER) ? __tmp_in_tmp162 : 0;
}

vector < uint64_t > tmp163 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp163 at (9416,1-9416,37) */
uint64_t __tmp_in_tmp163;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp163;
}
tmp163[i0] = (role == SERVER) ? __tmp_in_tmp163 : 0;
}

vector < uint64_t > tmp164 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp164 at (9419,1-9419,37) */
uint64_t __tmp_in_tmp164;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp164;
}
tmp164[i0] = (role == SERVER) ? __tmp_in_tmp164 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp165 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp165 at (9422,1-9422,48) */
uint64_t __tmp_in_tmp165;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)416; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp165;
}
tmp165[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp165 : 0;
}
}
}
}

vector < uint64_t > tmp166 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp166 at (9425,1-9425,37) */
uint64_t __tmp_in_tmp166;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp166;
}
tmp166[i0] = (role == SERVER) ? __tmp_in_tmp166 : 0;
}

vector < uint64_t > tmp167 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp167 at (9428,1-9428,37) */
uint64_t __tmp_in_tmp167;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp167;
}
tmp167[i0] = (role == SERVER) ? __tmp_in_tmp167 : 0;
}

vector < uint64_t > tmp168 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp168 at (9431,1-9431,37) */
uint64_t __tmp_in_tmp168;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp168;
}
tmp168[i0] = (role == SERVER) ? __tmp_in_tmp168 : 0;
}

vector < uint64_t > tmp169 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp169 at (9434,1-9434,37) */
uint64_t __tmp_in_tmp169;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp169;
}
tmp169[i0] = (role == SERVER) ? __tmp_in_tmp169 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp170 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp170 at (9437,1-9437,47) */
uint64_t __tmp_in_tmp170;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp170;
}
tmp170[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp170 : 0;
}
}
}
}

vector < uint64_t > tmp171 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp171 at (9440,1-9440,37) */
uint64_t __tmp_in_tmp171;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp171;
}
tmp171[i0] = (role == SERVER) ? __tmp_in_tmp171 : 0;
}

vector < uint64_t > tmp172 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp172 at (9443,1-9443,37) */
uint64_t __tmp_in_tmp172;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp172;
}
tmp172[i0] = (role == SERVER) ? __tmp_in_tmp172 : 0;
}

vector < uint64_t > tmp173 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp173 at (9446,1-9446,37) */
uint64_t __tmp_in_tmp173;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp173;
}
tmp173[i0] = (role == SERVER) ? __tmp_in_tmp173 : 0;
}

vector < uint64_t > tmp174 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp174 at (9449,1-9449,37) */
uint64_t __tmp_in_tmp174;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp174;
}
tmp174[i0] = (role == SERVER) ? __tmp_in_tmp174 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp175 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp175 at (9452,1-9452,48) */
uint64_t __tmp_in_tmp175;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)448; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp175;
}
tmp175[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp175 : 0;
}
}
}
}

vector < uint64_t > tmp176 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp176 at (9455,1-9455,37) */
uint64_t __tmp_in_tmp176;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp176;
}
tmp176[i0] = (role == SERVER) ? __tmp_in_tmp176 : 0;
}

vector < uint64_t > tmp177 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp177 at (9458,1-9458,37) */
uint64_t __tmp_in_tmp177;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp177;
}
tmp177[i0] = (role == SERVER) ? __tmp_in_tmp177 : 0;
}

vector < uint64_t > tmp178 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp178 at (9461,1-9461,37) */
uint64_t __tmp_in_tmp178;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp178;
}
tmp178[i0] = (role == SERVER) ? __tmp_in_tmp178 : 0;
}

vector < uint64_t > tmp179 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp179 at (9464,1-9464,37) */
uint64_t __tmp_in_tmp179;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp179;
}
tmp179[i0] = (role == SERVER) ? __tmp_in_tmp179 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp180 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp180 at (9467,1-9467,47) */
uint64_t __tmp_in_tmp180;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp180;
}
tmp180[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp180 : 0;
}
}
}
}

vector < uint64_t > tmp181 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp181 at (9470,1-9470,37) */
uint64_t __tmp_in_tmp181;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp181;
}
tmp181[i0] = (role == SERVER) ? __tmp_in_tmp181 : 0;
}

vector < uint64_t > tmp182 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp182 at (9473,1-9473,37) */
uint64_t __tmp_in_tmp182;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp182;
}
tmp182[i0] = (role == SERVER) ? __tmp_in_tmp182 : 0;
}

vector < uint64_t > tmp183 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp183 at (9476,1-9476,37) */
uint64_t __tmp_in_tmp183;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp183;
}
tmp183[i0] = (role == SERVER) ? __tmp_in_tmp183 : 0;
}

vector < uint64_t > tmp184 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp184 at (9479,1-9479,37) */
uint64_t __tmp_in_tmp184;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp184;
}
tmp184[i0] = (role == SERVER) ? __tmp_in_tmp184 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp185 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp185 at (9482,1-9482,48) */
uint64_t __tmp_in_tmp185;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)480; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp185;
}
tmp185[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp185 : 0;
}
}
}
}

vector < uint64_t > tmp186 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp186 at (9485,1-9485,37) */
uint64_t __tmp_in_tmp186;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp186;
}
tmp186[i0] = (role == SERVER) ? __tmp_in_tmp186 : 0;
}

vector < uint64_t > tmp187 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp187 at (9488,1-9488,37) */
uint64_t __tmp_in_tmp187;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp187;
}
tmp187[i0] = (role == SERVER) ? __tmp_in_tmp187 : 0;
}

vector < uint64_t > tmp188 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp188 at (9491,1-9491,37) */
uint64_t __tmp_in_tmp188;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp188;
}
tmp188[i0] = (role == SERVER) ? __tmp_in_tmp188 : 0;
}

vector < uint64_t > tmp189 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp189 at (9494,1-9494,37) */
uint64_t __tmp_in_tmp189;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp189;
}
tmp189[i0] = (role == SERVER) ? __tmp_in_tmp189 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp190 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp190 at (9497,1-9497,47) */
uint64_t __tmp_in_tmp190;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp190;
}
tmp190[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp190 : 0;
}
}
}
}

vector < uint64_t > tmp191 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp191 at (9500,1-9500,37) */
uint64_t __tmp_in_tmp191;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp191;
}
tmp191[i0] = (role == SERVER) ? __tmp_in_tmp191 : 0;
}

vector < uint64_t > tmp192 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp192 at (9503,1-9503,37) */
uint64_t __tmp_in_tmp192;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp192;
}
tmp192[i0] = (role == SERVER) ? __tmp_in_tmp192 : 0;
}

vector < uint64_t > tmp193 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp193 at (9506,1-9506,37) */
uint64_t __tmp_in_tmp193;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp193;
}
tmp193[i0] = (role == SERVER) ? __tmp_in_tmp193 : 0;
}

vector < uint64_t > tmp194 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp194 at (9509,1-9509,37) */
uint64_t __tmp_in_tmp194;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp194;
}
tmp194[i0] = (role == SERVER) ? __tmp_in_tmp194 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp195 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp195 at (9512,1-9512,48) */
uint64_t __tmp_in_tmp195;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp195;
}
tmp195[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp195 : 0;
}
}
}
}

vector < uint64_t > tmp196 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp196 at (9515,1-9515,37) */
uint64_t __tmp_in_tmp196;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp196;
}
tmp196[i0] = (role == SERVER) ? __tmp_in_tmp196 : 0;
}

vector < uint64_t > tmp197 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp197 at (9518,1-9518,37) */
uint64_t __tmp_in_tmp197;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp197;
}
tmp197[i0] = (role == SERVER) ? __tmp_in_tmp197 : 0;
}

vector < uint64_t > tmp198 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp198 at (9521,1-9521,37) */
uint64_t __tmp_in_tmp198;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp198;
}
tmp198[i0] = (role == SERVER) ? __tmp_in_tmp198 : 0;
}

vector < uint64_t > tmp199 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp199 at (9524,1-9524,37) */
uint64_t __tmp_in_tmp199;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp199;
}
tmp199[i0] = (role == SERVER) ? __tmp_in_tmp199 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp200 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp200 at (9527,1-9527,48) */
uint64_t __tmp_in_tmp200;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp200;
}
tmp200[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp200 : 0;
}
}
}
}

vector < uint64_t > tmp201 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp201 at (9530,1-9530,37) */
uint64_t __tmp_in_tmp201;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp201;
}
tmp201[i0] = (role == SERVER) ? __tmp_in_tmp201 : 0;
}

vector < uint64_t > tmp202 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp202 at (9533,1-9533,37) */
uint64_t __tmp_in_tmp202;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp202;
}
tmp202[i0] = (role == SERVER) ? __tmp_in_tmp202 : 0;
}

vector < uint64_t > tmp203 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp203 at (9536,1-9536,37) */
uint64_t __tmp_in_tmp203;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp203;
}
tmp203[i0] = (role == SERVER) ? __tmp_in_tmp203 : 0;
}

vector < uint64_t > tmp204 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp204 at (9539,1-9539,37) */
uint64_t __tmp_in_tmp204;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp204;
}
tmp204[i0] = (role == SERVER) ? __tmp_in_tmp204 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp205 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp205 at (9542,1-9542,47) */
uint64_t __tmp_in_tmp205;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp205;
}
tmp205[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp205 : 0;
}
}
}
}

vector < uint64_t > tmp206 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp206 at (9545,1-9545,37) */
uint64_t __tmp_in_tmp206;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp206;
}
tmp206[i0] = (role == SERVER) ? __tmp_in_tmp206 : 0;
}

vector < uint64_t > tmp207 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp207 at (9548,1-9548,37) */
uint64_t __tmp_in_tmp207;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp207;
}
tmp207[i0] = (role == SERVER) ? __tmp_in_tmp207 : 0;
}

vector < uint64_t > tmp208 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp208 at (9551,1-9551,37) */
uint64_t __tmp_in_tmp208;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp208;
}
tmp208[i0] = (role == SERVER) ? __tmp_in_tmp208 : 0;
}

vector < uint64_t > tmp209 = make_vector<uint64_t>( (int32_t)288);
/* Variable to read the clear value corresponding to the input variable tmp209 at (9554,1-9554,37) */
uint64_t __tmp_in_tmp209;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)288; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp209;
}
tmp209[i0] = (role == SERVER) ? __tmp_in_tmp209 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp210 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp210 at (9557,1-9557,48) */
uint64_t __tmp_in_tmp210;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)288; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp210;
}
tmp210[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp210 : 0;
}
}
}
}

vector < uint64_t > tmp211 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp211 at (9560,1-9560,37) */
uint64_t __tmp_in_tmp211;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp211;
}
tmp211[i0] = (role == SERVER) ? __tmp_in_tmp211 : 0;
}

vector < uint64_t > tmp212 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp212 at (9563,1-9563,37) */
uint64_t __tmp_in_tmp212;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp212;
}
tmp212[i0] = (role == SERVER) ? __tmp_in_tmp212 : 0;
}

vector < uint64_t > tmp213 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp213 at (9566,1-9566,37) */
uint64_t __tmp_in_tmp213;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp213;
}
tmp213[i0] = (role == SERVER) ? __tmp_in_tmp213 : 0;
}

vector < uint64_t > tmp214 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp214 at (9569,1-9569,37) */
uint64_t __tmp_in_tmp214;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp214;
}
tmp214[i0] = (role == SERVER) ? __tmp_in_tmp214 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp215 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp215 at (9572,1-9572,47) */
uint64_t __tmp_in_tmp215;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp215;
}
tmp215[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp215 : 0;
}
}
}
}

vector < uint64_t > tmp216 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp216 at (9575,1-9575,37) */
uint64_t __tmp_in_tmp216;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp216;
}
tmp216[i0] = (role == SERVER) ? __tmp_in_tmp216 : 0;
}

vector < uint64_t > tmp217 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp217 at (9578,1-9578,37) */
uint64_t __tmp_in_tmp217;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp217;
}
tmp217[i0] = (role == SERVER) ? __tmp_in_tmp217 : 0;
}

vector < uint64_t > tmp218 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp218 at (9581,1-9581,37) */
uint64_t __tmp_in_tmp218;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp218;
}
tmp218[i0] = (role == SERVER) ? __tmp_in_tmp218 : 0;
}

vector < uint64_t > tmp219 = make_vector<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp219 at (9584,1-9584,37) */
uint64_t __tmp_in_tmp219;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp219;
}
tmp219[i0] = (role == SERVER) ? __tmp_in_tmp219 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp220 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp220 at (9587,1-9587,48) */
uint64_t __tmp_in_tmp220;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)320; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp220;
}
tmp220[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp220 : 0;
}
}
}
}

vector < uint64_t > tmp221 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp221 at (9590,1-9590,37) */
uint64_t __tmp_in_tmp221;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp221;
}
tmp221[i0] = (role == SERVER) ? __tmp_in_tmp221 : 0;
}

vector < uint64_t > tmp222 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp222 at (9593,1-9593,37) */
uint64_t __tmp_in_tmp222;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp222;
}
tmp222[i0] = (role == SERVER) ? __tmp_in_tmp222 : 0;
}

vector < uint64_t > tmp223 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp223 at (9596,1-9596,37) */
uint64_t __tmp_in_tmp223;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp223;
}
tmp223[i0] = (role == SERVER) ? __tmp_in_tmp223 : 0;
}

vector < uint64_t > tmp224 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp224 at (9599,1-9599,37) */
uint64_t __tmp_in_tmp224;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp224;
}
tmp224[i0] = (role == SERVER) ? __tmp_in_tmp224 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp225 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp225 at (9602,1-9602,47) */
uint64_t __tmp_in_tmp225;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp225;
}
tmp225[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp225 : 0;
}
}
}
}

vector < uint64_t > tmp226 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp226 at (9605,1-9605,37) */
uint64_t __tmp_in_tmp226;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp226;
}
tmp226[i0] = (role == SERVER) ? __tmp_in_tmp226 : 0;
}

vector < uint64_t > tmp227 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp227 at (9608,1-9608,37) */
uint64_t __tmp_in_tmp227;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp227;
}
tmp227[i0] = (role == SERVER) ? __tmp_in_tmp227 : 0;
}

vector < uint64_t > tmp228 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp228 at (9611,1-9611,37) */
uint64_t __tmp_in_tmp228;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp228;
}
tmp228[i0] = (role == SERVER) ? __tmp_in_tmp228 : 0;
}

vector < uint64_t > tmp229 = make_vector<uint64_t>( (int32_t)352);
/* Variable to read the clear value corresponding to the input variable tmp229 at (9614,1-9614,37) */
uint64_t __tmp_in_tmp229;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)352; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp229;
}
tmp229[i0] = (role == SERVER) ? __tmp_in_tmp229 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp230 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp230 at (9617,1-9617,48) */
uint64_t __tmp_in_tmp230;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)352; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp230;
}
tmp230[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp230 : 0;
}
}
}
}

vector < uint64_t > tmp231 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp231 at (9620,1-9620,37) */
uint64_t __tmp_in_tmp231;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp231;
}
tmp231[i0] = (role == SERVER) ? __tmp_in_tmp231 : 0;
}

vector < uint64_t > tmp232 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp232 at (9623,1-9623,37) */
uint64_t __tmp_in_tmp232;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp232;
}
tmp232[i0] = (role == SERVER) ? __tmp_in_tmp232 : 0;
}

vector < uint64_t > tmp233 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp233 at (9626,1-9626,37) */
uint64_t __tmp_in_tmp233;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp233;
}
tmp233[i0] = (role == SERVER) ? __tmp_in_tmp233 : 0;
}

vector < uint64_t > tmp234 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp234 at (9629,1-9629,37) */
uint64_t __tmp_in_tmp234;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp234;
}
tmp234[i0] = (role == SERVER) ? __tmp_in_tmp234 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp235 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp235 at (9632,1-9632,47) */
uint64_t __tmp_in_tmp235;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp235;
}
tmp235[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp235 : 0;
}
}
}
}

vector < uint64_t > tmp236 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp236 at (9635,1-9635,37) */
uint64_t __tmp_in_tmp236;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp236;
}
tmp236[i0] = (role == SERVER) ? __tmp_in_tmp236 : 0;
}

vector < uint64_t > tmp237 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp237 at (9638,1-9638,37) */
uint64_t __tmp_in_tmp237;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp237;
}
tmp237[i0] = (role == SERVER) ? __tmp_in_tmp237 : 0;
}

vector < uint64_t > tmp238 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp238 at (9641,1-9641,37) */
uint64_t __tmp_in_tmp238;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp238;
}
tmp238[i0] = (role == SERVER) ? __tmp_in_tmp238 : 0;
}

vector < uint64_t > tmp239 = make_vector<uint64_t>( (int32_t)384);
/* Variable to read the clear value corresponding to the input variable tmp239 at (9644,1-9644,37) */
uint64_t __tmp_in_tmp239;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)384; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp239;
}
tmp239[i0] = (role == SERVER) ? __tmp_in_tmp239 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp240 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp240 at (9647,1-9647,48) */
uint64_t __tmp_in_tmp240;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)384; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp240;
}
tmp240[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp240 : 0;
}
}
}
}

vector < uint64_t > tmp241 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp241 at (9650,1-9650,37) */
uint64_t __tmp_in_tmp241;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp241;
}
tmp241[i0] = (role == SERVER) ? __tmp_in_tmp241 : 0;
}

vector < uint64_t > tmp242 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp242 at (9653,1-9653,37) */
uint64_t __tmp_in_tmp242;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp242;
}
tmp242[i0] = (role == SERVER) ? __tmp_in_tmp242 : 0;
}

vector < uint64_t > tmp243 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp243 at (9656,1-9656,37) */
uint64_t __tmp_in_tmp243;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp243;
}
tmp243[i0] = (role == SERVER) ? __tmp_in_tmp243 : 0;
}

vector < uint64_t > tmp244 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp244 at (9659,1-9659,37) */
uint64_t __tmp_in_tmp244;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp244;
}
tmp244[i0] = (role == SERVER) ? __tmp_in_tmp244 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp245 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp245 at (9662,1-9662,47) */
uint64_t __tmp_in_tmp245;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp245;
}
tmp245[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp245 : 0;
}
}
}
}

vector < uint64_t > tmp246 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp246 at (9665,1-9665,37) */
uint64_t __tmp_in_tmp246;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp246;
}
tmp246[i0] = (role == SERVER) ? __tmp_in_tmp246 : 0;
}

vector < uint64_t > tmp247 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp247 at (9668,1-9668,37) */
uint64_t __tmp_in_tmp247;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp247;
}
tmp247[i0] = (role == SERVER) ? __tmp_in_tmp247 : 0;
}

vector < uint64_t > tmp248 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp248 at (9671,1-9671,37) */
uint64_t __tmp_in_tmp248;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp248;
}
tmp248[i0] = (role == SERVER) ? __tmp_in_tmp248 : 0;
}

vector < uint64_t > tmp249 = make_vector<uint64_t>( (int32_t)416);
/* Variable to read the clear value corresponding to the input variable tmp249 at (9674,1-9674,37) */
uint64_t __tmp_in_tmp249;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)416; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp249;
}
tmp249[i0] = (role == SERVER) ? __tmp_in_tmp249 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp250 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp250 at (9677,1-9677,48) */
uint64_t __tmp_in_tmp250;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)416; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp250;
}
tmp250[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp250 : 0;
}
}
}
}

vector < uint64_t > tmp251 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp251 at (9680,1-9680,37) */
uint64_t __tmp_in_tmp251;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp251;
}
tmp251[i0] = (role == SERVER) ? __tmp_in_tmp251 : 0;
}

vector < uint64_t > tmp252 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp252 at (9683,1-9683,37) */
uint64_t __tmp_in_tmp252;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp252;
}
tmp252[i0] = (role == SERVER) ? __tmp_in_tmp252 : 0;
}

vector < uint64_t > tmp253 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp253 at (9686,1-9686,37) */
uint64_t __tmp_in_tmp253;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp253;
}
tmp253[i0] = (role == SERVER) ? __tmp_in_tmp253 : 0;
}

vector < uint64_t > tmp254 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp254 at (9689,1-9689,37) */
uint64_t __tmp_in_tmp254;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp254;
}
tmp254[i0] = (role == SERVER) ? __tmp_in_tmp254 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp255 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp255 at (9692,1-9692,47) */
uint64_t __tmp_in_tmp255;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp255;
}
tmp255[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp255 : 0;
}
}
}
}

vector < uint64_t > tmp256 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp256 at (9695,1-9695,37) */
uint64_t __tmp_in_tmp256;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp256;
}
tmp256[i0] = (role == SERVER) ? __tmp_in_tmp256 : 0;
}

vector < uint64_t > tmp257 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp257 at (9698,1-9698,37) */
uint64_t __tmp_in_tmp257;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp257;
}
tmp257[i0] = (role == SERVER) ? __tmp_in_tmp257 : 0;
}

vector < uint64_t > tmp258 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp258 at (9701,1-9701,37) */
uint64_t __tmp_in_tmp258;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp258;
}
tmp258[i0] = (role == SERVER) ? __tmp_in_tmp258 : 0;
}

vector < uint64_t > tmp259 = make_vector<uint64_t>( (int32_t)448);
/* Variable to read the clear value corresponding to the input variable tmp259 at (9704,1-9704,37) */
uint64_t __tmp_in_tmp259;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)448; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp259;
}
tmp259[i0] = (role == SERVER) ? __tmp_in_tmp259 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp260 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp260 at (9707,1-9707,48) */
uint64_t __tmp_in_tmp260;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)448; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp260;
}
tmp260[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp260 : 0;
}
}
}
}

vector < uint64_t > tmp261 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp261 at (9710,1-9710,37) */
uint64_t __tmp_in_tmp261;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp261;
}
tmp261[i0] = (role == SERVER) ? __tmp_in_tmp261 : 0;
}

vector < uint64_t > tmp262 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp262 at (9713,1-9713,37) */
uint64_t __tmp_in_tmp262;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp262;
}
tmp262[i0] = (role == SERVER) ? __tmp_in_tmp262 : 0;
}

vector < uint64_t > tmp263 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp263 at (9716,1-9716,37) */
uint64_t __tmp_in_tmp263;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp263;
}
tmp263[i0] = (role == SERVER) ? __tmp_in_tmp263 : 0;
}

vector < uint64_t > tmp264 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp264 at (9719,1-9719,37) */
uint64_t __tmp_in_tmp264;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp264;
}
tmp264[i0] = (role == SERVER) ? __tmp_in_tmp264 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp265 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp265 at (9722,1-9722,47) */
uint64_t __tmp_in_tmp265;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp265;
}
tmp265[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp265 : 0;
}
}
}
}

vector < uint64_t > tmp266 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp266 at (9725,1-9725,37) */
uint64_t __tmp_in_tmp266;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp266;
}
tmp266[i0] = (role == SERVER) ? __tmp_in_tmp266 : 0;
}

vector < uint64_t > tmp267 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp267 at (9728,1-9728,37) */
uint64_t __tmp_in_tmp267;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp267;
}
tmp267[i0] = (role == SERVER) ? __tmp_in_tmp267 : 0;
}

vector < uint64_t > tmp268 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp268 at (9731,1-9731,37) */
uint64_t __tmp_in_tmp268;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp268;
}
tmp268[i0] = (role == SERVER) ? __tmp_in_tmp268 : 0;
}

vector < uint64_t > tmp269 = make_vector<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp269 at (9734,1-9734,37) */
uint64_t __tmp_in_tmp269;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp269;
}
tmp269[i0] = (role == SERVER) ? __tmp_in_tmp269 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp270 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp270 at (9737,1-9737,48) */
uint64_t __tmp_in_tmp270;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)480; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp270;
}
tmp270[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp270 : 0;
}
}
}
}

vector < uint64_t > tmp271 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp271 at (9740,1-9740,37) */
uint64_t __tmp_in_tmp271;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp271;
}
tmp271[i0] = (role == SERVER) ? __tmp_in_tmp271 : 0;
}

vector < uint64_t > tmp272 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp272 at (9743,1-9743,37) */
uint64_t __tmp_in_tmp272;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp272;
}
tmp272[i0] = (role == SERVER) ? __tmp_in_tmp272 : 0;
}

vector < uint64_t > tmp273 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp273 at (9746,1-9746,37) */
uint64_t __tmp_in_tmp273;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp273;
}
tmp273[i0] = (role == SERVER) ? __tmp_in_tmp273 : 0;
}

vector < uint64_t > tmp274 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp274 at (9749,1-9749,37) */
uint64_t __tmp_in_tmp274;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp274;
}
tmp274[i0] = (role == SERVER) ? __tmp_in_tmp274 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp275 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp275 at (9752,1-9752,47) */
uint64_t __tmp_in_tmp275;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp275;
}
tmp275[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp275 : 0;
}
}
}
}

vector < uint64_t > tmp276 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp276 at (9755,1-9755,37) */
uint64_t __tmp_in_tmp276;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp276;
}
tmp276[i0] = (role == SERVER) ? __tmp_in_tmp276 : 0;
}

vector < uint64_t > tmp277 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp277 at (9758,1-9758,37) */
uint64_t __tmp_in_tmp277;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp277;
}
tmp277[i0] = (role == SERVER) ? __tmp_in_tmp277 : 0;
}

vector < uint64_t > tmp278 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp278 at (9761,1-9761,37) */
uint64_t __tmp_in_tmp278;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp278;
}
tmp278[i0] = (role == SERVER) ? __tmp_in_tmp278 : 0;
}

vector < uint64_t > tmp279 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp279 at (9764,1-9764,37) */
uint64_t __tmp_in_tmp279;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp279;
}
tmp279[i0] = (role == SERVER) ? __tmp_in_tmp279 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp280 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp280 at (9767,1-9767,48) */
uint64_t __tmp_in_tmp280;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp280;
}
tmp280[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp280 : 0;
}
}
}
}

vector < uint64_t > tmp281 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp281 at (9770,1-9770,37) */
uint64_t __tmp_in_tmp281;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp281;
}
tmp281[i0] = (role == SERVER) ? __tmp_in_tmp281 : 0;
}

vector < uint64_t > tmp282 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp282 at (9773,1-9773,37) */
uint64_t __tmp_in_tmp282;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp282;
}
tmp282[i0] = (role == SERVER) ? __tmp_in_tmp282 : 0;
}

vector < uint64_t > tmp283 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp283 at (9776,1-9776,37) */
uint64_t __tmp_in_tmp283;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp283;
}
tmp283[i0] = (role == SERVER) ? __tmp_in_tmp283 : 0;
}

vector < uint64_t > tmp284 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp284 at (9779,1-9779,37) */
uint64_t __tmp_in_tmp284;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp284;
}
tmp284[i0] = (role == SERVER) ? __tmp_in_tmp284 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp285 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp285 at (9782,1-9782,47) */
uint64_t __tmp_in_tmp285;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp285;
}
tmp285[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp285 : 0;
}
}
}
}

vector < uint64_t > tmp286 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp286 at (9785,1-9785,37) */
uint64_t __tmp_in_tmp286;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp286;
}
tmp286[i0] = (role == SERVER) ? __tmp_in_tmp286 : 0;
}

vector < uint64_t > tmp287 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp287 at (9788,1-9788,37) */
uint64_t __tmp_in_tmp287;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp287;
}
tmp287[i0] = (role == SERVER) ? __tmp_in_tmp287 : 0;
}

vector < uint64_t > tmp288 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp288 at (9791,1-9791,37) */
uint64_t __tmp_in_tmp288;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp288;
}
tmp288[i0] = (role == SERVER) ? __tmp_in_tmp288 : 0;
}

vector < uint64_t > tmp289 = make_vector<uint64_t>( (int32_t)544);
/* Variable to read the clear value corresponding to the input variable tmp289 at (9794,1-9794,37) */
uint64_t __tmp_in_tmp289;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)544; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp289;
}
tmp289[i0] = (role == SERVER) ? __tmp_in_tmp289 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp290 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp290 at (9797,1-9797,48) */
uint64_t __tmp_in_tmp290;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)544; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp290;
}
tmp290[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp290 : 0;
}
}
}
}

vector < uint64_t > tmp291 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp291 at (9800,1-9800,37) */
uint64_t __tmp_in_tmp291;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp291;
}
tmp291[i0] = (role == SERVER) ? __tmp_in_tmp291 : 0;
}

vector < uint64_t > tmp292 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp292 at (9803,1-9803,37) */
uint64_t __tmp_in_tmp292;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp292;
}
tmp292[i0] = (role == SERVER) ? __tmp_in_tmp292 : 0;
}

vector < uint64_t > tmp293 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp293 at (9806,1-9806,37) */
uint64_t __tmp_in_tmp293;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp293;
}
tmp293[i0] = (role == SERVER) ? __tmp_in_tmp293 : 0;
}

vector < uint64_t > tmp294 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp294 at (9809,1-9809,37) */
uint64_t __tmp_in_tmp294;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp294;
}
tmp294[i0] = (role == SERVER) ? __tmp_in_tmp294 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp295 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp295 at (9812,1-9812,47) */
uint64_t __tmp_in_tmp295;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp295;
}
tmp295[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp295 : 0;
}
}
}
}

vector < uint64_t > tmp296 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp296 at (9815,1-9815,37) */
uint64_t __tmp_in_tmp296;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp296;
}
tmp296[i0] = (role == SERVER) ? __tmp_in_tmp296 : 0;
}

vector < uint64_t > tmp297 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp297 at (9818,1-9818,37) */
uint64_t __tmp_in_tmp297;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp297;
}
tmp297[i0] = (role == SERVER) ? __tmp_in_tmp297 : 0;
}

vector < uint64_t > tmp298 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp298 at (9821,1-9821,37) */
uint64_t __tmp_in_tmp298;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp298;
}
tmp298[i0] = (role == SERVER) ? __tmp_in_tmp298 : 0;
}

vector < uint64_t > tmp299 = make_vector<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp299 at (9824,1-9824,37) */
uint64_t __tmp_in_tmp299;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp299;
}
tmp299[i0] = (role == SERVER) ? __tmp_in_tmp299 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp300 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp300 at (9827,1-9827,48) */
uint64_t __tmp_in_tmp300;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)576; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp300;
}
tmp300[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp300 : 0;
}
}
}
}

vector < uint64_t > tmp301 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp301 at (9830,1-9830,37) */
uint64_t __tmp_in_tmp301;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp301;
}
tmp301[i0] = (role == SERVER) ? __tmp_in_tmp301 : 0;
}

vector < uint64_t > tmp302 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp302 at (9833,1-9833,37) */
uint64_t __tmp_in_tmp302;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp302;
}
tmp302[i0] = (role == SERVER) ? __tmp_in_tmp302 : 0;
}

vector < uint64_t > tmp303 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp303 at (9836,1-9836,37) */
uint64_t __tmp_in_tmp303;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp303;
}
tmp303[i0] = (role == SERVER) ? __tmp_in_tmp303 : 0;
}

vector < uint64_t > tmp304 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp304 at (9839,1-9839,37) */
uint64_t __tmp_in_tmp304;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp304;
}
tmp304[i0] = (role == SERVER) ? __tmp_in_tmp304 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp305 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp305 at (9842,1-9842,47) */
uint64_t __tmp_in_tmp305;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp305;
}
tmp305[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp305 : 0;
}
}
}
}

vector < uint64_t > tmp306 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp306 at (9845,1-9845,37) */
uint64_t __tmp_in_tmp306;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp306;
}
tmp306[i0] = (role == SERVER) ? __tmp_in_tmp306 : 0;
}

vector < uint64_t > tmp307 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp307 at (9848,1-9848,37) */
uint64_t __tmp_in_tmp307;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp307;
}
tmp307[i0] = (role == SERVER) ? __tmp_in_tmp307 : 0;
}

vector < uint64_t > tmp308 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp308 at (9851,1-9851,37) */
uint64_t __tmp_in_tmp308;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp308;
}
tmp308[i0] = (role == SERVER) ? __tmp_in_tmp308 : 0;
}

vector < uint64_t > tmp309 = make_vector<uint64_t>( (int32_t)608);
/* Variable to read the clear value corresponding to the input variable tmp309 at (9854,1-9854,37) */
uint64_t __tmp_in_tmp309;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)608; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp309;
}
tmp309[i0] = (role == SERVER) ? __tmp_in_tmp309 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp310 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp310 at (9857,1-9857,48) */
uint64_t __tmp_in_tmp310;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)608; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp310;
}
tmp310[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp310 : 0;
}
}
}
}

vector < uint64_t > tmp311 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp311 at (9860,1-9860,37) */
uint64_t __tmp_in_tmp311;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp311;
}
tmp311[i0] = (role == SERVER) ? __tmp_in_tmp311 : 0;
}

vector < uint64_t > tmp312 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp312 at (9863,1-9863,37) */
uint64_t __tmp_in_tmp312;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp312;
}
tmp312[i0] = (role == SERVER) ? __tmp_in_tmp312 : 0;
}

vector < uint64_t > tmp313 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp313 at (9866,1-9866,37) */
uint64_t __tmp_in_tmp313;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp313;
}
tmp313[i0] = (role == SERVER) ? __tmp_in_tmp313 : 0;
}

vector < uint64_t > tmp314 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp314 at (9869,1-9869,37) */
uint64_t __tmp_in_tmp314;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp314;
}
tmp314[i0] = (role == SERVER) ? __tmp_in_tmp314 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp315 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp315 at (9872,1-9872,47) */
uint64_t __tmp_in_tmp315;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp315;
}
tmp315[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp315 : 0;
}
}
}
}

vector < uint64_t > tmp316 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp316 at (9875,1-9875,37) */
uint64_t __tmp_in_tmp316;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp316;
}
tmp316[i0] = (role == SERVER) ? __tmp_in_tmp316 : 0;
}

vector < uint64_t > tmp317 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp317 at (9878,1-9878,37) */
uint64_t __tmp_in_tmp317;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp317;
}
tmp317[i0] = (role == SERVER) ? __tmp_in_tmp317 : 0;
}

vector < uint64_t > tmp318 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp318 at (9881,1-9881,37) */
uint64_t __tmp_in_tmp318;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp318;
}
tmp318[i0] = (role == SERVER) ? __tmp_in_tmp318 : 0;
}

vector < uint64_t > tmp319 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp319 at (9884,1-9884,37) */
uint64_t __tmp_in_tmp319;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp319;
}
tmp319[i0] = (role == SERVER) ? __tmp_in_tmp319 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp320 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp320 at (9887,1-9887,48) */
uint64_t __tmp_in_tmp320;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)640; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp320;
}
tmp320[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp320 : 0;
}
}
}
}

vector < uint64_t > tmp321 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp321 at (9890,1-9890,37) */
uint64_t __tmp_in_tmp321;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp321;
}
tmp321[i0] = (role == SERVER) ? __tmp_in_tmp321 : 0;
}

vector < uint64_t > tmp322 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp322 at (9893,1-9893,37) */
uint64_t __tmp_in_tmp322;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp322;
}
tmp322[i0] = (role == SERVER) ? __tmp_in_tmp322 : 0;
}

vector < uint64_t > tmp323 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp323 at (9896,1-9896,37) */
uint64_t __tmp_in_tmp323;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp323;
}
tmp323[i0] = (role == SERVER) ? __tmp_in_tmp323 : 0;
}

vector < uint64_t > tmp324 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp324 at (9899,1-9899,37) */
uint64_t __tmp_in_tmp324;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp324;
}
tmp324[i0] = (role == SERVER) ? __tmp_in_tmp324 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp325 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp325 at (9902,1-9902,47) */
uint64_t __tmp_in_tmp325;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp325;
}
tmp325[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp325 : 0;
}
}
}
}

vector < uint64_t > tmp326 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp326 at (9905,1-9905,37) */
uint64_t __tmp_in_tmp326;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp326;
}
tmp326[i0] = (role == SERVER) ? __tmp_in_tmp326 : 0;
}

vector < uint64_t > tmp327 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp327 at (9908,1-9908,37) */
uint64_t __tmp_in_tmp327;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp327;
}
tmp327[i0] = (role == SERVER) ? __tmp_in_tmp327 : 0;
}

vector < uint64_t > tmp328 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp328 at (9911,1-9911,37) */
uint64_t __tmp_in_tmp328;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp328;
}
tmp328[i0] = (role == SERVER) ? __tmp_in_tmp328 : 0;
}

vector < uint64_t > tmp329 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp329 at (9914,1-9914,37) */
uint64_t __tmp_in_tmp329;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp329;
}
tmp329[i0] = (role == SERVER) ? __tmp_in_tmp329 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp330 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp330 at (9917,1-9917,48) */
uint64_t __tmp_in_tmp330;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)672; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp330;
}
tmp330[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp330 : 0;
}
}
}
}

vector < uint64_t > tmp331 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp331 at (9920,1-9920,37) */
uint64_t __tmp_in_tmp331;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp331;
}
tmp331[i0] = (role == SERVER) ? __tmp_in_tmp331 : 0;
}

vector < uint64_t > tmp332 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp332 at (9923,1-9923,37) */
uint64_t __tmp_in_tmp332;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp332;
}
tmp332[i0] = (role == SERVER) ? __tmp_in_tmp332 : 0;
}

vector < uint64_t > tmp333 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp333 at (9926,1-9926,37) */
uint64_t __tmp_in_tmp333;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp333;
}
tmp333[i0] = (role == SERVER) ? __tmp_in_tmp333 : 0;
}

vector < uint64_t > tmp334 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp334 at (9929,1-9929,37) */
uint64_t __tmp_in_tmp334;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp334;
}
tmp334[i0] = (role == SERVER) ? __tmp_in_tmp334 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp335 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp335 at (9932,1-9932,47) */
uint64_t __tmp_in_tmp335;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp335;
}
tmp335[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp335 : 0;
}
}
}
}

vector < uint64_t > tmp336 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp336 at (9935,1-9935,37) */
uint64_t __tmp_in_tmp336;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp336;
}
tmp336[i0] = (role == SERVER) ? __tmp_in_tmp336 : 0;
}

vector < uint64_t > tmp337 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp337 at (9938,1-9938,37) */
uint64_t __tmp_in_tmp337;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp337;
}
tmp337[i0] = (role == SERVER) ? __tmp_in_tmp337 : 0;
}

vector < uint64_t > tmp338 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp338 at (9941,1-9941,37) */
uint64_t __tmp_in_tmp338;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp338;
}
tmp338[i0] = (role == SERVER) ? __tmp_in_tmp338 : 0;
}

vector < uint64_t > tmp339 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp339 at (9944,1-9944,37) */
uint64_t __tmp_in_tmp339;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp339;
}
tmp339[i0] = (role == SERVER) ? __tmp_in_tmp339 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp340 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp340 at (9947,1-9947,48) */
uint64_t __tmp_in_tmp340;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)704; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp340;
}
tmp340[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp340 : 0;
}
}
}
}

vector < uint64_t > tmp341 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp341 at (9950,1-9950,37) */
uint64_t __tmp_in_tmp341;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp341;
}
tmp341[i0] = (role == SERVER) ? __tmp_in_tmp341 : 0;
}

vector < uint64_t > tmp342 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp342 at (9953,1-9953,37) */
uint64_t __tmp_in_tmp342;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp342;
}
tmp342[i0] = (role == SERVER) ? __tmp_in_tmp342 : 0;
}

vector < uint64_t > tmp343 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp343 at (9956,1-9956,37) */
uint64_t __tmp_in_tmp343;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp343;
}
tmp343[i0] = (role == SERVER) ? __tmp_in_tmp343 : 0;
}

vector < uint64_t > tmp344 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp344 at (9959,1-9959,37) */
uint64_t __tmp_in_tmp344;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp344;
}
tmp344[i0] = (role == SERVER) ? __tmp_in_tmp344 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp345 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp345 at (9962,1-9962,47) */
uint64_t __tmp_in_tmp345;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp345;
}
tmp345[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp345 : 0;
}
}
}
}

vector < uint64_t > tmp346 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp346 at (9965,1-9965,37) */
uint64_t __tmp_in_tmp346;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp346;
}
tmp346[i0] = (role == SERVER) ? __tmp_in_tmp346 : 0;
}

vector < uint64_t > tmp347 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp347 at (9968,1-9968,37) */
uint64_t __tmp_in_tmp347;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp347;
}
tmp347[i0] = (role == SERVER) ? __tmp_in_tmp347 : 0;
}

vector < uint64_t > tmp348 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp348 at (9971,1-9971,37) */
uint64_t __tmp_in_tmp348;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp348;
}
tmp348[i0] = (role == SERVER) ? __tmp_in_tmp348 : 0;
}

vector < uint64_t > tmp349 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp349 at (9974,1-9974,37) */
uint64_t __tmp_in_tmp349;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp349;
}
tmp349[i0] = (role == SERVER) ? __tmp_in_tmp349 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp350 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp350 at (9977,1-9977,48) */
uint64_t __tmp_in_tmp350;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)736; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp350;
}
tmp350[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp350 : 0;
}
}
}
}

vector < uint64_t > tmp351 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp351 at (9980,1-9980,37) */
uint64_t __tmp_in_tmp351;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp351;
}
tmp351[i0] = (role == SERVER) ? __tmp_in_tmp351 : 0;
}

vector < uint64_t > tmp352 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp352 at (9983,1-9983,37) */
uint64_t __tmp_in_tmp352;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp352;
}
tmp352[i0] = (role == SERVER) ? __tmp_in_tmp352 : 0;
}

vector < uint64_t > tmp353 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp353 at (9986,1-9986,37) */
uint64_t __tmp_in_tmp353;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp353;
}
tmp353[i0] = (role == SERVER) ? __tmp_in_tmp353 : 0;
}

vector < uint64_t > tmp354 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp354 at (9989,1-9989,37) */
uint64_t __tmp_in_tmp354;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp354;
}
tmp354[i0] = (role == SERVER) ? __tmp_in_tmp354 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp355 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp355 at (9992,1-9992,47) */
uint64_t __tmp_in_tmp355;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp355;
}
tmp355[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp355 : 0;
}
}
}
}

vector < uint64_t > tmp356 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp356 at (9995,1-9995,37) */
uint64_t __tmp_in_tmp356;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp356;
}
tmp356[i0] = (role == SERVER) ? __tmp_in_tmp356 : 0;
}

vector < uint64_t > tmp357 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp357 at (9998,1-9998,37) */
uint64_t __tmp_in_tmp357;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp357;
}
tmp357[i0] = (role == SERVER) ? __tmp_in_tmp357 : 0;
}

vector < uint64_t > tmp358 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp358 at (10001,1-10001,37) */
uint64_t __tmp_in_tmp358;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp358;
}
tmp358[i0] = (role == SERVER) ? __tmp_in_tmp358 : 0;
}

vector < uint64_t > tmp359 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp359 at (10004,1-10004,37) */
uint64_t __tmp_in_tmp359;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp359;
}
tmp359[i0] = (role == SERVER) ? __tmp_in_tmp359 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp360 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp360 at (10007,1-10007,48) */
uint64_t __tmp_in_tmp360;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)768; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp360;
}
tmp360[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp360 : 0;
}
}
}
}

vector < uint64_t > tmp361 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp361 at (10010,1-10010,37) */
uint64_t __tmp_in_tmp361;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp361;
}
tmp361[i0] = (role == SERVER) ? __tmp_in_tmp361 : 0;
}

vector < uint64_t > tmp362 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp362 at (10013,1-10013,37) */
uint64_t __tmp_in_tmp362;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp362;
}
tmp362[i0] = (role == SERVER) ? __tmp_in_tmp362 : 0;
}

vector < uint64_t > tmp363 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp363 at (10016,1-10016,37) */
uint64_t __tmp_in_tmp363;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp363;
}
tmp363[i0] = (role == SERVER) ? __tmp_in_tmp363 : 0;
}

vector < uint64_t > tmp364 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp364 at (10019,1-10019,37) */
uint64_t __tmp_in_tmp364;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp364;
}
tmp364[i0] = (role == SERVER) ? __tmp_in_tmp364 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp365 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp365 at (10022,1-10022,47) */
uint64_t __tmp_in_tmp365;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp365;
}
tmp365[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp365 : 0;
}
}
}
}

vector < uint64_t > tmp366 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp366 at (10025,1-10025,37) */
uint64_t __tmp_in_tmp366;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp366;
}
tmp366[i0] = (role == SERVER) ? __tmp_in_tmp366 : 0;
}

vector < uint64_t > tmp367 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp367 at (10028,1-10028,37) */
uint64_t __tmp_in_tmp367;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp367;
}
tmp367[i0] = (role == SERVER) ? __tmp_in_tmp367 : 0;
}

vector < uint64_t > tmp368 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp368 at (10031,1-10031,37) */
uint64_t __tmp_in_tmp368;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp368;
}
tmp368[i0] = (role == SERVER) ? __tmp_in_tmp368 : 0;
}

vector < uint64_t > tmp369 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp369 at (10034,1-10034,37) */
uint64_t __tmp_in_tmp369;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp369;
}
tmp369[i0] = (role == SERVER) ? __tmp_in_tmp369 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp370 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp370 at (10037,1-10037,48) */
uint64_t __tmp_in_tmp370;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)800; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp370;
}
tmp370[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp370 : 0;
}
}
}
}

vector < uint64_t > tmp371 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp371 at (10040,1-10040,37) */
uint64_t __tmp_in_tmp371;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp371;
}
tmp371[i0] = (role == SERVER) ? __tmp_in_tmp371 : 0;
}

vector < uint64_t > tmp372 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp372 at (10043,1-10043,37) */
uint64_t __tmp_in_tmp372;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp372;
}
tmp372[i0] = (role == SERVER) ? __tmp_in_tmp372 : 0;
}

vector < uint64_t > tmp373 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp373 at (10046,1-10046,37) */
uint64_t __tmp_in_tmp373;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp373;
}
tmp373[i0] = (role == SERVER) ? __tmp_in_tmp373 : 0;
}

vector < uint64_t > tmp374 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp374 at (10049,1-10049,37) */
uint64_t __tmp_in_tmp374;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp374;
}
tmp374[i0] = (role == SERVER) ? __tmp_in_tmp374 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp375 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp375 at (10052,1-10052,47) */
uint64_t __tmp_in_tmp375;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp375;
}
tmp375[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp375 : 0;
}
}
}
}

vector < uint64_t > tmp376 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp376 at (10055,1-10055,37) */
uint64_t __tmp_in_tmp376;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp376;
}
tmp376[i0] = (role == SERVER) ? __tmp_in_tmp376 : 0;
}

vector < uint64_t > tmp377 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp377 at (10058,1-10058,37) */
uint64_t __tmp_in_tmp377;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp377;
}
tmp377[i0] = (role == SERVER) ? __tmp_in_tmp377 : 0;
}

vector < uint64_t > tmp378 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp378 at (10061,1-10061,37) */
uint64_t __tmp_in_tmp378;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp378;
}
tmp378[i0] = (role == SERVER) ? __tmp_in_tmp378 : 0;
}

vector < uint64_t > tmp379 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp379 at (10064,1-10064,37) */
uint64_t __tmp_in_tmp379;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp379;
}
tmp379[i0] = (role == SERVER) ? __tmp_in_tmp379 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp380 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp380 at (10067,1-10067,48) */
uint64_t __tmp_in_tmp380;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)832; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp380;
}
tmp380[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp380 : 0;
}
}
}
}

vector < uint64_t > tmp381 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp381 at (10070,1-10070,37) */
uint64_t __tmp_in_tmp381;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp381;
}
tmp381[i0] = (role == SERVER) ? __tmp_in_tmp381 : 0;
}

vector < uint64_t > tmp382 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp382 at (10073,1-10073,37) */
uint64_t __tmp_in_tmp382;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp382;
}
tmp382[i0] = (role == SERVER) ? __tmp_in_tmp382 : 0;
}

vector < uint64_t > tmp383 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp383 at (10076,1-10076,37) */
uint64_t __tmp_in_tmp383;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp383;
}
tmp383[i0] = (role == SERVER) ? __tmp_in_tmp383 : 0;
}

vector < uint64_t > tmp384 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp384 at (10079,1-10079,37) */
uint64_t __tmp_in_tmp384;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp384;
}
tmp384[i0] = (role == SERVER) ? __tmp_in_tmp384 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp385 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp385 at (10082,1-10082,47) */
uint64_t __tmp_in_tmp385;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp385;
}
tmp385[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp385 : 0;
}
}
}
}

vector < uint64_t > tmp386 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp386 at (10085,1-10085,37) */
uint64_t __tmp_in_tmp386;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp386;
}
tmp386[i0] = (role == SERVER) ? __tmp_in_tmp386 : 0;
}

vector < uint64_t > tmp387 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp387 at (10088,1-10088,37) */
uint64_t __tmp_in_tmp387;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp387;
}
tmp387[i0] = (role == SERVER) ? __tmp_in_tmp387 : 0;
}

vector < uint64_t > tmp388 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp388 at (10091,1-10091,37) */
uint64_t __tmp_in_tmp388;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp388;
}
tmp388[i0] = (role == SERVER) ? __tmp_in_tmp388 : 0;
}

vector < uint64_t > tmp389 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp389 at (10094,1-10094,37) */
uint64_t __tmp_in_tmp389;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp389;
}
tmp389[i0] = (role == SERVER) ? __tmp_in_tmp389 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp390 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp390 at (10097,1-10097,48) */
uint64_t __tmp_in_tmp390;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)864; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp390;
}
tmp390[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp390 : 0;
}
}
}
}

vector < uint64_t > tmp391 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp391 at (10100,1-10100,37) */
uint64_t __tmp_in_tmp391;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp391;
}
tmp391[i0] = (role == SERVER) ? __tmp_in_tmp391 : 0;
}

vector < uint64_t > tmp392 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp392 at (10103,1-10103,37) */
uint64_t __tmp_in_tmp392;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp392;
}
tmp392[i0] = (role == SERVER) ? __tmp_in_tmp392 : 0;
}

vector < uint64_t > tmp393 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp393 at (10106,1-10106,37) */
uint64_t __tmp_in_tmp393;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp393;
}
tmp393[i0] = (role == SERVER) ? __tmp_in_tmp393 : 0;
}

vector < uint64_t > tmp394 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp394 at (10109,1-10109,37) */
uint64_t __tmp_in_tmp394;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp394;
}
tmp394[i0] = (role == SERVER) ? __tmp_in_tmp394 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp395 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp395 at (10112,1-10112,47) */
uint64_t __tmp_in_tmp395;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp395;
}
tmp395[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp395 : 0;
}
}
}
}

vector < uint64_t > tmp396 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp396 at (10115,1-10115,37) */
uint64_t __tmp_in_tmp396;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp396;
}
tmp396[i0] = (role == SERVER) ? __tmp_in_tmp396 : 0;
}

vector < uint64_t > tmp397 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp397 at (10118,1-10118,37) */
uint64_t __tmp_in_tmp397;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp397;
}
tmp397[i0] = (role == SERVER) ? __tmp_in_tmp397 : 0;
}

vector < uint64_t > tmp398 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp398 at (10121,1-10121,37) */
uint64_t __tmp_in_tmp398;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp398;
}
tmp398[i0] = (role == SERVER) ? __tmp_in_tmp398 : 0;
}

vector < uint64_t > tmp399 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp399 at (10124,1-10124,37) */
uint64_t __tmp_in_tmp399;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp399;
}
tmp399[i0] = (role == SERVER) ? __tmp_in_tmp399 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp400 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp400 at (10127,1-10127,48) */
uint64_t __tmp_in_tmp400;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)896; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp400;
}
tmp400[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp400 : 0;
}
}
}
}

vector < uint64_t > tmp401 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp401 at (10130,1-10130,37) */
uint64_t __tmp_in_tmp401;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp401;
}
tmp401[i0] = (role == SERVER) ? __tmp_in_tmp401 : 0;
}

vector < uint64_t > tmp402 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp402 at (10133,1-10133,37) */
uint64_t __tmp_in_tmp402;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp402;
}
tmp402[i0] = (role == SERVER) ? __tmp_in_tmp402 : 0;
}

vector < uint64_t > tmp403 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp403 at (10136,1-10136,37) */
uint64_t __tmp_in_tmp403;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp403;
}
tmp403[i0] = (role == SERVER) ? __tmp_in_tmp403 : 0;
}

vector < uint64_t > tmp404 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp404 at (10139,1-10139,37) */
uint64_t __tmp_in_tmp404;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp404;
}
tmp404[i0] = (role == SERVER) ? __tmp_in_tmp404 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp405 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp405 at (10142,1-10142,47) */
uint64_t __tmp_in_tmp405;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp405;
}
tmp405[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp405 : 0;
}
}
}
}

vector < uint64_t > tmp406 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp406 at (10145,1-10145,37) */
uint64_t __tmp_in_tmp406;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp406;
}
tmp406[i0] = (role == SERVER) ? __tmp_in_tmp406 : 0;
}

vector < uint64_t > tmp407 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp407 at (10148,1-10148,37) */
uint64_t __tmp_in_tmp407;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp407;
}
tmp407[i0] = (role == SERVER) ? __tmp_in_tmp407 : 0;
}

vector < uint64_t > tmp408 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp408 at (10151,1-10151,37) */
uint64_t __tmp_in_tmp408;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp408;
}
tmp408[i0] = (role == SERVER) ? __tmp_in_tmp408 : 0;
}

vector < uint64_t > tmp409 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp409 at (10154,1-10154,37) */
uint64_t __tmp_in_tmp409;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp409;
}
tmp409[i0] = (role == SERVER) ? __tmp_in_tmp409 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp410 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp410 at (10157,1-10157,48) */
uint64_t __tmp_in_tmp410;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)928; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp410;
}
tmp410[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp410 : 0;
}
}
}
}

vector < uint64_t > tmp411 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp411 at (10160,1-10160,37) */
uint64_t __tmp_in_tmp411;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp411;
}
tmp411[i0] = (role == SERVER) ? __tmp_in_tmp411 : 0;
}

vector < uint64_t > tmp412 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp412 at (10163,1-10163,37) */
uint64_t __tmp_in_tmp412;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp412;
}
tmp412[i0] = (role == SERVER) ? __tmp_in_tmp412 : 0;
}

vector < uint64_t > tmp413 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp413 at (10166,1-10166,37) */
uint64_t __tmp_in_tmp413;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp413;
}
tmp413[i0] = (role == SERVER) ? __tmp_in_tmp413 : 0;
}

vector < uint64_t > tmp414 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp414 at (10169,1-10169,37) */
uint64_t __tmp_in_tmp414;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp414;
}
tmp414[i0] = (role == SERVER) ? __tmp_in_tmp414 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp415 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp415 at (10172,1-10172,47) */
uint64_t __tmp_in_tmp415;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp415;
}
tmp415[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp415 : 0;
}
}
}
}

vector < uint64_t > tmp416 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp416 at (10175,1-10175,37) */
uint64_t __tmp_in_tmp416;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp416;
}
tmp416[i0] = (role == SERVER) ? __tmp_in_tmp416 : 0;
}

vector < uint64_t > tmp417 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp417 at (10178,1-10178,37) */
uint64_t __tmp_in_tmp417;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp417;
}
tmp417[i0] = (role == SERVER) ? __tmp_in_tmp417 : 0;
}

vector < uint64_t > tmp418 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp418 at (10181,1-10181,37) */
uint64_t __tmp_in_tmp418;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp418;
}
tmp418[i0] = (role == SERVER) ? __tmp_in_tmp418 : 0;
}

vector < uint64_t > tmp419 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp419 at (10184,1-10184,37) */
uint64_t __tmp_in_tmp419;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp419;
}
tmp419[i0] = (role == SERVER) ? __tmp_in_tmp419 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp420 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp420 at (10187,1-10187,48) */
uint64_t __tmp_in_tmp420;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)960; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp420;
}
tmp420[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp420 : 0;
}
}
}
}

vector < uint64_t > tmp421 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp421 at (10190,1-10190,37) */
uint64_t __tmp_in_tmp421;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp421;
}
tmp421[i0] = (role == SERVER) ? __tmp_in_tmp421 : 0;
}

vector < uint64_t > tmp422 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp422 at (10193,1-10193,37) */
uint64_t __tmp_in_tmp422;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp422;
}
tmp422[i0] = (role == SERVER) ? __tmp_in_tmp422 : 0;
}

vector < uint64_t > tmp423 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp423 at (10196,1-10196,37) */
uint64_t __tmp_in_tmp423;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp423;
}
tmp423[i0] = (role == SERVER) ? __tmp_in_tmp423 : 0;
}

vector < uint64_t > tmp424 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp424 at (10199,1-10199,37) */
uint64_t __tmp_in_tmp424;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp424;
}
tmp424[i0] = (role == SERVER) ? __tmp_in_tmp424 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp425 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp425 at (10202,1-10202,47) */
uint64_t __tmp_in_tmp425;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp425;
}
tmp425[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp425 : 0;
}
}
}
}

vector < uint64_t > tmp426 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp426 at (10205,1-10205,37) */
uint64_t __tmp_in_tmp426;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp426;
}
tmp426[i0] = (role == SERVER) ? __tmp_in_tmp426 : 0;
}

vector < uint64_t > tmp427 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp427 at (10208,1-10208,37) */
uint64_t __tmp_in_tmp427;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp427;
}
tmp427[i0] = (role == SERVER) ? __tmp_in_tmp427 : 0;
}

vector < uint64_t > tmp428 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp428 at (10211,1-10211,37) */
uint64_t __tmp_in_tmp428;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp428;
}
tmp428[i0] = (role == SERVER) ? __tmp_in_tmp428 : 0;
}

vector < uint64_t > tmp429 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp429 at (10214,1-10214,37) */
uint64_t __tmp_in_tmp429;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp429;
}
tmp429[i0] = (role == SERVER) ? __tmp_in_tmp429 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp430 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp430 at (10217,1-10217,48) */
uint64_t __tmp_in_tmp430;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)992; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp430;
}
tmp430[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp430 : 0;
}
}
}
}

vector < uint64_t > tmp431 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp431 at (10220,1-10220,37) */
uint64_t __tmp_in_tmp431;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp431;
}
tmp431[i0] = (role == SERVER) ? __tmp_in_tmp431 : 0;
}

vector < uint64_t > tmp432 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp432 at (10223,1-10223,37) */
uint64_t __tmp_in_tmp432;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp432;
}
tmp432[i0] = (role == SERVER) ? __tmp_in_tmp432 : 0;
}

vector < uint64_t > tmp433 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp433 at (10226,1-10226,37) */
uint64_t __tmp_in_tmp433;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp433;
}
tmp433[i0] = (role == SERVER) ? __tmp_in_tmp433 : 0;
}

vector < uint64_t > tmp434 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp434 at (10229,1-10229,37) */
uint64_t __tmp_in_tmp434;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp434;
}
tmp434[i0] = (role == SERVER) ? __tmp_in_tmp434 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp435 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp435 at (10232,1-10232,47) */
uint64_t __tmp_in_tmp435;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp435;
}
tmp435[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp435 : 0;
}
}
}
}

vector < uint64_t > tmp436 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp436 at (10235,1-10235,38) */
uint64_t __tmp_in_tmp436;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp436;
}
tmp436[i0] = (role == SERVER) ? __tmp_in_tmp436 : 0;
}

vector < uint64_t > tmp437 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp437 at (10238,1-10238,38) */
uint64_t __tmp_in_tmp437;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp437;
}
tmp437[i0] = (role == SERVER) ? __tmp_in_tmp437 : 0;
}

vector < uint64_t > tmp438 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp438 at (10241,1-10241,38) */
uint64_t __tmp_in_tmp438;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp438;
}
tmp438[i0] = (role == SERVER) ? __tmp_in_tmp438 : 0;
}

vector < uint64_t > tmp439 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp439 at (10244,1-10244,38) */
uint64_t __tmp_in_tmp439;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp439;
}
tmp439[i0] = (role == SERVER) ? __tmp_in_tmp439 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp440 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp440 at (10247,1-10247,49) */
uint64_t __tmp_in_tmp440;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp440;
}
tmp440[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp440 : 0;
}
}
}
}

vector < uint64_t > tmp441 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp441 at (10250,1-10250,37) */
uint64_t __tmp_in_tmp441;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp441;
}
tmp441[i0] = (role == SERVER) ? __tmp_in_tmp441 : 0;
}

vector < uint64_t > tmp442 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp442 at (10253,1-10253,37) */
uint64_t __tmp_in_tmp442;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp442;
}
tmp442[i0] = (role == SERVER) ? __tmp_in_tmp442 : 0;
}

vector < uint64_t > tmp443 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp443 at (10256,1-10256,37) */
uint64_t __tmp_in_tmp443;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp443;
}
tmp443[i0] = (role == SERVER) ? __tmp_in_tmp443 : 0;
}

vector < uint64_t > tmp444 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp444 at (10259,1-10259,37) */
uint64_t __tmp_in_tmp444;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp444;
}
tmp444[i0] = (role == SERVER) ? __tmp_in_tmp444 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp445 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp445 at (10262,1-10262,47) */
uint64_t __tmp_in_tmp445;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp445;
}
tmp445[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp445 : 0;
}
}
}
}

vector < uint64_t > tmp446 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp446 at (10265,1-10265,38) */
uint64_t __tmp_in_tmp446;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp446;
}
tmp446[i0] = (role == SERVER) ? __tmp_in_tmp446 : 0;
}

vector < uint64_t > tmp447 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp447 at (10268,1-10268,38) */
uint64_t __tmp_in_tmp447;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp447;
}
tmp447[i0] = (role == SERVER) ? __tmp_in_tmp447 : 0;
}

vector < uint64_t > tmp448 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp448 at (10271,1-10271,38) */
uint64_t __tmp_in_tmp448;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp448;
}
tmp448[i0] = (role == SERVER) ? __tmp_in_tmp448 : 0;
}

vector < uint64_t > tmp449 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp449 at (10274,1-10274,38) */
uint64_t __tmp_in_tmp449;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp449;
}
tmp449[i0] = (role == SERVER) ? __tmp_in_tmp449 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp450 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1056,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp450 at (10277,1-10277,49) */
uint64_t __tmp_in_tmp450;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1056; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp450;
}
tmp450[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp450 : 0;
}
}
}
}

vector < uint64_t > tmp451 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp451 at (10280,1-10280,37) */
uint64_t __tmp_in_tmp451;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp451;
}
tmp451[i0] = (role == SERVER) ? __tmp_in_tmp451 : 0;
}

vector < uint64_t > tmp452 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp452 at (10283,1-10283,37) */
uint64_t __tmp_in_tmp452;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp452;
}
tmp452[i0] = (role == SERVER) ? __tmp_in_tmp452 : 0;
}

vector < uint64_t > tmp453 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp453 at (10286,1-10286,37) */
uint64_t __tmp_in_tmp453;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp453;
}
tmp453[i0] = (role == SERVER) ? __tmp_in_tmp453 : 0;
}

vector < uint64_t > tmp454 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp454 at (10289,1-10289,37) */
uint64_t __tmp_in_tmp454;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp454;
}
tmp454[i0] = (role == SERVER) ? __tmp_in_tmp454 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp455 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp455 at (10292,1-10292,47) */
uint64_t __tmp_in_tmp455;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp455;
}
tmp455[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp455 : 0;
}
}
}
}

vector < uint64_t > tmp456 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp456 at (10295,1-10295,38) */
uint64_t __tmp_in_tmp456;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp456;
}
tmp456[i0] = (role == SERVER) ? __tmp_in_tmp456 : 0;
}

vector < uint64_t > tmp457 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp457 at (10298,1-10298,38) */
uint64_t __tmp_in_tmp457;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp457;
}
tmp457[i0] = (role == SERVER) ? __tmp_in_tmp457 : 0;
}

vector < uint64_t > tmp458 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp458 at (10301,1-10301,38) */
uint64_t __tmp_in_tmp458;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp458;
}
tmp458[i0] = (role == SERVER) ? __tmp_in_tmp458 : 0;
}

vector < uint64_t > tmp459 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp459 at (10304,1-10304,38) */
uint64_t __tmp_in_tmp459;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp459;
}
tmp459[i0] = (role == SERVER) ? __tmp_in_tmp459 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp460 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1088,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp460 at (10307,1-10307,49) */
uint64_t __tmp_in_tmp460;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1088; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp460;
}
tmp460[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp460 : 0;
}
}
}
}

vector < uint64_t > tmp461 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp461 at (10310,1-10310,37) */
uint64_t __tmp_in_tmp461;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp461;
}
tmp461[i0] = (role == SERVER) ? __tmp_in_tmp461 : 0;
}

vector < uint64_t > tmp462 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp462 at (10313,1-10313,37) */
uint64_t __tmp_in_tmp462;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp462;
}
tmp462[i0] = (role == SERVER) ? __tmp_in_tmp462 : 0;
}

vector < uint64_t > tmp463 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp463 at (10316,1-10316,37) */
uint64_t __tmp_in_tmp463;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp463;
}
tmp463[i0] = (role == SERVER) ? __tmp_in_tmp463 : 0;
}

vector < uint64_t > tmp464 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp464 at (10319,1-10319,37) */
uint64_t __tmp_in_tmp464;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp464;
}
tmp464[i0] = (role == SERVER) ? __tmp_in_tmp464 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp465 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp465 at (10322,1-10322,47) */
uint64_t __tmp_in_tmp465;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp465;
}
tmp465[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp465 : 0;
}
}
}
}

vector < uint64_t > tmp466 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp466 at (10325,1-10325,38) */
uint64_t __tmp_in_tmp466;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp466;
}
tmp466[i0] = (role == SERVER) ? __tmp_in_tmp466 : 0;
}

vector < uint64_t > tmp467 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp467 at (10328,1-10328,38) */
uint64_t __tmp_in_tmp467;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp467;
}
tmp467[i0] = (role == SERVER) ? __tmp_in_tmp467 : 0;
}

vector < uint64_t > tmp468 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp468 at (10331,1-10331,38) */
uint64_t __tmp_in_tmp468;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp468;
}
tmp468[i0] = (role == SERVER) ? __tmp_in_tmp468 : 0;
}

vector < uint64_t > tmp469 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp469 at (10334,1-10334,38) */
uint64_t __tmp_in_tmp469;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp469;
}
tmp469[i0] = (role == SERVER) ? __tmp_in_tmp469 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp470 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1120,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp470 at (10337,1-10337,49) */
uint64_t __tmp_in_tmp470;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1120; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp470;
}
tmp470[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp470 : 0;
}
}
}
}

vector < uint64_t > tmp471 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp471 at (10340,1-10340,37) */
uint64_t __tmp_in_tmp471;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp471;
}
tmp471[i0] = (role == SERVER) ? __tmp_in_tmp471 : 0;
}

vector < uint64_t > tmp472 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp472 at (10343,1-10343,37) */
uint64_t __tmp_in_tmp472;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp472;
}
tmp472[i0] = (role == SERVER) ? __tmp_in_tmp472 : 0;
}

vector < uint64_t > tmp473 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp473 at (10346,1-10346,37) */
uint64_t __tmp_in_tmp473;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp473;
}
tmp473[i0] = (role == SERVER) ? __tmp_in_tmp473 : 0;
}

vector < uint64_t > tmp474 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp474 at (10349,1-10349,37) */
uint64_t __tmp_in_tmp474;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp474;
}
tmp474[i0] = (role == SERVER) ? __tmp_in_tmp474 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp475 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp475 at (10352,1-10352,47) */
uint64_t __tmp_in_tmp475;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp475;
}
tmp475[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp475 : 0;
}
}
}
}

vector < uint64_t > tmp476 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp476 at (10355,1-10355,38) */
uint64_t __tmp_in_tmp476;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp476;
}
tmp476[i0] = (role == SERVER) ? __tmp_in_tmp476 : 0;
}

vector < uint64_t > tmp477 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp477 at (10358,1-10358,38) */
uint64_t __tmp_in_tmp477;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp477;
}
tmp477[i0] = (role == SERVER) ? __tmp_in_tmp477 : 0;
}

vector < uint64_t > tmp478 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp478 at (10361,1-10361,38) */
uint64_t __tmp_in_tmp478;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp478;
}
tmp478[i0] = (role == SERVER) ? __tmp_in_tmp478 : 0;
}

vector < uint64_t > tmp479 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp479 at (10364,1-10364,38) */
uint64_t __tmp_in_tmp479;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp479;
}
tmp479[i0] = (role == SERVER) ? __tmp_in_tmp479 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp480 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp480 at (10367,1-10367,49) */
uint64_t __tmp_in_tmp480;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1152; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp480;
}
tmp480[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp480 : 0;
}
}
}
}

vector < uint64_t > tmp481 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp481 at (10370,1-10370,37) */
uint64_t __tmp_in_tmp481;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp481;
}
tmp481[i0] = (role == SERVER) ? __tmp_in_tmp481 : 0;
}

vector < uint64_t > tmp482 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp482 at (10373,1-10373,37) */
uint64_t __tmp_in_tmp482;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp482;
}
tmp482[i0] = (role == SERVER) ? __tmp_in_tmp482 : 0;
}

vector < uint64_t > tmp483 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp483 at (10376,1-10376,37) */
uint64_t __tmp_in_tmp483;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp483;
}
tmp483[i0] = (role == SERVER) ? __tmp_in_tmp483 : 0;
}

vector < uint64_t > tmp484 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp484 at (10379,1-10379,37) */
uint64_t __tmp_in_tmp484;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp484;
}
tmp484[i0] = (role == SERVER) ? __tmp_in_tmp484 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp485 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp485 at (10382,1-10382,47) */
uint64_t __tmp_in_tmp485;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp485;
}
tmp485[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp485 : 0;
}
}
}
}

vector < uint64_t > tmp486 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp486 at (10385,1-10385,38) */
uint64_t __tmp_in_tmp486;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp486;
}
tmp486[i0] = (role == SERVER) ? __tmp_in_tmp486 : 0;
}

vector < uint64_t > tmp487 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp487 at (10388,1-10388,38) */
uint64_t __tmp_in_tmp487;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp487;
}
tmp487[i0] = (role == SERVER) ? __tmp_in_tmp487 : 0;
}

vector < uint64_t > tmp488 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp488 at (10391,1-10391,38) */
uint64_t __tmp_in_tmp488;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp488;
}
tmp488[i0] = (role == SERVER) ? __tmp_in_tmp488 : 0;
}

vector < uint64_t > tmp489 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp489 at (10394,1-10394,38) */
uint64_t __tmp_in_tmp489;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp489;
}
tmp489[i0] = (role == SERVER) ? __tmp_in_tmp489 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp490 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1184,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp490 at (10397,1-10397,49) */
uint64_t __tmp_in_tmp490;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1184; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp490;
}
tmp490[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp490 : 0;
}
}
}
}

vector < uint64_t > tmp491 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp491 at (10400,1-10400,37) */
uint64_t __tmp_in_tmp491;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp491;
}
tmp491[i0] = (role == SERVER) ? __tmp_in_tmp491 : 0;
}

vector < uint64_t > tmp492 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp492 at (10403,1-10403,37) */
uint64_t __tmp_in_tmp492;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp492;
}
tmp492[i0] = (role == SERVER) ? __tmp_in_tmp492 : 0;
}

vector < uint64_t > tmp493 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp493 at (10406,1-10406,37) */
uint64_t __tmp_in_tmp493;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp493;
}
tmp493[i0] = (role == SERVER) ? __tmp_in_tmp493 : 0;
}

vector < uint64_t > tmp494 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp494 at (10409,1-10409,37) */
uint64_t __tmp_in_tmp494;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp494;
}
tmp494[i0] = (role == SERVER) ? __tmp_in_tmp494 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp495 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp495 at (10412,1-10412,47) */
uint64_t __tmp_in_tmp495;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp495;
}
tmp495[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp495 : 0;
}
}
}
}

vector < uint64_t > tmp496 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp496 at (10415,1-10415,38) */
uint64_t __tmp_in_tmp496;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp496;
}
tmp496[i0] = (role == SERVER) ? __tmp_in_tmp496 : 0;
}

vector < uint64_t > tmp497 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp497 at (10418,1-10418,38) */
uint64_t __tmp_in_tmp497;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp497;
}
tmp497[i0] = (role == SERVER) ? __tmp_in_tmp497 : 0;
}

vector < uint64_t > tmp498 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp498 at (10421,1-10421,38) */
uint64_t __tmp_in_tmp498;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp498;
}
tmp498[i0] = (role == SERVER) ? __tmp_in_tmp498 : 0;
}

vector < uint64_t > tmp499 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp499 at (10424,1-10424,38) */
uint64_t __tmp_in_tmp499;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp499;
}
tmp499[i0] = (role == SERVER) ? __tmp_in_tmp499 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp500 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1216,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp500 at (10427,1-10427,49) */
uint64_t __tmp_in_tmp500;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1216; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp500;
}
tmp500[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp500 : 0;
}
}
}
}

vector < uint64_t > tmp501 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp501 at (10430,1-10430,37) */
uint64_t __tmp_in_tmp501;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp501;
}
tmp501[i0] = (role == SERVER) ? __tmp_in_tmp501 : 0;
}

vector < uint64_t > tmp502 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp502 at (10433,1-10433,37) */
uint64_t __tmp_in_tmp502;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp502;
}
tmp502[i0] = (role == SERVER) ? __tmp_in_tmp502 : 0;
}

vector < uint64_t > tmp503 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp503 at (10436,1-10436,37) */
uint64_t __tmp_in_tmp503;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp503;
}
tmp503[i0] = (role == SERVER) ? __tmp_in_tmp503 : 0;
}

vector < uint64_t > tmp504 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp504 at (10439,1-10439,37) */
uint64_t __tmp_in_tmp504;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp504;
}
tmp504[i0] = (role == SERVER) ? __tmp_in_tmp504 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp505 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp505 at (10442,1-10442,47) */
uint64_t __tmp_in_tmp505;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp505;
}
tmp505[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp505 : 0;
}
}
}
}

vector < uint64_t > tmp506 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp506 at (10445,1-10445,38) */
uint64_t __tmp_in_tmp506;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp506;
}
tmp506[i0] = (role == SERVER) ? __tmp_in_tmp506 : 0;
}

vector < uint64_t > tmp507 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp507 at (10448,1-10448,38) */
uint64_t __tmp_in_tmp507;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp507;
}
tmp507[i0] = (role == SERVER) ? __tmp_in_tmp507 : 0;
}

vector < uint64_t > tmp508 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp508 at (10451,1-10451,38) */
uint64_t __tmp_in_tmp508;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp508;
}
tmp508[i0] = (role == SERVER) ? __tmp_in_tmp508 : 0;
}

vector < uint64_t > tmp509 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp509 at (10454,1-10454,38) */
uint64_t __tmp_in_tmp509;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp509;
}
tmp509[i0] = (role == SERVER) ? __tmp_in_tmp509 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp510 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1248,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp510 at (10457,1-10457,49) */
uint64_t __tmp_in_tmp510;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1248; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp510;
}
tmp510[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp510 : 0;
}
}
}
}

vector < uint64_t > tmp511 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp511 at (10460,1-10460,37) */
uint64_t __tmp_in_tmp511;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp511;
}
tmp511[i0] = (role == SERVER) ? __tmp_in_tmp511 : 0;
}

vector < uint64_t > tmp512 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp512 at (10463,1-10463,37) */
uint64_t __tmp_in_tmp512;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp512;
}
tmp512[i0] = (role == SERVER) ? __tmp_in_tmp512 : 0;
}

vector < uint64_t > tmp513 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp513 at (10466,1-10466,37) */
uint64_t __tmp_in_tmp513;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp513;
}
tmp513[i0] = (role == SERVER) ? __tmp_in_tmp513 : 0;
}

vector < uint64_t > tmp514 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp514 at (10469,1-10469,37) */
uint64_t __tmp_in_tmp514;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp514;
}
tmp514[i0] = (role == SERVER) ? __tmp_in_tmp514 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp515 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp515 at (10472,1-10472,47) */
uint64_t __tmp_in_tmp515;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp515;
}
tmp515[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp515 : 0;
}
}
}
}

vector < uint64_t > tmp516 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp516 at (10475,1-10475,38) */
uint64_t __tmp_in_tmp516;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp516;
}
tmp516[i0] = (role == SERVER) ? __tmp_in_tmp516 : 0;
}

vector < uint64_t > tmp517 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp517 at (10478,1-10478,38) */
uint64_t __tmp_in_tmp517;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp517;
}
tmp517[i0] = (role == SERVER) ? __tmp_in_tmp517 : 0;
}

vector < uint64_t > tmp518 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp518 at (10481,1-10481,38) */
uint64_t __tmp_in_tmp518;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp518;
}
tmp518[i0] = (role == SERVER) ? __tmp_in_tmp518 : 0;
}

vector < uint64_t > tmp519 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp519 at (10484,1-10484,38) */
uint64_t __tmp_in_tmp519;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp519;
}
tmp519[i0] = (role == SERVER) ? __tmp_in_tmp519 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp520 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1280,  (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp520 at (10487,1-10487,49) */
uint64_t __tmp_in_tmp520;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1280; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)640; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp520;
}
tmp520[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp520 : 0;
}
}
}
}

vector < uint64_t > tmp521 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp521 at (10490,1-10490,37) */
uint64_t __tmp_in_tmp521;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp521;
}
tmp521[i0] = (role == SERVER) ? __tmp_in_tmp521 : 0;
}

vector < uint64_t > tmp522 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp522 at (10493,1-10493,37) */
uint64_t __tmp_in_tmp522;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp522;
}
tmp522[i0] = (role == SERVER) ? __tmp_in_tmp522 : 0;
}

vector < uint64_t > tmp523 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp523 at (10496,1-10496,37) */
uint64_t __tmp_in_tmp523;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp523;
}
tmp523[i0] = (role == SERVER) ? __tmp_in_tmp523 : 0;
}

vector < uint64_t > tmp524 = make_vector<uint64_t>( (int32_t)640);
/* Variable to read the clear value corresponding to the input variable tmp524 at (10499,1-10499,37) */
uint64_t __tmp_in_tmp524;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)640; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp524;
}
tmp524[i0] = (role == SERVER) ? __tmp_in_tmp524 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp525 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp525 at (10502,1-10502,48) */
uint64_t __tmp_in_tmp525;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)640; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp525;
}
tmp525[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp525 : 0;
}
}
}
}

vector < uint64_t > tmp526 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp526 at (10505,1-10505,37) */
uint64_t __tmp_in_tmp526;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp526;
}
tmp526[i0] = (role == SERVER) ? __tmp_in_tmp526 : 0;
}

vector < uint64_t > tmp527 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp527 at (10508,1-10508,37) */
uint64_t __tmp_in_tmp527;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp527;
}
tmp527[i0] = (role == SERVER) ? __tmp_in_tmp527 : 0;
}

vector < uint64_t > tmp528 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp528 at (10511,1-10511,37) */
uint64_t __tmp_in_tmp528;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp528;
}
tmp528[i0] = (role == SERVER) ? __tmp_in_tmp528 : 0;
}

vector < uint64_t > tmp529 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp529 at (10514,1-10514,37) */
uint64_t __tmp_in_tmp529;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp529;
}
tmp529[i0] = (role == SERVER) ? __tmp_in_tmp529 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp530 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp530 at (10517,1-10517,47) */
uint64_t __tmp_in_tmp530;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp530;
}
tmp530[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp530 : 0;
}
}
}
}

vector < uint64_t > tmp531 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp531 at (10520,1-10520,37) */
uint64_t __tmp_in_tmp531;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp531;
}
tmp531[i0] = (role == SERVER) ? __tmp_in_tmp531 : 0;
}

vector < uint64_t > tmp532 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp532 at (10523,1-10523,37) */
uint64_t __tmp_in_tmp532;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp532;
}
tmp532[i0] = (role == SERVER) ? __tmp_in_tmp532 : 0;
}

vector < uint64_t > tmp533 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp533 at (10526,1-10526,37) */
uint64_t __tmp_in_tmp533;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp533;
}
tmp533[i0] = (role == SERVER) ? __tmp_in_tmp533 : 0;
}

vector < uint64_t > tmp534 = make_vector<uint64_t>( (int32_t)672);
/* Variable to read the clear value corresponding to the input variable tmp534 at (10529,1-10529,37) */
uint64_t __tmp_in_tmp534;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)672; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp534;
}
tmp534[i0] = (role == SERVER) ? __tmp_in_tmp534 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp535 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp535 at (10532,1-10532,48) */
uint64_t __tmp_in_tmp535;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)672; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp535;
}
tmp535[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp535 : 0;
}
}
}
}

vector < uint64_t > tmp536 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp536 at (10535,1-10535,37) */
uint64_t __tmp_in_tmp536;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp536;
}
tmp536[i0] = (role == SERVER) ? __tmp_in_tmp536 : 0;
}

vector < uint64_t > tmp537 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp537 at (10538,1-10538,37) */
uint64_t __tmp_in_tmp537;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp537;
}
tmp537[i0] = (role == SERVER) ? __tmp_in_tmp537 : 0;
}

vector < uint64_t > tmp538 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp538 at (10541,1-10541,37) */
uint64_t __tmp_in_tmp538;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp538;
}
tmp538[i0] = (role == SERVER) ? __tmp_in_tmp538 : 0;
}

vector < uint64_t > tmp539 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp539 at (10544,1-10544,37) */
uint64_t __tmp_in_tmp539;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp539;
}
tmp539[i0] = (role == SERVER) ? __tmp_in_tmp539 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp540 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp540 at (10547,1-10547,47) */
uint64_t __tmp_in_tmp540;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp540;
}
tmp540[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp540 : 0;
}
}
}
}

vector < uint64_t > tmp541 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp541 at (10550,1-10550,37) */
uint64_t __tmp_in_tmp541;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp541;
}
tmp541[i0] = (role == SERVER) ? __tmp_in_tmp541 : 0;
}

vector < uint64_t > tmp542 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp542 at (10553,1-10553,37) */
uint64_t __tmp_in_tmp542;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp542;
}
tmp542[i0] = (role == SERVER) ? __tmp_in_tmp542 : 0;
}

vector < uint64_t > tmp543 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp543 at (10556,1-10556,37) */
uint64_t __tmp_in_tmp543;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp543;
}
tmp543[i0] = (role == SERVER) ? __tmp_in_tmp543 : 0;
}

vector < uint64_t > tmp544 = make_vector<uint64_t>( (int32_t)704);
/* Variable to read the clear value corresponding to the input variable tmp544 at (10559,1-10559,37) */
uint64_t __tmp_in_tmp544;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)704; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp544;
}
tmp544[i0] = (role == SERVER) ? __tmp_in_tmp544 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp545 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp545 at (10562,1-10562,48) */
uint64_t __tmp_in_tmp545;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)704; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp545;
}
tmp545[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp545 : 0;
}
}
}
}

vector < uint64_t > tmp546 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp546 at (10565,1-10565,37) */
uint64_t __tmp_in_tmp546;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp546;
}
tmp546[i0] = (role == SERVER) ? __tmp_in_tmp546 : 0;
}

vector < uint64_t > tmp547 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp547 at (10568,1-10568,37) */
uint64_t __tmp_in_tmp547;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp547;
}
tmp547[i0] = (role == SERVER) ? __tmp_in_tmp547 : 0;
}

vector < uint64_t > tmp548 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp548 at (10571,1-10571,37) */
uint64_t __tmp_in_tmp548;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp548;
}
tmp548[i0] = (role == SERVER) ? __tmp_in_tmp548 : 0;
}

vector < uint64_t > tmp549 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp549 at (10574,1-10574,37) */
uint64_t __tmp_in_tmp549;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp549;
}
tmp549[i0] = (role == SERVER) ? __tmp_in_tmp549 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp550 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp550 at (10577,1-10577,47) */
uint64_t __tmp_in_tmp550;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp550;
}
tmp550[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp550 : 0;
}
}
}
}

vector < uint64_t > tmp551 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp551 at (10580,1-10580,37) */
uint64_t __tmp_in_tmp551;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp551;
}
tmp551[i0] = (role == SERVER) ? __tmp_in_tmp551 : 0;
}

vector < uint64_t > tmp552 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp552 at (10583,1-10583,37) */
uint64_t __tmp_in_tmp552;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp552;
}
tmp552[i0] = (role == SERVER) ? __tmp_in_tmp552 : 0;
}

vector < uint64_t > tmp553 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp553 at (10586,1-10586,37) */
uint64_t __tmp_in_tmp553;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp553;
}
tmp553[i0] = (role == SERVER) ? __tmp_in_tmp553 : 0;
}

vector < uint64_t > tmp554 = make_vector<uint64_t>( (int32_t)736);
/* Variable to read the clear value corresponding to the input variable tmp554 at (10589,1-10589,37) */
uint64_t __tmp_in_tmp554;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)736; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp554;
}
tmp554[i0] = (role == SERVER) ? __tmp_in_tmp554 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp555 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp555 at (10592,1-10592,48) */
uint64_t __tmp_in_tmp555;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)736; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp555;
}
tmp555[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp555 : 0;
}
}
}
}

vector < uint64_t > tmp556 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp556 at (10595,1-10595,37) */
uint64_t __tmp_in_tmp556;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp556;
}
tmp556[i0] = (role == SERVER) ? __tmp_in_tmp556 : 0;
}

vector < uint64_t > tmp557 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp557 at (10598,1-10598,37) */
uint64_t __tmp_in_tmp557;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp557;
}
tmp557[i0] = (role == SERVER) ? __tmp_in_tmp557 : 0;
}

vector < uint64_t > tmp558 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp558 at (10601,1-10601,37) */
uint64_t __tmp_in_tmp558;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp558;
}
tmp558[i0] = (role == SERVER) ? __tmp_in_tmp558 : 0;
}

vector < uint64_t > tmp559 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp559 at (10604,1-10604,37) */
uint64_t __tmp_in_tmp559;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp559;
}
tmp559[i0] = (role == SERVER) ? __tmp_in_tmp559 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp560 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp560 at (10607,1-10607,47) */
uint64_t __tmp_in_tmp560;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp560;
}
tmp560[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp560 : 0;
}
}
}
}

vector < uint64_t > tmp561 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp561 at (10610,1-10610,37) */
uint64_t __tmp_in_tmp561;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp561;
}
tmp561[i0] = (role == SERVER) ? __tmp_in_tmp561 : 0;
}

vector < uint64_t > tmp562 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp562 at (10613,1-10613,37) */
uint64_t __tmp_in_tmp562;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp562;
}
tmp562[i0] = (role == SERVER) ? __tmp_in_tmp562 : 0;
}

vector < uint64_t > tmp563 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp563 at (10616,1-10616,37) */
uint64_t __tmp_in_tmp563;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp563;
}
tmp563[i0] = (role == SERVER) ? __tmp_in_tmp563 : 0;
}

vector < uint64_t > tmp564 = make_vector<uint64_t>( (int32_t)768);
/* Variable to read the clear value corresponding to the input variable tmp564 at (10619,1-10619,37) */
uint64_t __tmp_in_tmp564;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)768; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp564;
}
tmp564[i0] = (role == SERVER) ? __tmp_in_tmp564 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp565 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp565 at (10622,1-10622,48) */
uint64_t __tmp_in_tmp565;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)768; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp565;
}
tmp565[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp565 : 0;
}
}
}
}

vector < uint64_t > tmp566 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp566 at (10625,1-10625,37) */
uint64_t __tmp_in_tmp566;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp566;
}
tmp566[i0] = (role == SERVER) ? __tmp_in_tmp566 : 0;
}

vector < uint64_t > tmp567 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp567 at (10628,1-10628,37) */
uint64_t __tmp_in_tmp567;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp567;
}
tmp567[i0] = (role == SERVER) ? __tmp_in_tmp567 : 0;
}

vector < uint64_t > tmp568 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp568 at (10631,1-10631,37) */
uint64_t __tmp_in_tmp568;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp568;
}
tmp568[i0] = (role == SERVER) ? __tmp_in_tmp568 : 0;
}

vector < uint64_t > tmp569 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp569 at (10634,1-10634,37) */
uint64_t __tmp_in_tmp569;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp569;
}
tmp569[i0] = (role == SERVER) ? __tmp_in_tmp569 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp570 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp570 at (10637,1-10637,47) */
uint64_t __tmp_in_tmp570;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp570;
}
tmp570[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp570 : 0;
}
}
}
}

vector < uint64_t > tmp571 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp571 at (10640,1-10640,37) */
uint64_t __tmp_in_tmp571;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp571;
}
tmp571[i0] = (role == SERVER) ? __tmp_in_tmp571 : 0;
}

vector < uint64_t > tmp572 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp572 at (10643,1-10643,37) */
uint64_t __tmp_in_tmp572;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp572;
}
tmp572[i0] = (role == SERVER) ? __tmp_in_tmp572 : 0;
}

vector < uint64_t > tmp573 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp573 at (10646,1-10646,37) */
uint64_t __tmp_in_tmp573;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp573;
}
tmp573[i0] = (role == SERVER) ? __tmp_in_tmp573 : 0;
}

vector < uint64_t > tmp574 = make_vector<uint64_t>( (int32_t)800);
/* Variable to read the clear value corresponding to the input variable tmp574 at (10649,1-10649,37) */
uint64_t __tmp_in_tmp574;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)800; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp574;
}
tmp574[i0] = (role == SERVER) ? __tmp_in_tmp574 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp575 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp575 at (10652,1-10652,48) */
uint64_t __tmp_in_tmp575;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)800; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp575;
}
tmp575[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp575 : 0;
}
}
}
}

vector < uint64_t > tmp576 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp576 at (10655,1-10655,37) */
uint64_t __tmp_in_tmp576;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp576;
}
tmp576[i0] = (role == SERVER) ? __tmp_in_tmp576 : 0;
}

vector < uint64_t > tmp577 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp577 at (10658,1-10658,37) */
uint64_t __tmp_in_tmp577;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp577;
}
tmp577[i0] = (role == SERVER) ? __tmp_in_tmp577 : 0;
}

vector < uint64_t > tmp578 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp578 at (10661,1-10661,37) */
uint64_t __tmp_in_tmp578;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp578;
}
tmp578[i0] = (role == SERVER) ? __tmp_in_tmp578 : 0;
}

vector < uint64_t > tmp579 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp579 at (10664,1-10664,37) */
uint64_t __tmp_in_tmp579;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp579;
}
tmp579[i0] = (role == SERVER) ? __tmp_in_tmp579 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp580 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp580 at (10667,1-10667,47) */
uint64_t __tmp_in_tmp580;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp580;
}
tmp580[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp580 : 0;
}
}
}
}

vector < uint64_t > tmp581 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp581 at (10670,1-10670,37) */
uint64_t __tmp_in_tmp581;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp581;
}
tmp581[i0] = (role == SERVER) ? __tmp_in_tmp581 : 0;
}

vector < uint64_t > tmp582 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp582 at (10673,1-10673,37) */
uint64_t __tmp_in_tmp582;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp582;
}
tmp582[i0] = (role == SERVER) ? __tmp_in_tmp582 : 0;
}

vector < uint64_t > tmp583 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp583 at (10676,1-10676,37) */
uint64_t __tmp_in_tmp583;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp583;
}
tmp583[i0] = (role == SERVER) ? __tmp_in_tmp583 : 0;
}

vector < uint64_t > tmp584 = make_vector<uint64_t>( (int32_t)832);
/* Variable to read the clear value corresponding to the input variable tmp584 at (10679,1-10679,37) */
uint64_t __tmp_in_tmp584;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)832; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp584;
}
tmp584[i0] = (role == SERVER) ? __tmp_in_tmp584 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp585 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp585 at (10682,1-10682,48) */
uint64_t __tmp_in_tmp585;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)832; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp585;
}
tmp585[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp585 : 0;
}
}
}
}

vector < uint64_t > tmp586 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp586 at (10685,1-10685,37) */
uint64_t __tmp_in_tmp586;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp586;
}
tmp586[i0] = (role == SERVER) ? __tmp_in_tmp586 : 0;
}

vector < uint64_t > tmp587 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp587 at (10688,1-10688,37) */
uint64_t __tmp_in_tmp587;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp587;
}
tmp587[i0] = (role == SERVER) ? __tmp_in_tmp587 : 0;
}

vector < uint64_t > tmp588 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp588 at (10691,1-10691,37) */
uint64_t __tmp_in_tmp588;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp588;
}
tmp588[i0] = (role == SERVER) ? __tmp_in_tmp588 : 0;
}

vector < uint64_t > tmp589 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp589 at (10694,1-10694,37) */
uint64_t __tmp_in_tmp589;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp589;
}
tmp589[i0] = (role == SERVER) ? __tmp_in_tmp589 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp590 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp590 at (10697,1-10697,47) */
uint64_t __tmp_in_tmp590;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp590;
}
tmp590[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp590 : 0;
}
}
}
}

vector < uint64_t > tmp591 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp591 at (10700,1-10700,37) */
uint64_t __tmp_in_tmp591;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp591;
}
tmp591[i0] = (role == SERVER) ? __tmp_in_tmp591 : 0;
}

vector < uint64_t > tmp592 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp592 at (10703,1-10703,37) */
uint64_t __tmp_in_tmp592;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp592;
}
tmp592[i0] = (role == SERVER) ? __tmp_in_tmp592 : 0;
}

vector < uint64_t > tmp593 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp593 at (10706,1-10706,37) */
uint64_t __tmp_in_tmp593;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp593;
}
tmp593[i0] = (role == SERVER) ? __tmp_in_tmp593 : 0;
}

vector < uint64_t > tmp594 = make_vector<uint64_t>( (int32_t)864);
/* Variable to read the clear value corresponding to the input variable tmp594 at (10709,1-10709,37) */
uint64_t __tmp_in_tmp594;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)864; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp594;
}
tmp594[i0] = (role == SERVER) ? __tmp_in_tmp594 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp595 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp595 at (10712,1-10712,48) */
uint64_t __tmp_in_tmp595;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)864; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp595;
}
tmp595[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp595 : 0;
}
}
}
}

vector < uint64_t > tmp596 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp596 at (10715,1-10715,37) */
uint64_t __tmp_in_tmp596;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp596;
}
tmp596[i0] = (role == SERVER) ? __tmp_in_tmp596 : 0;
}

vector < uint64_t > tmp597 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp597 at (10718,1-10718,37) */
uint64_t __tmp_in_tmp597;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp597;
}
tmp597[i0] = (role == SERVER) ? __tmp_in_tmp597 : 0;
}

vector < uint64_t > tmp598 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp598 at (10721,1-10721,37) */
uint64_t __tmp_in_tmp598;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp598;
}
tmp598[i0] = (role == SERVER) ? __tmp_in_tmp598 : 0;
}

vector < uint64_t > tmp599 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp599 at (10724,1-10724,37) */
uint64_t __tmp_in_tmp599;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp599;
}
tmp599[i0] = (role == SERVER) ? __tmp_in_tmp599 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp600 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp600 at (10727,1-10727,47) */
uint64_t __tmp_in_tmp600;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp600;
}
tmp600[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp600 : 0;
}
}
}
}

vector < uint64_t > tmp601 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp601 at (10730,1-10730,37) */
uint64_t __tmp_in_tmp601;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp601;
}
tmp601[i0] = (role == SERVER) ? __tmp_in_tmp601 : 0;
}

vector < uint64_t > tmp602 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp602 at (10733,1-10733,37) */
uint64_t __tmp_in_tmp602;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp602;
}
tmp602[i0] = (role == SERVER) ? __tmp_in_tmp602 : 0;
}

vector < uint64_t > tmp603 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp603 at (10736,1-10736,37) */
uint64_t __tmp_in_tmp603;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp603;
}
tmp603[i0] = (role == SERVER) ? __tmp_in_tmp603 : 0;
}

vector < uint64_t > tmp604 = make_vector<uint64_t>( (int32_t)896);
/* Variable to read the clear value corresponding to the input variable tmp604 at (10739,1-10739,37) */
uint64_t __tmp_in_tmp604;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)896; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp604;
}
tmp604[i0] = (role == SERVER) ? __tmp_in_tmp604 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp605 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp605 at (10742,1-10742,48) */
uint64_t __tmp_in_tmp605;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)896; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp605;
}
tmp605[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp605 : 0;
}
}
}
}

vector < uint64_t > tmp606 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp606 at (10745,1-10745,37) */
uint64_t __tmp_in_tmp606;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp606;
}
tmp606[i0] = (role == SERVER) ? __tmp_in_tmp606 : 0;
}

vector < uint64_t > tmp607 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp607 at (10748,1-10748,37) */
uint64_t __tmp_in_tmp607;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp607;
}
tmp607[i0] = (role == SERVER) ? __tmp_in_tmp607 : 0;
}

vector < uint64_t > tmp608 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp608 at (10751,1-10751,37) */
uint64_t __tmp_in_tmp608;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp608;
}
tmp608[i0] = (role == SERVER) ? __tmp_in_tmp608 : 0;
}

vector < uint64_t > tmp609 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp609 at (10754,1-10754,37) */
uint64_t __tmp_in_tmp609;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp609;
}
tmp609[i0] = (role == SERVER) ? __tmp_in_tmp609 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp610 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp610 at (10757,1-10757,47) */
uint64_t __tmp_in_tmp610;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp610;
}
tmp610[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp610 : 0;
}
}
}
}

vector < uint64_t > tmp611 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp611 at (10760,1-10760,37) */
uint64_t __tmp_in_tmp611;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp611;
}
tmp611[i0] = (role == SERVER) ? __tmp_in_tmp611 : 0;
}

vector < uint64_t > tmp612 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp612 at (10763,1-10763,37) */
uint64_t __tmp_in_tmp612;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp612;
}
tmp612[i0] = (role == SERVER) ? __tmp_in_tmp612 : 0;
}

vector < uint64_t > tmp613 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp613 at (10766,1-10766,37) */
uint64_t __tmp_in_tmp613;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp613;
}
tmp613[i0] = (role == SERVER) ? __tmp_in_tmp613 : 0;
}

vector < uint64_t > tmp614 = make_vector<uint64_t>( (int32_t)928);
/* Variable to read the clear value corresponding to the input variable tmp614 at (10769,1-10769,37) */
uint64_t __tmp_in_tmp614;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)928; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp614;
}
tmp614[i0] = (role == SERVER) ? __tmp_in_tmp614 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp615 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp615 at (10772,1-10772,48) */
uint64_t __tmp_in_tmp615;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)928; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp615;
}
tmp615[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp615 : 0;
}
}
}
}

vector < uint64_t > tmp616 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp616 at (10775,1-10775,37) */
uint64_t __tmp_in_tmp616;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp616;
}
tmp616[i0] = (role == SERVER) ? __tmp_in_tmp616 : 0;
}

vector < uint64_t > tmp617 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp617 at (10778,1-10778,37) */
uint64_t __tmp_in_tmp617;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp617;
}
tmp617[i0] = (role == SERVER) ? __tmp_in_tmp617 : 0;
}

vector < uint64_t > tmp618 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp618 at (10781,1-10781,37) */
uint64_t __tmp_in_tmp618;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp618;
}
tmp618[i0] = (role == SERVER) ? __tmp_in_tmp618 : 0;
}

vector < uint64_t > tmp619 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp619 at (10784,1-10784,37) */
uint64_t __tmp_in_tmp619;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp619;
}
tmp619[i0] = (role == SERVER) ? __tmp_in_tmp619 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp620 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp620 at (10787,1-10787,47) */
uint64_t __tmp_in_tmp620;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp620;
}
tmp620[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp620 : 0;
}
}
}
}

vector < uint64_t > tmp621 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp621 at (10790,1-10790,37) */
uint64_t __tmp_in_tmp621;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp621;
}
tmp621[i0] = (role == SERVER) ? __tmp_in_tmp621 : 0;
}

vector < uint64_t > tmp622 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp622 at (10793,1-10793,37) */
uint64_t __tmp_in_tmp622;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp622;
}
tmp622[i0] = (role == SERVER) ? __tmp_in_tmp622 : 0;
}

vector < uint64_t > tmp623 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp623 at (10796,1-10796,37) */
uint64_t __tmp_in_tmp623;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp623;
}
tmp623[i0] = (role == SERVER) ? __tmp_in_tmp623 : 0;
}

vector < uint64_t > tmp624 = make_vector<uint64_t>( (int32_t)960);
/* Variable to read the clear value corresponding to the input variable tmp624 at (10799,1-10799,37) */
uint64_t __tmp_in_tmp624;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)960; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp624;
}
tmp624[i0] = (role == SERVER) ? __tmp_in_tmp624 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp625 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp625 at (10802,1-10802,48) */
uint64_t __tmp_in_tmp625;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)960; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp625;
}
tmp625[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp625 : 0;
}
}
}
}

vector < uint64_t > tmp626 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp626 at (10805,1-10805,37) */
uint64_t __tmp_in_tmp626;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp626;
}
tmp626[i0] = (role == SERVER) ? __tmp_in_tmp626 : 0;
}

vector < uint64_t > tmp627 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp627 at (10808,1-10808,37) */
uint64_t __tmp_in_tmp627;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp627;
}
tmp627[i0] = (role == SERVER) ? __tmp_in_tmp627 : 0;
}

vector < uint64_t > tmp628 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp628 at (10811,1-10811,37) */
uint64_t __tmp_in_tmp628;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp628;
}
tmp628[i0] = (role == SERVER) ? __tmp_in_tmp628 : 0;
}

vector < uint64_t > tmp629 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp629 at (10814,1-10814,37) */
uint64_t __tmp_in_tmp629;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp629;
}
tmp629[i0] = (role == SERVER) ? __tmp_in_tmp629 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp630 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp630 at (10817,1-10817,47) */
uint64_t __tmp_in_tmp630;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp630;
}
tmp630[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp630 : 0;
}
}
}
}

vector < uint64_t > tmp631 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp631 at (10820,1-10820,37) */
uint64_t __tmp_in_tmp631;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp631;
}
tmp631[i0] = (role == SERVER) ? __tmp_in_tmp631 : 0;
}

vector < uint64_t > tmp632 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp632 at (10823,1-10823,37) */
uint64_t __tmp_in_tmp632;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp632;
}
tmp632[i0] = (role == SERVER) ? __tmp_in_tmp632 : 0;
}

vector < uint64_t > tmp633 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp633 at (10826,1-10826,37) */
uint64_t __tmp_in_tmp633;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp633;
}
tmp633[i0] = (role == SERVER) ? __tmp_in_tmp633 : 0;
}

vector < uint64_t > tmp634 = make_vector<uint64_t>( (int32_t)992);
/* Variable to read the clear value corresponding to the input variable tmp634 at (10829,1-10829,37) */
uint64_t __tmp_in_tmp634;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)992; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp634;
}
tmp634[i0] = (role == SERVER) ? __tmp_in_tmp634 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp635 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp635 at (10832,1-10832,48) */
uint64_t __tmp_in_tmp635;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)992; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp635;
}
tmp635[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp635 : 0;
}
}
}
}

vector < uint64_t > tmp636 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp636 at (10835,1-10835,37) */
uint64_t __tmp_in_tmp636;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp636;
}
tmp636[i0] = (role == SERVER) ? __tmp_in_tmp636 : 0;
}

vector < uint64_t > tmp637 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp637 at (10838,1-10838,37) */
uint64_t __tmp_in_tmp637;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp637;
}
tmp637[i0] = (role == SERVER) ? __tmp_in_tmp637 : 0;
}

vector < uint64_t > tmp638 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp638 at (10841,1-10841,37) */
uint64_t __tmp_in_tmp638;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp638;
}
tmp638[i0] = (role == SERVER) ? __tmp_in_tmp638 : 0;
}

vector < uint64_t > tmp639 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp639 at (10844,1-10844,37) */
uint64_t __tmp_in_tmp639;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp639;
}
tmp639[i0] = (role == SERVER) ? __tmp_in_tmp639 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp640 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp640 at (10847,1-10847,47) */
uint64_t __tmp_in_tmp640;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp640;
}
tmp640[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp640 : 0;
}
}
}
}

vector < uint64_t > tmp641 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp641 at (10850,1-10850,38) */
uint64_t __tmp_in_tmp641;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp641;
}
tmp641[i0] = (role == SERVER) ? __tmp_in_tmp641 : 0;
}

vector < uint64_t > tmp642 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp642 at (10853,1-10853,38) */
uint64_t __tmp_in_tmp642;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp642;
}
tmp642[i0] = (role == SERVER) ? __tmp_in_tmp642 : 0;
}

vector < uint64_t > tmp643 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp643 at (10856,1-10856,38) */
uint64_t __tmp_in_tmp643;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp643;
}
tmp643[i0] = (role == SERVER) ? __tmp_in_tmp643 : 0;
}

vector < uint64_t > tmp644 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp644 at (10859,1-10859,38) */
uint64_t __tmp_in_tmp644;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp644;
}
tmp644[i0] = (role == SERVER) ? __tmp_in_tmp644 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp645 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp645 at (10862,1-10862,49) */
uint64_t __tmp_in_tmp645;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp645;
}
tmp645[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp645 : 0;
}
}
}
}

vector < uint64_t > tmp646 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp646 at (10865,1-10865,37) */
uint64_t __tmp_in_tmp646;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp646;
}
tmp646[i0] = (role == SERVER) ? __tmp_in_tmp646 : 0;
}

vector < uint64_t > tmp647 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp647 at (10868,1-10868,37) */
uint64_t __tmp_in_tmp647;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp647;
}
tmp647[i0] = (role == SERVER) ? __tmp_in_tmp647 : 0;
}

vector < uint64_t > tmp648 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp648 at (10871,1-10871,37) */
uint64_t __tmp_in_tmp648;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp648;
}
tmp648[i0] = (role == SERVER) ? __tmp_in_tmp648 : 0;
}

vector < uint64_t > tmp649 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp649 at (10874,1-10874,37) */
uint64_t __tmp_in_tmp649;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp649;
}
tmp649[i0] = (role == SERVER) ? __tmp_in_tmp649 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp650 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp650 at (10877,1-10877,47) */
uint64_t __tmp_in_tmp650;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp650;
}
tmp650[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp650 : 0;
}
}
}
}

vector < uint64_t > tmp651 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp651 at (10880,1-10880,38) */
uint64_t __tmp_in_tmp651;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp651;
}
tmp651[i0] = (role == SERVER) ? __tmp_in_tmp651 : 0;
}

vector < uint64_t > tmp652 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp652 at (10883,1-10883,38) */
uint64_t __tmp_in_tmp652;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp652;
}
tmp652[i0] = (role == SERVER) ? __tmp_in_tmp652 : 0;
}

vector < uint64_t > tmp653 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp653 at (10886,1-10886,38) */
uint64_t __tmp_in_tmp653;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp653;
}
tmp653[i0] = (role == SERVER) ? __tmp_in_tmp653 : 0;
}

vector < uint64_t > tmp654 = make_vector<uint64_t>( (int32_t)1056);
/* Variable to read the clear value corresponding to the input variable tmp654 at (10889,1-10889,38) */
uint64_t __tmp_in_tmp654;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1056; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp654;
}
tmp654[i0] = (role == SERVER) ? __tmp_in_tmp654 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp655 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1056,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp655 at (10892,1-10892,49) */
uint64_t __tmp_in_tmp655;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1056; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp655;
}
tmp655[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp655 : 0;
}
}
}
}

vector < uint64_t > tmp656 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp656 at (10895,1-10895,37) */
uint64_t __tmp_in_tmp656;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp656;
}
tmp656[i0] = (role == SERVER) ? __tmp_in_tmp656 : 0;
}

vector < uint64_t > tmp657 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp657 at (10898,1-10898,37) */
uint64_t __tmp_in_tmp657;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp657;
}
tmp657[i0] = (role == SERVER) ? __tmp_in_tmp657 : 0;
}

vector < uint64_t > tmp658 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp658 at (10901,1-10901,37) */
uint64_t __tmp_in_tmp658;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp658;
}
tmp658[i0] = (role == SERVER) ? __tmp_in_tmp658 : 0;
}

vector < uint64_t > tmp659 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp659 at (10904,1-10904,37) */
uint64_t __tmp_in_tmp659;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp659;
}
tmp659[i0] = (role == SERVER) ? __tmp_in_tmp659 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp660 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp660 at (10907,1-10907,47) */
uint64_t __tmp_in_tmp660;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp660;
}
tmp660[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp660 : 0;
}
}
}
}

vector < uint64_t > tmp661 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp661 at (10910,1-10910,38) */
uint64_t __tmp_in_tmp661;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp661;
}
tmp661[i0] = (role == SERVER) ? __tmp_in_tmp661 : 0;
}

vector < uint64_t > tmp662 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp662 at (10913,1-10913,38) */
uint64_t __tmp_in_tmp662;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp662;
}
tmp662[i0] = (role == SERVER) ? __tmp_in_tmp662 : 0;
}

vector < uint64_t > tmp663 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp663 at (10916,1-10916,38) */
uint64_t __tmp_in_tmp663;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp663;
}
tmp663[i0] = (role == SERVER) ? __tmp_in_tmp663 : 0;
}

vector < uint64_t > tmp664 = make_vector<uint64_t>( (int32_t)1088);
/* Variable to read the clear value corresponding to the input variable tmp664 at (10919,1-10919,38) */
uint64_t __tmp_in_tmp664;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1088; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp664;
}
tmp664[i0] = (role == SERVER) ? __tmp_in_tmp664 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp665 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1088,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp665 at (10922,1-10922,49) */
uint64_t __tmp_in_tmp665;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1088; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp665;
}
tmp665[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp665 : 0;
}
}
}
}

vector < uint64_t > tmp666 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp666 at (10925,1-10925,37) */
uint64_t __tmp_in_tmp666;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp666;
}
tmp666[i0] = (role == SERVER) ? __tmp_in_tmp666 : 0;
}

vector < uint64_t > tmp667 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp667 at (10928,1-10928,37) */
uint64_t __tmp_in_tmp667;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp667;
}
tmp667[i0] = (role == SERVER) ? __tmp_in_tmp667 : 0;
}

vector < uint64_t > tmp668 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp668 at (10931,1-10931,37) */
uint64_t __tmp_in_tmp668;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp668;
}
tmp668[i0] = (role == SERVER) ? __tmp_in_tmp668 : 0;
}

vector < uint64_t > tmp669 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp669 at (10934,1-10934,37) */
uint64_t __tmp_in_tmp669;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp669;
}
tmp669[i0] = (role == SERVER) ? __tmp_in_tmp669 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp670 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp670 at (10937,1-10937,47) */
uint64_t __tmp_in_tmp670;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp670;
}
tmp670[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp670 : 0;
}
}
}
}

vector < uint64_t > tmp671 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp671 at (10940,1-10940,38) */
uint64_t __tmp_in_tmp671;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp671;
}
tmp671[i0] = (role == SERVER) ? __tmp_in_tmp671 : 0;
}

vector < uint64_t > tmp672 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp672 at (10943,1-10943,38) */
uint64_t __tmp_in_tmp672;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp672;
}
tmp672[i0] = (role == SERVER) ? __tmp_in_tmp672 : 0;
}

vector < uint64_t > tmp673 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp673 at (10946,1-10946,38) */
uint64_t __tmp_in_tmp673;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp673;
}
tmp673[i0] = (role == SERVER) ? __tmp_in_tmp673 : 0;
}

vector < uint64_t > tmp674 = make_vector<uint64_t>( (int32_t)1120);
/* Variable to read the clear value corresponding to the input variable tmp674 at (10949,1-10949,38) */
uint64_t __tmp_in_tmp674;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1120; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp674;
}
tmp674[i0] = (role == SERVER) ? __tmp_in_tmp674 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp675 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1120,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp675 at (10952,1-10952,49) */
uint64_t __tmp_in_tmp675;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1120; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp675;
}
tmp675[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp675 : 0;
}
}
}
}

vector < uint64_t > tmp676 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp676 at (10955,1-10955,37) */
uint64_t __tmp_in_tmp676;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp676;
}
tmp676[i0] = (role == SERVER) ? __tmp_in_tmp676 : 0;
}

vector < uint64_t > tmp677 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp677 at (10958,1-10958,37) */
uint64_t __tmp_in_tmp677;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp677;
}
tmp677[i0] = (role == SERVER) ? __tmp_in_tmp677 : 0;
}

vector < uint64_t > tmp678 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp678 at (10961,1-10961,37) */
uint64_t __tmp_in_tmp678;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp678;
}
tmp678[i0] = (role == SERVER) ? __tmp_in_tmp678 : 0;
}

vector < uint64_t > tmp679 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp679 at (10964,1-10964,37) */
uint64_t __tmp_in_tmp679;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp679;
}
tmp679[i0] = (role == SERVER) ? __tmp_in_tmp679 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp680 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp680 at (10967,1-10967,47) */
uint64_t __tmp_in_tmp680;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp680;
}
tmp680[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp680 : 0;
}
}
}
}

vector < uint64_t > tmp681 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp681 at (10970,1-10970,38) */
uint64_t __tmp_in_tmp681;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp681;
}
tmp681[i0] = (role == SERVER) ? __tmp_in_tmp681 : 0;
}

vector < uint64_t > tmp682 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp682 at (10973,1-10973,38) */
uint64_t __tmp_in_tmp682;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp682;
}
tmp682[i0] = (role == SERVER) ? __tmp_in_tmp682 : 0;
}

vector < uint64_t > tmp683 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp683 at (10976,1-10976,38) */
uint64_t __tmp_in_tmp683;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp683;
}
tmp683[i0] = (role == SERVER) ? __tmp_in_tmp683 : 0;
}

vector < uint64_t > tmp684 = make_vector<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp684 at (10979,1-10979,38) */
uint64_t __tmp_in_tmp684;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp684;
}
tmp684[i0] = (role == SERVER) ? __tmp_in_tmp684 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp685 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp685 at (10982,1-10982,49) */
uint64_t __tmp_in_tmp685;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1152; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp685;
}
tmp685[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp685 : 0;
}
}
}
}

vector < uint64_t > tmp686 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp686 at (10985,1-10985,37) */
uint64_t __tmp_in_tmp686;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp686;
}
tmp686[i0] = (role == SERVER) ? __tmp_in_tmp686 : 0;
}

vector < uint64_t > tmp687 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp687 at (10988,1-10988,37) */
uint64_t __tmp_in_tmp687;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp687;
}
tmp687[i0] = (role == SERVER) ? __tmp_in_tmp687 : 0;
}

vector < uint64_t > tmp688 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp688 at (10991,1-10991,37) */
uint64_t __tmp_in_tmp688;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp688;
}
tmp688[i0] = (role == SERVER) ? __tmp_in_tmp688 : 0;
}

vector < uint64_t > tmp689 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp689 at (10994,1-10994,37) */
uint64_t __tmp_in_tmp689;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp689;
}
tmp689[i0] = (role == SERVER) ? __tmp_in_tmp689 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp690 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp690 at (10997,1-10997,47) */
uint64_t __tmp_in_tmp690;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp690;
}
tmp690[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp690 : 0;
}
}
}
}

vector < uint64_t > tmp691 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp691 at (11000,1-11000,38) */
uint64_t __tmp_in_tmp691;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp691;
}
tmp691[i0] = (role == SERVER) ? __tmp_in_tmp691 : 0;
}

vector < uint64_t > tmp692 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp692 at (11003,1-11003,38) */
uint64_t __tmp_in_tmp692;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp692;
}
tmp692[i0] = (role == SERVER) ? __tmp_in_tmp692 : 0;
}

vector < uint64_t > tmp693 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp693 at (11006,1-11006,38) */
uint64_t __tmp_in_tmp693;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp693;
}
tmp693[i0] = (role == SERVER) ? __tmp_in_tmp693 : 0;
}

vector < uint64_t > tmp694 = make_vector<uint64_t>( (int32_t)1184);
/* Variable to read the clear value corresponding to the input variable tmp694 at (11009,1-11009,38) */
uint64_t __tmp_in_tmp694;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1184; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp694;
}
tmp694[i0] = (role == SERVER) ? __tmp_in_tmp694 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp695 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1184,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp695 at (11012,1-11012,49) */
uint64_t __tmp_in_tmp695;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1184; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp695;
}
tmp695[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp695 : 0;
}
}
}
}

vector < uint64_t > tmp696 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp696 at (11015,1-11015,37) */
uint64_t __tmp_in_tmp696;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp696;
}
tmp696[i0] = (role == SERVER) ? __tmp_in_tmp696 : 0;
}

vector < uint64_t > tmp697 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp697 at (11018,1-11018,37) */
uint64_t __tmp_in_tmp697;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp697;
}
tmp697[i0] = (role == SERVER) ? __tmp_in_tmp697 : 0;
}

vector < uint64_t > tmp698 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp698 at (11021,1-11021,37) */
uint64_t __tmp_in_tmp698;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp698;
}
tmp698[i0] = (role == SERVER) ? __tmp_in_tmp698 : 0;
}

vector < uint64_t > tmp699 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp699 at (11024,1-11024,37) */
uint64_t __tmp_in_tmp699;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp699;
}
tmp699[i0] = (role == SERVER) ? __tmp_in_tmp699 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp700 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp700 at (11027,1-11027,47) */
uint64_t __tmp_in_tmp700;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp700;
}
tmp700[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp700 : 0;
}
}
}
}

vector < uint64_t > tmp701 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp701 at (11030,1-11030,38) */
uint64_t __tmp_in_tmp701;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp701;
}
tmp701[i0] = (role == SERVER) ? __tmp_in_tmp701 : 0;
}

vector < uint64_t > tmp702 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp702 at (11033,1-11033,38) */
uint64_t __tmp_in_tmp702;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp702;
}
tmp702[i0] = (role == SERVER) ? __tmp_in_tmp702 : 0;
}

vector < uint64_t > tmp703 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp703 at (11036,1-11036,38) */
uint64_t __tmp_in_tmp703;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp703;
}
tmp703[i0] = (role == SERVER) ? __tmp_in_tmp703 : 0;
}

vector < uint64_t > tmp704 = make_vector<uint64_t>( (int32_t)1216);
/* Variable to read the clear value corresponding to the input variable tmp704 at (11039,1-11039,38) */
uint64_t __tmp_in_tmp704;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1216; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp704;
}
tmp704[i0] = (role == SERVER) ? __tmp_in_tmp704 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp705 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1216,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp705 at (11042,1-11042,49) */
uint64_t __tmp_in_tmp705;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1216; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp705;
}
tmp705[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp705 : 0;
}
}
}
}

vector < uint64_t > tmp706 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp706 at (11045,1-11045,37) */
uint64_t __tmp_in_tmp706;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp706;
}
tmp706[i0] = (role == SERVER) ? __tmp_in_tmp706 : 0;
}

vector < uint64_t > tmp707 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp707 at (11048,1-11048,37) */
uint64_t __tmp_in_tmp707;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp707;
}
tmp707[i0] = (role == SERVER) ? __tmp_in_tmp707 : 0;
}

vector < uint64_t > tmp708 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp708 at (11051,1-11051,37) */
uint64_t __tmp_in_tmp708;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp708;
}
tmp708[i0] = (role == SERVER) ? __tmp_in_tmp708 : 0;
}

vector < uint64_t > tmp709 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp709 at (11054,1-11054,37) */
uint64_t __tmp_in_tmp709;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp709;
}
tmp709[i0] = (role == SERVER) ? __tmp_in_tmp709 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp710 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp710 at (11057,1-11057,47) */
uint64_t __tmp_in_tmp710;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp710;
}
tmp710[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp710 : 0;
}
}
}
}

vector < uint64_t > tmp711 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp711 at (11060,1-11060,38) */
uint64_t __tmp_in_tmp711;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp711;
}
tmp711[i0] = (role == SERVER) ? __tmp_in_tmp711 : 0;
}

vector < uint64_t > tmp712 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp712 at (11063,1-11063,38) */
uint64_t __tmp_in_tmp712;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp712;
}
tmp712[i0] = (role == SERVER) ? __tmp_in_tmp712 : 0;
}

vector < uint64_t > tmp713 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp713 at (11066,1-11066,38) */
uint64_t __tmp_in_tmp713;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp713;
}
tmp713[i0] = (role == SERVER) ? __tmp_in_tmp713 : 0;
}

vector < uint64_t > tmp714 = make_vector<uint64_t>( (int32_t)1248);
/* Variable to read the clear value corresponding to the input variable tmp714 at (11069,1-11069,38) */
uint64_t __tmp_in_tmp714;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1248; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp714;
}
tmp714[i0] = (role == SERVER) ? __tmp_in_tmp714 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp715 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1248,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp715 at (11072,1-11072,49) */
uint64_t __tmp_in_tmp715;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1248; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp715;
}
tmp715[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp715 : 0;
}
}
}
}

vector < uint64_t > tmp716 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp716 at (11075,1-11075,37) */
uint64_t __tmp_in_tmp716;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp716;
}
tmp716[i0] = (role == SERVER) ? __tmp_in_tmp716 : 0;
}

vector < uint64_t > tmp717 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp717 at (11078,1-11078,37) */
uint64_t __tmp_in_tmp717;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp717;
}
tmp717[i0] = (role == SERVER) ? __tmp_in_tmp717 : 0;
}

vector < uint64_t > tmp718 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp718 at (11081,1-11081,37) */
uint64_t __tmp_in_tmp718;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp718;
}
tmp718[i0] = (role == SERVER) ? __tmp_in_tmp718 : 0;
}

vector < uint64_t > tmp719 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp719 at (11084,1-11084,37) */
uint64_t __tmp_in_tmp719;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp719;
}
tmp719[i0] = (role == SERVER) ? __tmp_in_tmp719 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp720 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp720 at (11087,1-11087,47) */
uint64_t __tmp_in_tmp720;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp720;
}
tmp720[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp720 : 0;
}
}
}
}

vector < uint64_t > tmp721 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp721 at (11090,1-11090,38) */
uint64_t __tmp_in_tmp721;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp721;
}
tmp721[i0] = (role == SERVER) ? __tmp_in_tmp721 : 0;
}

vector < uint64_t > tmp722 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp722 at (11093,1-11093,38) */
uint64_t __tmp_in_tmp722;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp722;
}
tmp722[i0] = (role == SERVER) ? __tmp_in_tmp722 : 0;
}

vector < uint64_t > tmp723 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp723 at (11096,1-11096,38) */
uint64_t __tmp_in_tmp723;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp723;
}
tmp723[i0] = (role == SERVER) ? __tmp_in_tmp723 : 0;
}

vector < uint64_t > tmp724 = make_vector<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp724 at (11099,1-11099,38) */
uint64_t __tmp_in_tmp724;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp724;
}
tmp724[i0] = (role == SERVER) ? __tmp_in_tmp724 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp725 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1280,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp725 at (11102,1-11102,49) */
uint64_t __tmp_in_tmp725;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1280; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp725;
}
tmp725[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp725 : 0;
}
}
}
}

vector < uint64_t > tmp726 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp726 at (11105,1-11105,37) */
uint64_t __tmp_in_tmp726;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp726;
}
tmp726[i0] = (role == SERVER) ? __tmp_in_tmp726 : 0;
}

vector < uint64_t > tmp727 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp727 at (11108,1-11108,37) */
uint64_t __tmp_in_tmp727;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp727;
}
tmp727[i0] = (role == SERVER) ? __tmp_in_tmp727 : 0;
}

vector < uint64_t > tmp728 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp728 at (11111,1-11111,37) */
uint64_t __tmp_in_tmp728;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp728;
}
tmp728[i0] = (role == SERVER) ? __tmp_in_tmp728 : 0;
}

vector < uint64_t > tmp729 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp729 at (11114,1-11114,37) */
uint64_t __tmp_in_tmp729;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp729;
}
tmp729[i0] = (role == SERVER) ? __tmp_in_tmp729 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp730 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp730 at (11117,1-11117,47) */
uint64_t __tmp_in_tmp730;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp730;
}
tmp730[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp730 : 0;
}
}
}
}

vector < uint64_t > tmp731 = make_vector<uint64_t>( (int32_t)1312);
/* Variable to read the clear value corresponding to the input variable tmp731 at (11120,1-11120,38) */
uint64_t __tmp_in_tmp731;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1312; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp731;
}
tmp731[i0] = (role == SERVER) ? __tmp_in_tmp731 : 0;
}

vector < uint64_t > tmp732 = make_vector<uint64_t>( (int32_t)1312);
/* Variable to read the clear value corresponding to the input variable tmp732 at (11123,1-11123,38) */
uint64_t __tmp_in_tmp732;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1312; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp732;
}
tmp732[i0] = (role == SERVER) ? __tmp_in_tmp732 : 0;
}

vector < uint64_t > tmp733 = make_vector<uint64_t>( (int32_t)1312);
/* Variable to read the clear value corresponding to the input variable tmp733 at (11126,1-11126,38) */
uint64_t __tmp_in_tmp733;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1312; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp733;
}
tmp733[i0] = (role == SERVER) ? __tmp_in_tmp733 : 0;
}

vector < uint64_t > tmp734 = make_vector<uint64_t>( (int32_t)1312);
/* Variable to read the clear value corresponding to the input variable tmp734 at (11129,1-11129,38) */
uint64_t __tmp_in_tmp734;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1312; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp734;
}
tmp734[i0] = (role == SERVER) ? __tmp_in_tmp734 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp735 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1312,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp735 at (11132,1-11132,49) */
uint64_t __tmp_in_tmp735;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1312; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp735;
}
tmp735[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp735 : 0;
}
}
}
}

vector < uint64_t > tmp736 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp736 at (11135,1-11135,37) */
uint64_t __tmp_in_tmp736;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp736;
}
tmp736[i0] = (role == SERVER) ? __tmp_in_tmp736 : 0;
}

vector < uint64_t > tmp737 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp737 at (11138,1-11138,37) */
uint64_t __tmp_in_tmp737;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp737;
}
tmp737[i0] = (role == SERVER) ? __tmp_in_tmp737 : 0;
}

vector < uint64_t > tmp738 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp738 at (11141,1-11141,37) */
uint64_t __tmp_in_tmp738;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp738;
}
tmp738[i0] = (role == SERVER) ? __tmp_in_tmp738 : 0;
}

vector < uint64_t > tmp739 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp739 at (11144,1-11144,37) */
uint64_t __tmp_in_tmp739;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp739;
}
tmp739[i0] = (role == SERVER) ? __tmp_in_tmp739 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp740 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp740 at (11147,1-11147,47) */
uint64_t __tmp_in_tmp740;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp740;
}
tmp740[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp740 : 0;
}
}
}
}

vector < uint64_t > tmp741 = make_vector<uint64_t>( (int32_t)1344);
/* Variable to read the clear value corresponding to the input variable tmp741 at (11150,1-11150,38) */
uint64_t __tmp_in_tmp741;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1344; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp741;
}
tmp741[i0] = (role == SERVER) ? __tmp_in_tmp741 : 0;
}

vector < uint64_t > tmp742 = make_vector<uint64_t>( (int32_t)1344);
/* Variable to read the clear value corresponding to the input variable tmp742 at (11153,1-11153,38) */
uint64_t __tmp_in_tmp742;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1344; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp742;
}
tmp742[i0] = (role == SERVER) ? __tmp_in_tmp742 : 0;
}

vector < uint64_t > tmp743 = make_vector<uint64_t>( (int32_t)1344);
/* Variable to read the clear value corresponding to the input variable tmp743 at (11156,1-11156,38) */
uint64_t __tmp_in_tmp743;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1344; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp743;
}
tmp743[i0] = (role == SERVER) ? __tmp_in_tmp743 : 0;
}

vector < uint64_t > tmp744 = make_vector<uint64_t>( (int32_t)1344);
/* Variable to read the clear value corresponding to the input variable tmp744 at (11159,1-11159,38) */
uint64_t __tmp_in_tmp744;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1344; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp744;
}
tmp744[i0] = (role == SERVER) ? __tmp_in_tmp744 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp745 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1344,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp745 at (11162,1-11162,49) */
uint64_t __tmp_in_tmp745;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1344; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp745;
}
tmp745[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp745 : 0;
}
}
}
}

vector < uint64_t > tmp746 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp746 at (11165,1-11165,37) */
uint64_t __tmp_in_tmp746;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp746;
}
tmp746[i0] = (role == SERVER) ? __tmp_in_tmp746 : 0;
}

vector < uint64_t > tmp747 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp747 at (11168,1-11168,37) */
uint64_t __tmp_in_tmp747;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp747;
}
tmp747[i0] = (role == SERVER) ? __tmp_in_tmp747 : 0;
}

vector < uint64_t > tmp748 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp748 at (11171,1-11171,37) */
uint64_t __tmp_in_tmp748;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp748;
}
tmp748[i0] = (role == SERVER) ? __tmp_in_tmp748 : 0;
}

vector < uint64_t > tmp749 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp749 at (11174,1-11174,37) */
uint64_t __tmp_in_tmp749;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp749;
}
tmp749[i0] = (role == SERVER) ? __tmp_in_tmp749 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp750 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp750 at (11177,1-11177,47) */
uint64_t __tmp_in_tmp750;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp750;
}
tmp750[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp750 : 0;
}
}
}
}

vector < uint64_t > tmp751 = make_vector<uint64_t>( (int32_t)1376);
/* Variable to read the clear value corresponding to the input variable tmp751 at (11180,1-11180,38) */
uint64_t __tmp_in_tmp751;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1376; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp751;
}
tmp751[i0] = (role == SERVER) ? __tmp_in_tmp751 : 0;
}

vector < uint64_t > tmp752 = make_vector<uint64_t>( (int32_t)1376);
/* Variable to read the clear value corresponding to the input variable tmp752 at (11183,1-11183,38) */
uint64_t __tmp_in_tmp752;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1376; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp752;
}
tmp752[i0] = (role == SERVER) ? __tmp_in_tmp752 : 0;
}

vector < uint64_t > tmp753 = make_vector<uint64_t>( (int32_t)1376);
/* Variable to read the clear value corresponding to the input variable tmp753 at (11186,1-11186,38) */
uint64_t __tmp_in_tmp753;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1376; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp753;
}
tmp753[i0] = (role == SERVER) ? __tmp_in_tmp753 : 0;
}

vector < uint64_t > tmp754 = make_vector<uint64_t>( (int32_t)1376);
/* Variable to read the clear value corresponding to the input variable tmp754 at (11189,1-11189,38) */
uint64_t __tmp_in_tmp754;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1376; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp754;
}
tmp754[i0] = (role == SERVER) ? __tmp_in_tmp754 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp755 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1376,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp755 at (11192,1-11192,49) */
uint64_t __tmp_in_tmp755;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1376; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp755;
}
tmp755[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp755 : 0;
}
}
}
}

vector < uint64_t > tmp756 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp756 at (11195,1-11195,37) */
uint64_t __tmp_in_tmp756;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp756;
}
tmp756[i0] = (role == SERVER) ? __tmp_in_tmp756 : 0;
}

vector < uint64_t > tmp757 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp757 at (11198,1-11198,37) */
uint64_t __tmp_in_tmp757;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp757;
}
tmp757[i0] = (role == SERVER) ? __tmp_in_tmp757 : 0;
}

vector < uint64_t > tmp758 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp758 at (11201,1-11201,37) */
uint64_t __tmp_in_tmp758;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp758;
}
tmp758[i0] = (role == SERVER) ? __tmp_in_tmp758 : 0;
}

vector < uint64_t > tmp759 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp759 at (11204,1-11204,37) */
uint64_t __tmp_in_tmp759;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp759;
}
tmp759[i0] = (role == SERVER) ? __tmp_in_tmp759 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp760 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp760 at (11207,1-11207,47) */
uint64_t __tmp_in_tmp760;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp760;
}
tmp760[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp760 : 0;
}
}
}
}

vector < uint64_t > tmp761 = make_vector<uint64_t>( (int32_t)1408);
/* Variable to read the clear value corresponding to the input variable tmp761 at (11210,1-11210,38) */
uint64_t __tmp_in_tmp761;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1408; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp761;
}
tmp761[i0] = (role == SERVER) ? __tmp_in_tmp761 : 0;
}

vector < uint64_t > tmp762 = make_vector<uint64_t>( (int32_t)1408);
/* Variable to read the clear value corresponding to the input variable tmp762 at (11213,1-11213,38) */
uint64_t __tmp_in_tmp762;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1408; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp762;
}
tmp762[i0] = (role == SERVER) ? __tmp_in_tmp762 : 0;
}

vector < uint64_t > tmp763 = make_vector<uint64_t>( (int32_t)1408);
/* Variable to read the clear value corresponding to the input variable tmp763 at (11216,1-11216,38) */
uint64_t __tmp_in_tmp763;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1408; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp763;
}
tmp763[i0] = (role == SERVER) ? __tmp_in_tmp763 : 0;
}

vector < uint64_t > tmp764 = make_vector<uint64_t>( (int32_t)1408);
/* Variable to read the clear value corresponding to the input variable tmp764 at (11219,1-11219,38) */
uint64_t __tmp_in_tmp764;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1408; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp764;
}
tmp764[i0] = (role == SERVER) ? __tmp_in_tmp764 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp765 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1408,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp765 at (11222,1-11222,49) */
uint64_t __tmp_in_tmp765;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1408; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp765;
}
tmp765[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp765 : 0;
}
}
}
}

vector < uint64_t > tmp766 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp766 at (11225,1-11225,37) */
uint64_t __tmp_in_tmp766;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp766;
}
tmp766[i0] = (role == SERVER) ? __tmp_in_tmp766 : 0;
}

vector < uint64_t > tmp767 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp767 at (11228,1-11228,37) */
uint64_t __tmp_in_tmp767;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp767;
}
tmp767[i0] = (role == SERVER) ? __tmp_in_tmp767 : 0;
}

vector < uint64_t > tmp768 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp768 at (11231,1-11231,37) */
uint64_t __tmp_in_tmp768;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp768;
}
tmp768[i0] = (role == SERVER) ? __tmp_in_tmp768 : 0;
}

vector < uint64_t > tmp769 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp769 at (11234,1-11234,37) */
uint64_t __tmp_in_tmp769;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp769;
}
tmp769[i0] = (role == SERVER) ? __tmp_in_tmp769 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp770 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp770 at (11237,1-11237,47) */
uint64_t __tmp_in_tmp770;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp770;
}
tmp770[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp770 : 0;
}
}
}
}

vector < uint64_t > tmp771 = make_vector<uint64_t>( (int32_t)1440);
/* Variable to read the clear value corresponding to the input variable tmp771 at (11240,1-11240,38) */
uint64_t __tmp_in_tmp771;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1440; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp771;
}
tmp771[i0] = (role == SERVER) ? __tmp_in_tmp771 : 0;
}

vector < uint64_t > tmp772 = make_vector<uint64_t>( (int32_t)1440);
/* Variable to read the clear value corresponding to the input variable tmp772 at (11243,1-11243,38) */
uint64_t __tmp_in_tmp772;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1440; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp772;
}
tmp772[i0] = (role == SERVER) ? __tmp_in_tmp772 : 0;
}

vector < uint64_t > tmp773 = make_vector<uint64_t>( (int32_t)1440);
/* Variable to read the clear value corresponding to the input variable tmp773 at (11246,1-11246,38) */
uint64_t __tmp_in_tmp773;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1440; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp773;
}
tmp773[i0] = (role == SERVER) ? __tmp_in_tmp773 : 0;
}

vector < uint64_t > tmp774 = make_vector<uint64_t>( (int32_t)1440);
/* Variable to read the clear value corresponding to the input variable tmp774 at (11249,1-11249,38) */
uint64_t __tmp_in_tmp774;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1440; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp774;
}
tmp774[i0] = (role == SERVER) ? __tmp_in_tmp774 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp775 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1440,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp775 at (11252,1-11252,49) */
uint64_t __tmp_in_tmp775;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1440; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp775;
}
tmp775[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp775 : 0;
}
}
}
}

vector < uint64_t > tmp776 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp776 at (11255,1-11255,37) */
uint64_t __tmp_in_tmp776;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp776;
}
tmp776[i0] = (role == SERVER) ? __tmp_in_tmp776 : 0;
}

vector < uint64_t > tmp777 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp777 at (11258,1-11258,37) */
uint64_t __tmp_in_tmp777;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp777;
}
tmp777[i0] = (role == SERVER) ? __tmp_in_tmp777 : 0;
}

vector < uint64_t > tmp778 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp778 at (11261,1-11261,37) */
uint64_t __tmp_in_tmp778;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp778;
}
tmp778[i0] = (role == SERVER) ? __tmp_in_tmp778 : 0;
}

vector < uint64_t > tmp779 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp779 at (11264,1-11264,37) */
uint64_t __tmp_in_tmp779;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp779;
}
tmp779[i0] = (role == SERVER) ? __tmp_in_tmp779 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp780 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp780 at (11267,1-11267,47) */
uint64_t __tmp_in_tmp780;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp780;
}
tmp780[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp780 : 0;
}
}
}
}

vector < uint64_t > tmp781 = make_vector<uint64_t>( (int32_t)1472);
/* Variable to read the clear value corresponding to the input variable tmp781 at (11270,1-11270,38) */
uint64_t __tmp_in_tmp781;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1472; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp781;
}
tmp781[i0] = (role == SERVER) ? __tmp_in_tmp781 : 0;
}

vector < uint64_t > tmp782 = make_vector<uint64_t>( (int32_t)1472);
/* Variable to read the clear value corresponding to the input variable tmp782 at (11273,1-11273,38) */
uint64_t __tmp_in_tmp782;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1472; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp782;
}
tmp782[i0] = (role == SERVER) ? __tmp_in_tmp782 : 0;
}

vector < uint64_t > tmp783 = make_vector<uint64_t>( (int32_t)1472);
/* Variable to read the clear value corresponding to the input variable tmp783 at (11276,1-11276,38) */
uint64_t __tmp_in_tmp783;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1472; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp783;
}
tmp783[i0] = (role == SERVER) ? __tmp_in_tmp783 : 0;
}

vector < uint64_t > tmp784 = make_vector<uint64_t>( (int32_t)1472);
/* Variable to read the clear value corresponding to the input variable tmp784 at (11279,1-11279,38) */
uint64_t __tmp_in_tmp784;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1472; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp784;
}
tmp784[i0] = (role == SERVER) ? __tmp_in_tmp784 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp785 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1472,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp785 at (11282,1-11282,49) */
uint64_t __tmp_in_tmp785;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1472; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp785;
}
tmp785[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp785 : 0;
}
}
}
}

vector < uint64_t > tmp786 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp786 at (11285,1-11285,37) */
uint64_t __tmp_in_tmp786;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp786;
}
tmp786[i0] = (role == SERVER) ? __tmp_in_tmp786 : 0;
}

vector < uint64_t > tmp787 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp787 at (11288,1-11288,37) */
uint64_t __tmp_in_tmp787;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp787;
}
tmp787[i0] = (role == SERVER) ? __tmp_in_tmp787 : 0;
}

vector < uint64_t > tmp788 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp788 at (11291,1-11291,37) */
uint64_t __tmp_in_tmp788;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp788;
}
tmp788[i0] = (role == SERVER) ? __tmp_in_tmp788 : 0;
}

vector < uint64_t > tmp789 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp789 at (11294,1-11294,37) */
uint64_t __tmp_in_tmp789;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp789;
}
tmp789[i0] = (role == SERVER) ? __tmp_in_tmp789 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp790 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp790 at (11297,1-11297,47) */
uint64_t __tmp_in_tmp790;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp790;
}
tmp790[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp790 : 0;
}
}
}
}

vector < uint64_t > tmp791 = make_vector<uint64_t>( (int32_t)1504);
/* Variable to read the clear value corresponding to the input variable tmp791 at (11300,1-11300,38) */
uint64_t __tmp_in_tmp791;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1504; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp791;
}
tmp791[i0] = (role == SERVER) ? __tmp_in_tmp791 : 0;
}

vector < uint64_t > tmp792 = make_vector<uint64_t>( (int32_t)1504);
/* Variable to read the clear value corresponding to the input variable tmp792 at (11303,1-11303,38) */
uint64_t __tmp_in_tmp792;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1504; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp792;
}
tmp792[i0] = (role == SERVER) ? __tmp_in_tmp792 : 0;
}

vector < uint64_t > tmp793 = make_vector<uint64_t>( (int32_t)1504);
/* Variable to read the clear value corresponding to the input variable tmp793 at (11306,1-11306,38) */
uint64_t __tmp_in_tmp793;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1504; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp793;
}
tmp793[i0] = (role == SERVER) ? __tmp_in_tmp793 : 0;
}

vector < uint64_t > tmp794 = make_vector<uint64_t>( (int32_t)1504);
/* Variable to read the clear value corresponding to the input variable tmp794 at (11309,1-11309,38) */
uint64_t __tmp_in_tmp794;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1504; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp794;
}
tmp794[i0] = (role == SERVER) ? __tmp_in_tmp794 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp795 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1504,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp795 at (11312,1-11312,49) */
uint64_t __tmp_in_tmp795;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1504; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp795;
}
tmp795[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp795 : 0;
}
}
}
}

vector < uint64_t > tmp796 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp796 at (11315,1-11315,37) */
uint64_t __tmp_in_tmp796;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp796;
}
tmp796[i0] = (role == SERVER) ? __tmp_in_tmp796 : 0;
}

vector < uint64_t > tmp797 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp797 at (11318,1-11318,37) */
uint64_t __tmp_in_tmp797;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp797;
}
tmp797[i0] = (role == SERVER) ? __tmp_in_tmp797 : 0;
}

vector < uint64_t > tmp798 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp798 at (11321,1-11321,37) */
uint64_t __tmp_in_tmp798;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp798;
}
tmp798[i0] = (role == SERVER) ? __tmp_in_tmp798 : 0;
}

vector < uint64_t > tmp799 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp799 at (11324,1-11324,37) */
uint64_t __tmp_in_tmp799;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp799;
}
tmp799[i0] = (role == SERVER) ? __tmp_in_tmp799 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp800 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp800 at (11327,1-11327,47) */
uint64_t __tmp_in_tmp800;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp800;
}
tmp800[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp800 : 0;
}
}
}
}

vector < uint64_t > tmp801 = make_vector<uint64_t>( (int32_t)1536);
/* Variable to read the clear value corresponding to the input variable tmp801 at (11330,1-11330,38) */
uint64_t __tmp_in_tmp801;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1536; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp801;
}
tmp801[i0] = (role == SERVER) ? __tmp_in_tmp801 : 0;
}

vector < uint64_t > tmp802 = make_vector<uint64_t>( (int32_t)1536);
/* Variable to read the clear value corresponding to the input variable tmp802 at (11333,1-11333,38) */
uint64_t __tmp_in_tmp802;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1536; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp802;
}
tmp802[i0] = (role == SERVER) ? __tmp_in_tmp802 : 0;
}

vector < uint64_t > tmp803 = make_vector<uint64_t>( (int32_t)1536);
/* Variable to read the clear value corresponding to the input variable tmp803 at (11336,1-11336,38) */
uint64_t __tmp_in_tmp803;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1536; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp803;
}
tmp803[i0] = (role == SERVER) ? __tmp_in_tmp803 : 0;
}

vector < uint64_t > tmp804 = make_vector<uint64_t>( (int32_t)1536);
/* Variable to read the clear value corresponding to the input variable tmp804 at (11339,1-11339,38) */
uint64_t __tmp_in_tmp804;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1536; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp804;
}
tmp804[i0] = (role == SERVER) ? __tmp_in_tmp804 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp805 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1536,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp805 at (11342,1-11342,49) */
uint64_t __tmp_in_tmp805;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1536; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp805;
}
tmp805[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp805 : 0;
}
}
}
}

vector < uint64_t > tmp806 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp806 at (11345,1-11345,37) */
uint64_t __tmp_in_tmp806;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp806;
}
tmp806[i0] = (role == SERVER) ? __tmp_in_tmp806 : 0;
}

vector < uint64_t > tmp807 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp807 at (11348,1-11348,37) */
uint64_t __tmp_in_tmp807;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp807;
}
tmp807[i0] = (role == SERVER) ? __tmp_in_tmp807 : 0;
}

vector < uint64_t > tmp808 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp808 at (11351,1-11351,37) */
uint64_t __tmp_in_tmp808;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp808;
}
tmp808[i0] = (role == SERVER) ? __tmp_in_tmp808 : 0;
}

vector < uint64_t > tmp809 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp809 at (11354,1-11354,37) */
uint64_t __tmp_in_tmp809;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp809;
}
tmp809[i0] = (role == SERVER) ? __tmp_in_tmp809 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp810 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp810 at (11357,1-11357,47) */
uint64_t __tmp_in_tmp810;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp810;
}
tmp810[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp810 : 0;
}
}
}
}

vector < uint64_t > tmp811 = make_vector<uint64_t>( (int32_t)1568);
/* Variable to read the clear value corresponding to the input variable tmp811 at (11360,1-11360,38) */
uint64_t __tmp_in_tmp811;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1568; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp811;
}
tmp811[i0] = (role == SERVER) ? __tmp_in_tmp811 : 0;
}

vector < uint64_t > tmp812 = make_vector<uint64_t>( (int32_t)1568);
/* Variable to read the clear value corresponding to the input variable tmp812 at (11363,1-11363,38) */
uint64_t __tmp_in_tmp812;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1568; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp812;
}
tmp812[i0] = (role == SERVER) ? __tmp_in_tmp812 : 0;
}

vector < uint64_t > tmp813 = make_vector<uint64_t>( (int32_t)1568);
/* Variable to read the clear value corresponding to the input variable tmp813 at (11366,1-11366,38) */
uint64_t __tmp_in_tmp813;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1568; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp813;
}
tmp813[i0] = (role == SERVER) ? __tmp_in_tmp813 : 0;
}

vector < uint64_t > tmp814 = make_vector<uint64_t>( (int32_t)1568);
/* Variable to read the clear value corresponding to the input variable tmp814 at (11369,1-11369,38) */
uint64_t __tmp_in_tmp814;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1568; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp814;
}
tmp814[i0] = (role == SERVER) ? __tmp_in_tmp814 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp815 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1568,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp815 at (11372,1-11372,49) */
uint64_t __tmp_in_tmp815;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1568; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp815;
}
tmp815[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp815 : 0;
}
}
}
}

vector < uint64_t > tmp816 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp816 at (11375,1-11375,37) */
uint64_t __tmp_in_tmp816;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp816;
}
tmp816[i0] = (role == SERVER) ? __tmp_in_tmp816 : 0;
}

vector < uint64_t > tmp817 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp817 at (11378,1-11378,37) */
uint64_t __tmp_in_tmp817;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp817;
}
tmp817[i0] = (role == SERVER) ? __tmp_in_tmp817 : 0;
}

vector < uint64_t > tmp818 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp818 at (11381,1-11381,37) */
uint64_t __tmp_in_tmp818;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp818;
}
tmp818[i0] = (role == SERVER) ? __tmp_in_tmp818 : 0;
}

vector < uint64_t > tmp819 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp819 at (11384,1-11384,37) */
uint64_t __tmp_in_tmp819;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp819;
}
tmp819[i0] = (role == SERVER) ? __tmp_in_tmp819 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp820 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp820 at (11387,1-11387,47) */
uint64_t __tmp_in_tmp820;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp820;
}
tmp820[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp820 : 0;
}
}
}
}

vector < uint64_t > tmp821 = make_vector<uint64_t>( (int32_t)1600);
/* Variable to read the clear value corresponding to the input variable tmp821 at (11390,1-11390,38) */
uint64_t __tmp_in_tmp821;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1600; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp821;
}
tmp821[i0] = (role == SERVER) ? __tmp_in_tmp821 : 0;
}

vector < uint64_t > tmp822 = make_vector<uint64_t>( (int32_t)1600);
/* Variable to read the clear value corresponding to the input variable tmp822 at (11393,1-11393,38) */
uint64_t __tmp_in_tmp822;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1600; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp822;
}
tmp822[i0] = (role == SERVER) ? __tmp_in_tmp822 : 0;
}

vector < uint64_t > tmp823 = make_vector<uint64_t>( (int32_t)1600);
/* Variable to read the clear value corresponding to the input variable tmp823 at (11396,1-11396,38) */
uint64_t __tmp_in_tmp823;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1600; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp823;
}
tmp823[i0] = (role == SERVER) ? __tmp_in_tmp823 : 0;
}

vector < uint64_t > tmp824 = make_vector<uint64_t>( (int32_t)1600);
/* Variable to read the clear value corresponding to the input variable tmp824 at (11399,1-11399,38) */
uint64_t __tmp_in_tmp824;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1600; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp824;
}
tmp824[i0] = (role == SERVER) ? __tmp_in_tmp824 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp825 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1600,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp825 at (11402,1-11402,49) */
uint64_t __tmp_in_tmp825;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1600; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp825;
}
tmp825[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp825 : 0;
}
}
}
}

vector < uint64_t > tmp826 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp826 at (11405,1-11405,37) */
uint64_t __tmp_in_tmp826;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp826;
}
tmp826[i0] = (role == SERVER) ? __tmp_in_tmp826 : 0;
}

vector < uint64_t > tmp827 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp827 at (11408,1-11408,37) */
uint64_t __tmp_in_tmp827;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp827;
}
tmp827[i0] = (role == SERVER) ? __tmp_in_tmp827 : 0;
}

vector < uint64_t > tmp828 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp828 at (11411,1-11411,37) */
uint64_t __tmp_in_tmp828;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp828;
}
tmp828[i0] = (role == SERVER) ? __tmp_in_tmp828 : 0;
}

vector < uint64_t > tmp829 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp829 at (11414,1-11414,37) */
uint64_t __tmp_in_tmp829;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp829;
}
tmp829[i0] = (role == SERVER) ? __tmp_in_tmp829 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp830 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp830 at (11417,1-11417,47) */
uint64_t __tmp_in_tmp830;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp830;
}
tmp830[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp830 : 0;
}
}
}
}

vector < uint64_t > tmp831 = make_vector<uint64_t>( (int32_t)1632);
/* Variable to read the clear value corresponding to the input variable tmp831 at (11420,1-11420,38) */
uint64_t __tmp_in_tmp831;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1632; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp831;
}
tmp831[i0] = (role == SERVER) ? __tmp_in_tmp831 : 0;
}

vector < uint64_t > tmp832 = make_vector<uint64_t>( (int32_t)1632);
/* Variable to read the clear value corresponding to the input variable tmp832 at (11423,1-11423,38) */
uint64_t __tmp_in_tmp832;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1632; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp832;
}
tmp832[i0] = (role == SERVER) ? __tmp_in_tmp832 : 0;
}

vector < uint64_t > tmp833 = make_vector<uint64_t>( (int32_t)1632);
/* Variable to read the clear value corresponding to the input variable tmp833 at (11426,1-11426,38) */
uint64_t __tmp_in_tmp833;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1632; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp833;
}
tmp833[i0] = (role == SERVER) ? __tmp_in_tmp833 : 0;
}

vector < uint64_t > tmp834 = make_vector<uint64_t>( (int32_t)1632);
/* Variable to read the clear value corresponding to the input variable tmp834 at (11429,1-11429,38) */
uint64_t __tmp_in_tmp834;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1632; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp834;
}
tmp834[i0] = (role == SERVER) ? __tmp_in_tmp834 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp835 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1632,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp835 at (11432,1-11432,49) */
uint64_t __tmp_in_tmp835;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1632; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp835;
}
tmp835[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp835 : 0;
}
}
}
}

vector < uint64_t > tmp836 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp836 at (11435,1-11435,37) */
uint64_t __tmp_in_tmp836;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp836;
}
tmp836[i0] = (role == SERVER) ? __tmp_in_tmp836 : 0;
}

vector < uint64_t > tmp837 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp837 at (11438,1-11438,37) */
uint64_t __tmp_in_tmp837;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp837;
}
tmp837[i0] = (role == SERVER) ? __tmp_in_tmp837 : 0;
}

vector < uint64_t > tmp838 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp838 at (11441,1-11441,37) */
uint64_t __tmp_in_tmp838;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp838;
}
tmp838[i0] = (role == SERVER) ? __tmp_in_tmp838 : 0;
}

vector < uint64_t > tmp839 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp839 at (11444,1-11444,37) */
uint64_t __tmp_in_tmp839;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp839;
}
tmp839[i0] = (role == SERVER) ? __tmp_in_tmp839 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp840 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp840 at (11447,1-11447,47) */
uint64_t __tmp_in_tmp840;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)32; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp840;
}
tmp840[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp840 : 0;
}
}
}
}

vector < uint64_t > tmp841 = make_vector<uint64_t>( (int32_t)1664);
/* Variable to read the clear value corresponding to the input variable tmp841 at (11450,1-11450,38) */
uint64_t __tmp_in_tmp841;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1664; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp841;
}
tmp841[i0] = (role == SERVER) ? __tmp_in_tmp841 : 0;
}

vector < uint64_t > tmp842 = make_vector<uint64_t>( (int32_t)1664);
/* Variable to read the clear value corresponding to the input variable tmp842 at (11453,1-11453,38) */
uint64_t __tmp_in_tmp842;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1664; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp842;
}
tmp842[i0] = (role == SERVER) ? __tmp_in_tmp842 : 0;
}

vector < uint64_t > tmp843 = make_vector<uint64_t>( (int32_t)1664);
/* Variable to read the clear value corresponding to the input variable tmp843 at (11456,1-11456,38) */
uint64_t __tmp_in_tmp843;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1664; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp843;
}
tmp843[i0] = (role == SERVER) ? __tmp_in_tmp843 : 0;
}

vector < uint64_t > tmp844 = make_vector<uint64_t>( (int32_t)1664);
/* Variable to read the clear value corresponding to the input variable tmp844 at (11459,1-11459,38) */
uint64_t __tmp_in_tmp844;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1664; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp844;
}
tmp844[i0] = (role == SERVER) ? __tmp_in_tmp844 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp845 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1664,  (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp845 at (11462,1-11462,50) */
uint64_t __tmp_in_tmp845;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1664; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1000; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp845;
}
tmp845[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp845 : 0;
}
}
}
}

vector < uint64_t > tmp846 = make_vector<uint64_t>( (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp846 at (11465,1-11465,38) */
uint64_t __tmp_in_tmp846;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1000; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp846;
}
tmp846[i0] = (role == SERVER) ? __tmp_in_tmp846 : 0;
}
StartComputation();

vector < vector < vector < vector < uint64_t > > > > tmp847 = make_vector<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3,  (int32_t)7,  (int32_t)7,  (int32_t)64,  (int32_t)2,  (int32_t)3,  (int32_t)2,  (int32_t)3,  (int32_t)2,  (int32_t)2, tmp0, tmp1, tmp847);
ClearMemSecret4( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64, tmp1);
ClearMemSecret4( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3, tmp0);

vector < vector < vector < vector < uint64_t > > > > tmp850 = make_vector<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp847,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp847, tmp2, tmp3,  (int32_t)0,  (int32_t)12, tmp850);
ClearMemSecret1( (int32_t)64, tmp3);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp847);
ClearMemSecret1( (int32_t)64, tmp2);

vector < vector < vector < vector < uint64_t > > > > tmp854 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
MaxPool( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)1,  (int32_t)0,  (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp850, tmp854);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp850);

vector < vector < vector < vector < uint64_t > > > > tmp856 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp854, tmp856,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp854);

vector < vector < vector < vector < uint64_t > > > > tmp858 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp856, tmp6, tmp7,  (int32_t)0,  (int32_t)12, tmp858);
ClearMemSecret1( (int32_t)64, tmp6);
ClearMemSecret1( (int32_t)64, tmp7);

vector < vector < vector < vector < uint64_t > > > > tmp861 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp858, tmp861,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp858);

vector < vector < vector < vector < uint64_t > > > > tmp863 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp861, tmp10, tmp863);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp861);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)128, tmp10);

vector < vector < vector < vector < uint64_t > > > > tmp866 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp863,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp863, tmp11, tmp12,  (int32_t)0,  (int32_t)12, tmp866);
ClearMemSecret1( (int32_t)128, tmp12);
ClearMemSecret1( (int32_t)128, tmp11);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp863);

vector < vector < vector < vector < uint64_t > > > > tmp870 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp866, tmp870,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp866);

vector < vector < vector < vector < uint64_t > > > > tmp872 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp870, tmp15, tmp872);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp15);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp870);

int32_t tmp875 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp876 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp872,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp856,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp872, tmp875, tmp876);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp872);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp856);

vector < vector < vector < vector < uint64_t > > > > tmp880 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp876, tmp16, tmp17,  (int32_t)0,  (int32_t)12, tmp880);
ClearMemSecret1( (int32_t)96, tmp17);
ClearMemSecret1( (int32_t)96, tmp16);

vector < vector < vector < vector < uint64_t > > > > tmp883 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp880, tmp883,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp880);

vector < vector < vector < vector < uint64_t > > > > tmp885 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp883, tmp20, tmp885);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp883);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)128, tmp20);

vector < vector < vector < vector < uint64_t > > > > tmp888 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp885,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp885, tmp21, tmp22,  (int32_t)0,  (int32_t)12, tmp888);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp885);
ClearMemSecret1( (int32_t)128, tmp22);
ClearMemSecret1( (int32_t)128, tmp21);

vector < vector < vector < vector < uint64_t > > > > tmp892 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp888, tmp892,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp888);

vector < vector < vector < vector < uint64_t > > > > tmp894 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp892, tmp25, tmp894);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp892);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp25);

int32_t tmp897 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp898 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp894,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp876,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp894, tmp897, tmp898);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp894);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)96, tmp876);

vector < vector < vector < vector < uint64_t > > > > tmp902 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp898, tmp26, tmp27,  (int32_t)0,  (int32_t)12, tmp902);
ClearMemSecret1( (int32_t)128, tmp27);
ClearMemSecret1( (int32_t)128, tmp26);

vector < vector < vector < vector < uint64_t > > > > tmp905 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp902, tmp905,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp902);

vector < vector < vector < vector < uint64_t > > > > tmp907 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp905, tmp30, tmp907);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128, tmp30);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp905);

vector < vector < vector < vector < uint64_t > > > > tmp910 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp907,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp907, tmp31, tmp32,  (int32_t)0,  (int32_t)12, tmp910);
ClearMemSecret1( (int32_t)128, tmp31);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp907);
ClearMemSecret1( (int32_t)128, tmp32);

vector < vector < vector < vector < uint64_t > > > > tmp914 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp910, tmp914,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp910);

vector < vector < vector < vector < uint64_t > > > > tmp916 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp914, tmp35, tmp916);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp35);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp914);

int32_t tmp919 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp920 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp916,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp898,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp916, tmp919, tmp920);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp916);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp898);

vector < vector < vector < vector < uint64_t > > > > tmp924 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp920, tmp36, tmp37,  (int32_t)0,  (int32_t)12, tmp924);
ClearMemSecret1( (int32_t)160, tmp36);
ClearMemSecret1( (int32_t)160, tmp37);

vector < vector < vector < vector < uint64_t > > > > tmp927 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp924, tmp927,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp924);

vector < vector < vector < vector < uint64_t > > > > tmp929 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp927, tmp40, tmp929);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp927);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128, tmp40);

vector < vector < vector < vector < uint64_t > > > > tmp932 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp929,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp929, tmp41, tmp42,  (int32_t)0,  (int32_t)12, tmp932);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp929);
ClearMemSecret1( (int32_t)128, tmp42);
ClearMemSecret1( (int32_t)128, tmp41);

vector < vector < vector < vector < uint64_t > > > > tmp936 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp932, tmp936,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp932);

vector < vector < vector < vector < uint64_t > > > > tmp938 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp936, tmp45, tmp938);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp936);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp45);

int32_t tmp941 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp942 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp938,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp920,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp938, tmp941, tmp942);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp938);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)160, tmp920);

vector < vector < vector < vector < uint64_t > > > > tmp946 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp942, tmp46, tmp47,  (int32_t)0,  (int32_t)12, tmp946);
ClearMemSecret1( (int32_t)192, tmp47);
ClearMemSecret1( (int32_t)192, tmp46);

vector < vector < vector < vector < uint64_t > > > > tmp949 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp946, tmp949,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp946);

vector < vector < vector < vector < uint64_t > > > > tmp951 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp949, tmp50, tmp951);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128, tmp50);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp949);

vector < vector < vector < vector < uint64_t > > > > tmp954 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp951,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp951, tmp51, tmp52,  (int32_t)0,  (int32_t)12, tmp954);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp951);
ClearMemSecret1( (int32_t)128, tmp52);
ClearMemSecret1( (int32_t)128, tmp51);

vector < vector < vector < vector < uint64_t > > > > tmp958 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp954, tmp958,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp954);

vector < vector < vector < vector < uint64_t > > > > tmp960 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp958, tmp55, tmp960);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp958);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp55);

int32_t tmp963 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp964 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp960,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp942,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp960, tmp963, tmp964);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp960);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)192, tmp942);

vector < vector < vector < vector < uint64_t > > > > tmp968 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp964, tmp56, tmp57,  (int32_t)0,  (int32_t)12, tmp968);
ClearMemSecret1( (int32_t)224, tmp56);
ClearMemSecret1( (int32_t)224, tmp57);

vector < vector < vector < vector < uint64_t > > > > tmp971 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp968, tmp971,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp968);

vector < vector < vector < vector < uint64_t > > > > tmp973 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp971, tmp60, tmp973);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp971);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128, tmp60);

vector < vector < vector < vector < uint64_t > > > > tmp976 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp973,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp973, tmp61, tmp62,  (int32_t)0,  (int32_t)12, tmp976);
ClearMemSecret1( (int32_t)128, tmp62);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp973);
ClearMemSecret1( (int32_t)128, tmp61);

vector < vector < vector < vector < uint64_t > > > > tmp980 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp976, tmp980,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp976);

vector < vector < vector < vector < uint64_t > > > > tmp982 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp980, tmp65, tmp982);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp65);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp980);

int32_t tmp985 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp986 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp982,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp964,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp982, tmp985, tmp986);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)224, tmp964);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)32, tmp982);

vector < vector < vector < vector < uint64_t > > > > tmp990 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp986, tmp66, tmp67,  (int32_t)0,  (int32_t)12, tmp990);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp986);
ClearMemSecret1( (int32_t)256, tmp66);
ClearMemSecret1( (int32_t)256, tmp67);

vector < vector < vector < vector < uint64_t > > > > tmp994 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp990, tmp994,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp990);

vector < vector < vector < vector < uint64_t > > > > tmp996 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp994, tmp70, tmp996);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp70);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp994);

vector < vector < vector < vector < uint64_t > > > > tmp999 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
AvgPool( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp996, tmp999);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp996);

vector < vector < vector < vector < uint64_t > > > > tmp1001 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp999,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp999, tmp71, tmp72,  (int32_t)0,  (int32_t)12, tmp1001);
ClearMemSecret1( (int32_t)128, tmp72);
ClearMemSecret1( (int32_t)128, tmp71);

vector < vector < vector < vector < uint64_t > > > > tmp1004 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1001, tmp1004,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1001);

vector < vector < vector < vector < uint64_t > > > > tmp1006 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1004, tmp75, tmp1006);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)128, tmp75);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1004);

vector < vector < vector < vector < uint64_t > > > > tmp1009 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1006,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1006, tmp76, tmp77,  (int32_t)0,  (int32_t)12, tmp1009);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1006);
ClearMemSecret1( (int32_t)128, tmp77);
ClearMemSecret1( (int32_t)128, tmp76);

vector < vector < vector < vector < uint64_t > > > > tmp1013 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1009, tmp1013,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1009);

vector < vector < vector < vector < uint64_t > > > > tmp1015 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1013, tmp80, tmp1015);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1013);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp80);

int32_t tmp1018 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1019 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1015,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp999,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1015, tmp1018, tmp1019);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1015);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp999);

vector < vector < vector < vector < uint64_t > > > > tmp1023 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1019, tmp81, tmp82,  (int32_t)0,  (int32_t)12, tmp1023);
ClearMemSecret1( (int32_t)160, tmp82);
ClearMemSecret1( (int32_t)160, tmp81);

vector < vector < vector < vector < uint64_t > > > > tmp1026 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1023, tmp1026,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1023);

vector < vector < vector < vector < uint64_t > > > > tmp1028 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1026, tmp85, tmp1028);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1026);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)160,  (int32_t)128, tmp85);

vector < vector < vector < vector < uint64_t > > > > tmp1031 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1028,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1028, tmp86, tmp87,  (int32_t)0,  (int32_t)12, tmp1031);
ClearMemSecret1( (int32_t)128, tmp87);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1028);
ClearMemSecret1( (int32_t)128, tmp86);

vector < vector < vector < vector < uint64_t > > > > tmp1035 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1031, tmp1035,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1031);

vector < vector < vector < vector < uint64_t > > > > tmp1037 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1035, tmp90, tmp1037);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp90);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1035);

int32_t tmp1040 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1041 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1037,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1019,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1037, tmp1040, tmp1041);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)160, tmp1019);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1037);

vector < vector < vector < vector < uint64_t > > > > tmp1045 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1041, tmp91, tmp92,  (int32_t)0,  (int32_t)12, tmp1045);
ClearMemSecret1( (int32_t)192, tmp92);
ClearMemSecret1( (int32_t)192, tmp91);

vector < vector < vector < vector < uint64_t > > > > tmp1048 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1045, tmp1048,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1045);

vector < vector < vector < vector < uint64_t > > > > tmp1050 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1048, tmp95, tmp1050);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)128, tmp95);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1048);

vector < vector < vector < vector < uint64_t > > > > tmp1053 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1050,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1050, tmp96, tmp97,  (int32_t)0,  (int32_t)12, tmp1053);
ClearMemSecret1( (int32_t)128, tmp97);
ClearMemSecret1( (int32_t)128, tmp96);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1050);

vector < vector < vector < vector < uint64_t > > > > tmp1057 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1053, tmp1057,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1053);

vector < vector < vector < vector < uint64_t > > > > tmp1059 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1057, tmp100, tmp1059);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1057);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp100);

int32_t tmp1062 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1063 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1059,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1041,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1059, tmp1062, tmp1063);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1059);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)192, tmp1041);

vector < vector < vector < vector < uint64_t > > > > tmp1067 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1063, tmp101, tmp102,  (int32_t)0,  (int32_t)12, tmp1067);
ClearMemSecret1( (int32_t)224, tmp102);
ClearMemSecret1( (int32_t)224, tmp101);

vector < vector < vector < vector < uint64_t > > > > tmp1070 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1067, tmp1070,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1067);

vector < vector < vector < vector < uint64_t > > > > tmp1072 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1070, tmp105, tmp1072);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1070);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)224,  (int32_t)128, tmp105);

vector < vector < vector < vector < uint64_t > > > > tmp1075 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1072,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1072, tmp106, tmp107,  (int32_t)0,  (int32_t)12, tmp1075);
ClearMemSecret1( (int32_t)128, tmp106);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1072);
ClearMemSecret1( (int32_t)128, tmp107);

vector < vector < vector < vector < uint64_t > > > > tmp1079 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1075, tmp1079,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1075);

vector < vector < vector < vector < uint64_t > > > > tmp1081 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1079, tmp110, tmp1081);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp110);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1079);

int32_t tmp1084 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1085 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1081,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1063,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1081, tmp1084, tmp1085);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)224, tmp1063);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1081);

vector < vector < vector < vector < uint64_t > > > > tmp1089 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1085, tmp111, tmp112,  (int32_t)0,  (int32_t)12, tmp1089);
ClearMemSecret1( (int32_t)256, tmp111);
ClearMemSecret1( (int32_t)256, tmp112);

vector < vector < vector < vector < uint64_t > > > > tmp1092 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1089, tmp1092,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1089);

vector < vector < vector < vector < uint64_t > > > > tmp1094 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1092, tmp115, tmp1094);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp115);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1092);

vector < vector < vector < vector < uint64_t > > > > tmp1097 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1094,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1094, tmp116, tmp117,  (int32_t)0,  (int32_t)12, tmp1097);
ClearMemSecret1( (int32_t)128, tmp116);
ClearMemSecret1( (int32_t)128, tmp117);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1094);

vector < vector < vector < vector < uint64_t > > > > tmp1101 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1097, tmp1101,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1097);

vector < vector < vector < vector < uint64_t > > > > tmp1103 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1101, tmp120, tmp1103);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp120);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1101);

int32_t tmp1106 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1107 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1103,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1085,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1103, tmp1106, tmp1107);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1103);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1085);

vector < vector < vector < vector < uint64_t > > > > tmp1111 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1107, tmp121, tmp122,  (int32_t)0,  (int32_t)12, tmp1111);
ClearMemSecret1( (int32_t)288, tmp121);
ClearMemSecret1( (int32_t)288, tmp122);

vector < vector < vector < vector < uint64_t > > > > tmp1114 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1111, tmp1114,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1111);

vector < vector < vector < vector < uint64_t > > > > tmp1116 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1114, tmp125, tmp1116);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128, tmp125);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1114);

vector < vector < vector < vector < uint64_t > > > > tmp1119 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1116,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1116, tmp126, tmp127,  (int32_t)0,  (int32_t)12, tmp1119);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1116);
ClearMemSecret1( (int32_t)128, tmp127);
ClearMemSecret1( (int32_t)128, tmp126);

vector < vector < vector < vector < uint64_t > > > > tmp1123 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1119, tmp1123,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1119);

vector < vector < vector < vector < uint64_t > > > > tmp1125 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1123, tmp130, tmp1125);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp130);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1123);

int32_t tmp1128 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1129 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1125,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1107,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1125, tmp1128, tmp1129);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1125);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)288, tmp1107);

vector < vector < vector < vector < uint64_t > > > > tmp1133 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1129, tmp131, tmp132,  (int32_t)0,  (int32_t)12, tmp1133);
ClearMemSecret1( (int32_t)320, tmp131);
ClearMemSecret1( (int32_t)320, tmp132);

vector < vector < vector < vector < uint64_t > > > > tmp1136 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1133, tmp1136,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1133);

vector < vector < vector < vector < uint64_t > > > > tmp1138 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1136, tmp135, tmp1138);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128, tmp135);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1136);

vector < vector < vector < vector < uint64_t > > > > tmp1141 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1138,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1138, tmp136, tmp137,  (int32_t)0,  (int32_t)12, tmp1141);
ClearMemSecret1( (int32_t)128, tmp137);
ClearMemSecret1( (int32_t)128, tmp136);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1138);

vector < vector < vector < vector < uint64_t > > > > tmp1145 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1141, tmp1145,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1141);

vector < vector < vector < vector < uint64_t > > > > tmp1147 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1145, tmp140, tmp1147);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1145);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp140);

int32_t tmp1150 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1151 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1147,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1129,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1147, tmp1150, tmp1151);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1147);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)320, tmp1129);

vector < vector < vector < vector < uint64_t > > > > tmp1155 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1151, tmp141, tmp142,  (int32_t)0,  (int32_t)12, tmp1155);
ClearMemSecret1( (int32_t)352, tmp142);
ClearMemSecret1( (int32_t)352, tmp141);

vector < vector < vector < vector < uint64_t > > > > tmp1158 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1155, tmp1158,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1155);

vector < vector < vector < vector < uint64_t > > > > tmp1160 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1158, tmp145, tmp1160);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128, tmp145);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1158);

vector < vector < vector < vector < uint64_t > > > > tmp1163 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1160,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1160, tmp146, tmp147,  (int32_t)0,  (int32_t)12, tmp1163);
ClearMemSecret1( (int32_t)128, tmp147);
ClearMemSecret1( (int32_t)128, tmp146);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1160);

vector < vector < vector < vector < uint64_t > > > > tmp1167 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1163, tmp1167,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1163);

vector < vector < vector < vector < uint64_t > > > > tmp1169 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1167, tmp150, tmp1169);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1167);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp150);

int32_t tmp1172 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1173 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1169,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1151,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1169, tmp1172, tmp1173);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1169);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)352, tmp1151);

vector < vector < vector < vector < uint64_t > > > > tmp1177 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1173, tmp151, tmp152,  (int32_t)0,  (int32_t)12, tmp1177);
ClearMemSecret1( (int32_t)384, tmp152);
ClearMemSecret1( (int32_t)384, tmp151);

vector < vector < vector < vector < uint64_t > > > > tmp1180 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1177, tmp1180,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1177);

vector < vector < vector < vector < uint64_t > > > > tmp1182 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1180, tmp155, tmp1182);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128, tmp155);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1180);

vector < vector < vector < vector < uint64_t > > > > tmp1185 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1182,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1182, tmp156, tmp157,  (int32_t)0,  (int32_t)12, tmp1185);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1182);
ClearMemSecret1( (int32_t)128, tmp157);
ClearMemSecret1( (int32_t)128, tmp156);

vector < vector < vector < vector < uint64_t > > > > tmp1189 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1185, tmp1189,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1185);

vector < vector < vector < vector < uint64_t > > > > tmp1191 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1189, tmp160, tmp1191);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1189);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp160);

int32_t tmp1194 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1195 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1191,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1173,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1191, tmp1194, tmp1195);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1191);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)384, tmp1173);

vector < vector < vector < vector < uint64_t > > > > tmp1199 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1195, tmp161, tmp162,  (int32_t)0,  (int32_t)12, tmp1199);
ClearMemSecret1( (int32_t)416, tmp161);
ClearMemSecret1( (int32_t)416, tmp162);

vector < vector < vector < vector < uint64_t > > > > tmp1202 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1199, tmp1202,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1199);

vector < vector < vector < vector < uint64_t > > > > tmp1204 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1202, tmp165, tmp1204);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128, tmp165);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1202);

vector < vector < vector < vector < uint64_t > > > > tmp1207 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1204,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1204, tmp166, tmp167,  (int32_t)0,  (int32_t)12, tmp1207);
ClearMemSecret1( (int32_t)128, tmp166);
ClearMemSecret1( (int32_t)128, tmp167);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1204);

vector < vector < vector < vector < uint64_t > > > > tmp1211 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1207, tmp1211,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1207);

vector < vector < vector < vector < uint64_t > > > > tmp1213 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1211, tmp170, tmp1213);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1211);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp170);

int32_t tmp1216 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1217 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1213,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1195,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1213, tmp1216, tmp1217);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1213);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)416, tmp1195);

vector < vector < vector < vector < uint64_t > > > > tmp1221 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1217, tmp171, tmp172,  (int32_t)0,  (int32_t)12, tmp1221);
ClearMemSecret1( (int32_t)448, tmp171);
ClearMemSecret1( (int32_t)448, tmp172);

vector < vector < vector < vector < uint64_t > > > > tmp1224 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1221, tmp1224,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1221);

vector < vector < vector < vector < uint64_t > > > > tmp1226 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1224, tmp175, tmp1226);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128, tmp175);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1224);

vector < vector < vector < vector < uint64_t > > > > tmp1229 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1226,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1226, tmp176, tmp177,  (int32_t)0,  (int32_t)12, tmp1229);
ClearMemSecret1( (int32_t)128, tmp176);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1226);
ClearMemSecret1( (int32_t)128, tmp177);

vector < vector < vector < vector < uint64_t > > > > tmp1233 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1229, tmp1233,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1229);

vector < vector < vector < vector < uint64_t > > > > tmp1235 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1233, tmp180, tmp1235);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1233);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp180);

int32_t tmp1238 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1239 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1235,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1217,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1235, tmp1238, tmp1239);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1235);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)448, tmp1217);

vector < vector < vector < vector < uint64_t > > > > tmp1243 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1239, tmp181, tmp182,  (int32_t)0,  (int32_t)12, tmp1243);
ClearMemSecret1( (int32_t)480, tmp181);
ClearMemSecret1( (int32_t)480, tmp182);

vector < vector < vector < vector < uint64_t > > > > tmp1246 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1243, tmp1246,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1243);

vector < vector < vector < vector < uint64_t > > > > tmp1248 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1246, tmp185, tmp1248);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128, tmp185);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1246);

vector < vector < vector < vector < uint64_t > > > > tmp1251 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1248,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1248, tmp186, tmp187,  (int32_t)0,  (int32_t)12, tmp1251);
ClearMemSecret1( (int32_t)128, tmp187);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1248);
ClearMemSecret1( (int32_t)128, tmp186);

vector < vector < vector < vector < uint64_t > > > > tmp1255 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1251, tmp1255,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1251);

vector < vector < vector < vector < uint64_t > > > > tmp1257 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1255, tmp190, tmp1257);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp190);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp1255);

int32_t tmp1260 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1261 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1257,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1239,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1257, tmp1260, tmp1261);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)480, tmp1239);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)32, tmp1257);

vector < vector < vector < vector < uint64_t > > > > tmp1265 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1261, tmp191, tmp192,  (int32_t)0,  (int32_t)12, tmp1265);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1261);
ClearMemSecret1( (int32_t)512, tmp191);
ClearMemSecret1( (int32_t)512, tmp192);

vector < vector < vector < vector < uint64_t > > > > tmp1269 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1265, tmp1269,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1265);

vector < vector < vector < vector < uint64_t > > > > tmp1271 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1269, tmp195, tmp1271);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256, tmp195);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp1269);

vector < vector < vector < vector < uint64_t > > > > tmp1274 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
AvgPool( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1271, tmp1274);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp1271);

vector < vector < vector < vector < uint64_t > > > > tmp1276 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1274,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1274, tmp196, tmp197,  (int32_t)0,  (int32_t)12, tmp1276);
ClearMemSecret1( (int32_t)256, tmp196);
ClearMemSecret1( (int32_t)256, tmp197);

vector < vector < vector < vector < uint64_t > > > > tmp1279 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1276, tmp1279,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1276);

vector < vector < vector < vector < uint64_t > > > > tmp1281 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1279, tmp200, tmp1281);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1279);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp200);

vector < vector < vector < vector < uint64_t > > > > tmp1284 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1281,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1281, tmp201, tmp202,  (int32_t)0,  (int32_t)12, tmp1284);
ClearMemSecret1( (int32_t)128, tmp201);
ClearMemSecret1( (int32_t)128, tmp202);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1281);

vector < vector < vector < vector < uint64_t > > > > tmp1288 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1284, tmp1288,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1284);

vector < vector < vector < vector < uint64_t > > > > tmp1290 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1288, tmp205, tmp1290);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1288);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp205);

int32_t tmp1293 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1294 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1290,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1274,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1290, tmp1293, tmp1294);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp1274);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1290);

vector < vector < vector < vector < uint64_t > > > > tmp1298 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1294, tmp206, tmp207,  (int32_t)0,  (int32_t)12, tmp1298);
ClearMemSecret1( (int32_t)288, tmp206);
ClearMemSecret1( (int32_t)288, tmp207);

vector < vector < vector < vector < uint64_t > > > > tmp1301 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1298, tmp1301,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1298);

vector < vector < vector < vector < uint64_t > > > > tmp1303 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1301, tmp210, tmp1303);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)288,  (int32_t)128, tmp210);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1301);

vector < vector < vector < vector < uint64_t > > > > tmp1306 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1303,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1303, tmp211, tmp212,  (int32_t)0,  (int32_t)12, tmp1306);
ClearMemSecret1( (int32_t)128, tmp212);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1303);
ClearMemSecret1( (int32_t)128, tmp211);

vector < vector < vector < vector < uint64_t > > > > tmp1310 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1306, tmp1310,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1306);

vector < vector < vector < vector < uint64_t > > > > tmp1312 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1310, tmp215, tmp1312);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1310);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp215);

int32_t tmp1315 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1316 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1312,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1294,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1312, tmp1315, tmp1316);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1312);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)288, tmp1294);

vector < vector < vector < vector < uint64_t > > > > tmp1320 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1316, tmp216, tmp217,  (int32_t)0,  (int32_t)12, tmp1320);
ClearMemSecret1( (int32_t)320, tmp217);
ClearMemSecret1( (int32_t)320, tmp216);

vector < vector < vector < vector < uint64_t > > > > tmp1323 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1320, tmp1323,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1320);

vector < vector < vector < vector < uint64_t > > > > tmp1325 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1323, tmp220, tmp1325);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1323);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)128, tmp220);

vector < vector < vector < vector < uint64_t > > > > tmp1328 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1325,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1325, tmp221, tmp222,  (int32_t)0,  (int32_t)12, tmp1328);
ClearMemSecret1( (int32_t)128, tmp222);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1325);
ClearMemSecret1( (int32_t)128, tmp221);

vector < vector < vector < vector < uint64_t > > > > tmp1332 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1328, tmp1332,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1328);

vector < vector < vector < vector < uint64_t > > > > tmp1334 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1332, tmp225, tmp1334);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1332);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp225);

int32_t tmp1337 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1338 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1334,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1316,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1334, tmp1337, tmp1338);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1334);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)320, tmp1316);

vector < vector < vector < vector < uint64_t > > > > tmp1342 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1338, tmp226, tmp227,  (int32_t)0,  (int32_t)12, tmp1342);
ClearMemSecret1( (int32_t)352, tmp226);
ClearMemSecret1( (int32_t)352, tmp227);

vector < vector < vector < vector < uint64_t > > > > tmp1345 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1342, tmp1345,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1342);

vector < vector < vector < vector < uint64_t > > > > tmp1347 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1345, tmp230, tmp1347);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)352,  (int32_t)128, tmp230);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1345);

vector < vector < vector < vector < uint64_t > > > > tmp1350 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1347,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1347, tmp231, tmp232,  (int32_t)0,  (int32_t)12, tmp1350);
ClearMemSecret1( (int32_t)128, tmp232);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1347);
ClearMemSecret1( (int32_t)128, tmp231);

vector < vector < vector < vector < uint64_t > > > > tmp1354 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1350, tmp1354,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1350);

vector < vector < vector < vector < uint64_t > > > > tmp1356 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1354, tmp235, tmp1356);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp235);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1354);

int32_t tmp1359 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1360 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1356,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1338,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1356, tmp1359, tmp1360);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)352, tmp1338);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1356);

vector < vector < vector < vector < uint64_t > > > > tmp1364 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1360, tmp236, tmp237,  (int32_t)0,  (int32_t)12, tmp1364);
ClearMemSecret1( (int32_t)384, tmp237);
ClearMemSecret1( (int32_t)384, tmp236);

vector < vector < vector < vector < uint64_t > > > > tmp1367 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1364, tmp1367,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1364);

vector < vector < vector < vector < uint64_t > > > > tmp1369 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1367, tmp240, tmp1369);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1367);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)384,  (int32_t)128, tmp240);

vector < vector < vector < vector < uint64_t > > > > tmp1372 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1369,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1369, tmp241, tmp242,  (int32_t)0,  (int32_t)12, tmp1372);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1369);
ClearMemSecret1( (int32_t)128, tmp241);
ClearMemSecret1( (int32_t)128, tmp242);

vector < vector < vector < vector < uint64_t > > > > tmp1376 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1372, tmp1376,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1372);

vector < vector < vector < vector < uint64_t > > > > tmp1378 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1376, tmp245, tmp1378);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp245);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1376);

int32_t tmp1381 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1382 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1378,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1360,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1378, tmp1381, tmp1382);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)384, tmp1360);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1378);

vector < vector < vector < vector < uint64_t > > > > tmp1386 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1382, tmp246, tmp247,  (int32_t)0,  (int32_t)12, tmp1386);
ClearMemSecret1( (int32_t)416, tmp247);
ClearMemSecret1( (int32_t)416, tmp246);

vector < vector < vector < vector < uint64_t > > > > tmp1389 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1386, tmp1389,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1386);

vector < vector < vector < vector < uint64_t > > > > tmp1391 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1389, tmp250, tmp1391);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)416,  (int32_t)128, tmp250);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1389);

vector < vector < vector < vector < uint64_t > > > > tmp1394 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1391,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1391, tmp251, tmp252,  (int32_t)0,  (int32_t)12, tmp1394);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1391);
ClearMemSecret1( (int32_t)128, tmp251);
ClearMemSecret1( (int32_t)128, tmp252);

vector < vector < vector < vector < uint64_t > > > > tmp1398 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1394, tmp1398,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1394);

vector < vector < vector < vector < uint64_t > > > > tmp1400 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1398, tmp255, tmp1400);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1398);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp255);

int32_t tmp1403 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1404 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1400,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1382,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1400, tmp1403, tmp1404);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1400);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)416, tmp1382);

vector < vector < vector < vector < uint64_t > > > > tmp1408 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1404, tmp256, tmp257,  (int32_t)0,  (int32_t)12, tmp1408);
ClearMemSecret1( (int32_t)448, tmp257);
ClearMemSecret1( (int32_t)448, tmp256);

vector < vector < vector < vector < uint64_t > > > > tmp1411 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1408, tmp1411,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1408);

vector < vector < vector < vector < uint64_t > > > > tmp1413 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1411, tmp260, tmp1413);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1411);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)448,  (int32_t)128, tmp260);

vector < vector < vector < vector < uint64_t > > > > tmp1416 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1413,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1413, tmp261, tmp262,  (int32_t)0,  (int32_t)12, tmp1416);
ClearMemSecret1( (int32_t)128, tmp261);
ClearMemSecret1( (int32_t)128, tmp262);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1413);

vector < vector < vector < vector < uint64_t > > > > tmp1420 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1416, tmp1420,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1416);

vector < vector < vector < vector < uint64_t > > > > tmp1422 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1420, tmp265, tmp1422);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1420);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp265);

int32_t tmp1425 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1426 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1422,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1404,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1422, tmp1425, tmp1426);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)448, tmp1404);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1422);

vector < vector < vector < vector < uint64_t > > > > tmp1430 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1426, tmp266, tmp267,  (int32_t)0,  (int32_t)12, tmp1430);
ClearMemSecret1( (int32_t)480, tmp267);
ClearMemSecret1( (int32_t)480, tmp266);

vector < vector < vector < vector < uint64_t > > > > tmp1433 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1430, tmp1433,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1430);

vector < vector < vector < vector < uint64_t > > > > tmp1435 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1433, tmp270, tmp1435);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)128, tmp270);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1433);

vector < vector < vector < vector < uint64_t > > > > tmp1438 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1435,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1435, tmp271, tmp272,  (int32_t)0,  (int32_t)12, tmp1438);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1435);
ClearMemSecret1( (int32_t)128, tmp272);
ClearMemSecret1( (int32_t)128, tmp271);

vector < vector < vector < vector < uint64_t > > > > tmp1442 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1438, tmp1442,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1438);

vector < vector < vector < vector < uint64_t > > > > tmp1444 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1442, tmp275, tmp1444);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp275);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1442);

int32_t tmp1447 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1448 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1444,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1426,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1444, tmp1447, tmp1448);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1444);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp1426);

vector < vector < vector < vector < uint64_t > > > > tmp1452 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1448, tmp276, tmp277,  (int32_t)0,  (int32_t)12, tmp1452);
ClearMemSecret1( (int32_t)512, tmp276);
ClearMemSecret1( (int32_t)512, tmp277);

vector < vector < vector < vector < uint64_t > > > > tmp1455 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1452, tmp1455,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1452);

vector < vector < vector < vector < uint64_t > > > > tmp1457 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1455, tmp280, tmp1457);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1455);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp280);

vector < vector < vector < vector < uint64_t > > > > tmp1460 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1457,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1457, tmp281, tmp282,  (int32_t)0,  (int32_t)12, tmp1460);
ClearMemSecret1( (int32_t)128, tmp282);
ClearMemSecret1( (int32_t)128, tmp281);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1457);

vector < vector < vector < vector < uint64_t > > > > tmp1464 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1460, tmp1464,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1460);

vector < vector < vector < vector < uint64_t > > > > tmp1466 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1464, tmp285, tmp1466);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1464);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp285);

int32_t tmp1469 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1470 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1466,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1448,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1466, tmp1469, tmp1470);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp1448);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1466);

vector < vector < vector < vector < uint64_t > > > > tmp1474 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1470, tmp286, tmp287,  (int32_t)0,  (int32_t)12, tmp1474);
ClearMemSecret1( (int32_t)544, tmp286);
ClearMemSecret1( (int32_t)544, tmp287);

vector < vector < vector < vector < uint64_t > > > > tmp1477 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1474, tmp1477,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1474);

vector < vector < vector < vector < uint64_t > > > > tmp1479 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1477, tmp290, tmp1479);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)544,  (int32_t)128, tmp290);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1477);

vector < vector < vector < vector < uint64_t > > > > tmp1482 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1479,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1479, tmp291, tmp292,  (int32_t)0,  (int32_t)12, tmp1482);
ClearMemSecret1( (int32_t)128, tmp291);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1479);
ClearMemSecret1( (int32_t)128, tmp292);

vector < vector < vector < vector < uint64_t > > > > tmp1486 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1482, tmp1486,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1482);

vector < vector < vector < vector < uint64_t > > > > tmp1488 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1486, tmp295, tmp1488);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp295);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1486);

int32_t tmp1491 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1492 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1488,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1470,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1488, tmp1491, tmp1492);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)544, tmp1470);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1488);

vector < vector < vector < vector < uint64_t > > > > tmp1496 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1492, tmp296, tmp297,  (int32_t)0,  (int32_t)12, tmp1496);
ClearMemSecret1( (int32_t)576, tmp297);
ClearMemSecret1( (int32_t)576, tmp296);

vector < vector < vector < vector < uint64_t > > > > tmp1499 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1496, tmp1499,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1496);

vector < vector < vector < vector < uint64_t > > > > tmp1501 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1499, tmp300, tmp1501);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1499);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)128, tmp300);

vector < vector < vector < vector < uint64_t > > > > tmp1504 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1501,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1501, tmp301, tmp302,  (int32_t)0,  (int32_t)12, tmp1504);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1501);
ClearMemSecret1( (int32_t)128, tmp302);
ClearMemSecret1( (int32_t)128, tmp301);

vector < vector < vector < vector < uint64_t > > > > tmp1508 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1504, tmp1508,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1504);

vector < vector < vector < vector < uint64_t > > > > tmp1510 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1508, tmp305, tmp1510);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1508);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp305);

int32_t tmp1513 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1514 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1510,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1492,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1510, tmp1513, tmp1514);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp1492);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1510);

vector < vector < vector < vector < uint64_t > > > > tmp1518 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1514, tmp306, tmp307,  (int32_t)0,  (int32_t)12, tmp1518);
ClearMemSecret1( (int32_t)608, tmp306);
ClearMemSecret1( (int32_t)608, tmp307);

vector < vector < vector < vector < uint64_t > > > > tmp1521 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1518, tmp1521,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1518);

vector < vector < vector < vector < uint64_t > > > > tmp1523 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1521, tmp310, tmp1523);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1521);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)608,  (int32_t)128, tmp310);

vector < vector < vector < vector < uint64_t > > > > tmp1526 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1523,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1523, tmp311, tmp312,  (int32_t)0,  (int32_t)12, tmp1526);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1523);
ClearMemSecret1( (int32_t)128, tmp311);
ClearMemSecret1( (int32_t)128, tmp312);

vector < vector < vector < vector < uint64_t > > > > tmp1530 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1526, tmp1530,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1526);

vector < vector < vector < vector < uint64_t > > > > tmp1532 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1530, tmp315, tmp1532);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1530);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp315);

int32_t tmp1535 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1536 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1532,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1514,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1532, tmp1535, tmp1536);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)608, tmp1514);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1532);

vector < vector < vector < vector < uint64_t > > > > tmp1540 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1536, tmp316, tmp317,  (int32_t)0,  (int32_t)12, tmp1540);
ClearMemSecret1( (int32_t)640, tmp316);
ClearMemSecret1( (int32_t)640, tmp317);

vector < vector < vector < vector < uint64_t > > > > tmp1543 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1540, tmp1543,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1540);

vector < vector < vector < vector < uint64_t > > > > tmp1545 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1543, tmp320, tmp1545);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128, tmp320);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1543);

vector < vector < vector < vector < uint64_t > > > > tmp1548 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1545,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1545, tmp321, tmp322,  (int32_t)0,  (int32_t)12, tmp1548);
ClearMemSecret1( (int32_t)128, tmp322);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1545);
ClearMemSecret1( (int32_t)128, tmp321);

vector < vector < vector < vector < uint64_t > > > > tmp1552 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1548, tmp1552,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1548);

vector < vector < vector < vector < uint64_t > > > > tmp1554 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1552, tmp325, tmp1554);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1552);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp325);

int32_t tmp1557 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1558 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1554,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1536,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1554, tmp1557, tmp1558);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1536);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1554);

vector < vector < vector < vector < uint64_t > > > > tmp1562 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1558, tmp326, tmp327,  (int32_t)0,  (int32_t)12, tmp1562);
ClearMemSecret1( (int32_t)672, tmp327);
ClearMemSecret1( (int32_t)672, tmp326);

vector < vector < vector < vector < uint64_t > > > > tmp1565 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1562, tmp1565,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1562);

vector < vector < vector < vector < uint64_t > > > > tmp1567 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1565, tmp330, tmp1567);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1565);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128, tmp330);

vector < vector < vector < vector < uint64_t > > > > tmp1570 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1567,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1567, tmp331, tmp332,  (int32_t)0,  (int32_t)12, tmp1570);
ClearMemSecret1( (int32_t)128, tmp331);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1567);
ClearMemSecret1( (int32_t)128, tmp332);

vector < vector < vector < vector < uint64_t > > > > tmp1574 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1570, tmp1574,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1570);

vector < vector < vector < vector < uint64_t > > > > tmp1576 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1574, tmp335, tmp1576);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp335);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1574);

int32_t tmp1579 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1580 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1576,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1558,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1576, tmp1579, tmp1580);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)672, tmp1558);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1576);

vector < vector < vector < vector < uint64_t > > > > tmp1584 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1580, tmp336, tmp337,  (int32_t)0,  (int32_t)12, tmp1584);
ClearMemSecret1( (int32_t)704, tmp336);
ClearMemSecret1( (int32_t)704, tmp337);

vector < vector < vector < vector < uint64_t > > > > tmp1587 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1584, tmp1587,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1584);

vector < vector < vector < vector < uint64_t > > > > tmp1589 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1587, tmp340, tmp1589);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128, tmp340);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1587);

vector < vector < vector < vector < uint64_t > > > > tmp1592 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1589,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1589, tmp341, tmp342,  (int32_t)0,  (int32_t)12, tmp1592);
ClearMemSecret1( (int32_t)128, tmp342);
ClearMemSecret1( (int32_t)128, tmp341);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1589);

vector < vector < vector < vector < uint64_t > > > > tmp1596 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1592, tmp1596,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1592);

vector < vector < vector < vector < uint64_t > > > > tmp1598 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1596, tmp345, tmp1598);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp345);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1596);

int32_t tmp1601 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1602 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1598,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1580,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1598, tmp1601, tmp1602);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1598);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)704, tmp1580);

vector < vector < vector < vector < uint64_t > > > > tmp1606 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1602, tmp346, tmp347,  (int32_t)0,  (int32_t)12, tmp1606);
ClearMemSecret1( (int32_t)736, tmp347);
ClearMemSecret1( (int32_t)736, tmp346);

vector < vector < vector < vector < uint64_t > > > > tmp1609 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1606, tmp1609,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1606);

vector < vector < vector < vector < uint64_t > > > > tmp1611 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1609, tmp350, tmp1611);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128, tmp350);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1609);

vector < vector < vector < vector < uint64_t > > > > tmp1614 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1611,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1611, tmp351, tmp352,  (int32_t)0,  (int32_t)12, tmp1614);
ClearMemSecret1( (int32_t)128, tmp351);
ClearMemSecret1( (int32_t)128, tmp352);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1611);

vector < vector < vector < vector < uint64_t > > > > tmp1618 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1614, tmp1618,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1614);

vector < vector < vector < vector < uint64_t > > > > tmp1620 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1618, tmp355, tmp1620);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp355);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1618);

int32_t tmp1623 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1624 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1620,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1602,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1620, tmp1623, tmp1624);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)736, tmp1602);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1620);

vector < vector < vector < vector < uint64_t > > > > tmp1628 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1624, tmp356, tmp357,  (int32_t)0,  (int32_t)12, tmp1628);
ClearMemSecret1( (int32_t)768, tmp356);
ClearMemSecret1( (int32_t)768, tmp357);

vector < vector < vector < vector < uint64_t > > > > tmp1631 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1628, tmp1631,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1628);

vector < vector < vector < vector < uint64_t > > > > tmp1633 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1631, tmp360, tmp1633);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128, tmp360);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1631);

vector < vector < vector < vector < uint64_t > > > > tmp1636 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1633,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1633, tmp361, tmp362,  (int32_t)0,  (int32_t)12, tmp1636);
ClearMemSecret1( (int32_t)128, tmp362);
ClearMemSecret1( (int32_t)128, tmp361);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1633);

vector < vector < vector < vector < uint64_t > > > > tmp1640 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1636, tmp1640,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1636);

vector < vector < vector < vector < uint64_t > > > > tmp1642 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1640, tmp365, tmp1642);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1640);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp365);

int32_t tmp1645 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1646 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1642,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1624,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1642, tmp1645, tmp1646);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1642);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)768, tmp1624);

vector < vector < vector < vector < uint64_t > > > > tmp1650 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1646, tmp366, tmp367,  (int32_t)0,  (int32_t)12, tmp1650);
ClearMemSecret1( (int32_t)800, tmp366);
ClearMemSecret1( (int32_t)800, tmp367);

vector < vector < vector < vector < uint64_t > > > > tmp1653 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1650, tmp1653,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1650);

vector < vector < vector < vector < uint64_t > > > > tmp1655 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1653, tmp370, tmp1655);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128, tmp370);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1653);

vector < vector < vector < vector < uint64_t > > > > tmp1658 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1655,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1655, tmp371, tmp372,  (int32_t)0,  (int32_t)12, tmp1658);
ClearMemSecret1( (int32_t)128, tmp371);
ClearMemSecret1( (int32_t)128, tmp372);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1655);

vector < vector < vector < vector < uint64_t > > > > tmp1662 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1658, tmp1662,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1658);

vector < vector < vector < vector < uint64_t > > > > tmp1664 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1662, tmp375, tmp1664);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp375);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1662);

int32_t tmp1667 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1668 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1664,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1646,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1664, tmp1667, tmp1668);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1664);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)800, tmp1646);

vector < vector < vector < vector < uint64_t > > > > tmp1672 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1668, tmp376, tmp377,  (int32_t)0,  (int32_t)12, tmp1672);
ClearMemSecret1( (int32_t)832, tmp376);
ClearMemSecret1( (int32_t)832, tmp377);

vector < vector < vector < vector < uint64_t > > > > tmp1675 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1672, tmp1675,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1672);

vector < vector < vector < vector < uint64_t > > > > tmp1677 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1675, tmp380, tmp1677);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128, tmp380);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1675);

vector < vector < vector < vector < uint64_t > > > > tmp1680 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1677,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1677, tmp381, tmp382,  (int32_t)0,  (int32_t)12, tmp1680);
ClearMemSecret1( (int32_t)128, tmp382);
ClearMemSecret1( (int32_t)128, tmp381);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1677);

vector < vector < vector < vector < uint64_t > > > > tmp1684 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1680, tmp1684,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1680);

vector < vector < vector < vector < uint64_t > > > > tmp1686 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1684, tmp385, tmp1686);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp385);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1684);

int32_t tmp1689 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1690 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1686,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1668,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1686, tmp1689, tmp1690);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1686);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)832, tmp1668);

vector < vector < vector < vector < uint64_t > > > > tmp1694 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1690, tmp386, tmp387,  (int32_t)0,  (int32_t)12, tmp1694);
ClearMemSecret1( (int32_t)864, tmp386);
ClearMemSecret1( (int32_t)864, tmp387);

vector < vector < vector < vector < uint64_t > > > > tmp1697 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1694, tmp1697,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1694);

vector < vector < vector < vector < uint64_t > > > > tmp1699 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1697, tmp390, tmp1699);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128, tmp390);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1697);

vector < vector < vector < vector < uint64_t > > > > tmp1702 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1699,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1699, tmp391, tmp392,  (int32_t)0,  (int32_t)12, tmp1702);
ClearMemSecret1( (int32_t)128, tmp392);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1699);
ClearMemSecret1( (int32_t)128, tmp391);

vector < vector < vector < vector < uint64_t > > > > tmp1706 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1702, tmp1706,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1702);

vector < vector < vector < vector < uint64_t > > > > tmp1708 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1706, tmp395, tmp1708);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1706);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp395);

int32_t tmp1711 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1712 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1708,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1690,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1708, tmp1711, tmp1712);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)864, tmp1690);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1708);

vector < vector < vector < vector < uint64_t > > > > tmp1716 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1712, tmp396, tmp397,  (int32_t)0,  (int32_t)12, tmp1716);
ClearMemSecret1( (int32_t)896, tmp396);
ClearMemSecret1( (int32_t)896, tmp397);

vector < vector < vector < vector < uint64_t > > > > tmp1719 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1716, tmp1719,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1716);

vector < vector < vector < vector < uint64_t > > > > tmp1721 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1719, tmp400, tmp1721);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1719);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128, tmp400);

vector < vector < vector < vector < uint64_t > > > > tmp1724 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1721,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1721, tmp401, tmp402,  (int32_t)0,  (int32_t)12, tmp1724);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1721);
ClearMemSecret1( (int32_t)128, tmp402);
ClearMemSecret1( (int32_t)128, tmp401);

vector < vector < vector < vector < uint64_t > > > > tmp1728 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1724, tmp1728,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1724);

vector < vector < vector < vector < uint64_t > > > > tmp1730 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1728, tmp405, tmp1730);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1728);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp405);

int32_t tmp1733 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1734 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1730,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1712,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1730, tmp1733, tmp1734);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1730);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)896, tmp1712);

vector < vector < vector < vector < uint64_t > > > > tmp1738 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1734, tmp406, tmp407,  (int32_t)0,  (int32_t)12, tmp1738);
ClearMemSecret1( (int32_t)928, tmp407);
ClearMemSecret1( (int32_t)928, tmp406);

vector < vector < vector < vector < uint64_t > > > > tmp1741 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1738, tmp1741,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1738);

vector < vector < vector < vector < uint64_t > > > > tmp1743 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1741, tmp410, tmp1743);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128, tmp410);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1741);

vector < vector < vector < vector < uint64_t > > > > tmp1746 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1743,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1743, tmp411, tmp412,  (int32_t)0,  (int32_t)12, tmp1746);
ClearMemSecret1( (int32_t)128, tmp411);
ClearMemSecret1( (int32_t)128, tmp412);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1743);

vector < vector < vector < vector < uint64_t > > > > tmp1750 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1746, tmp1750,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1746);

vector < vector < vector < vector < uint64_t > > > > tmp1752 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1750, tmp415, tmp1752);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp415);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1750);

int32_t tmp1755 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1756 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1752,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1734,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1752, tmp1755, tmp1756);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)928, tmp1734);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1752);

vector < vector < vector < vector < uint64_t > > > > tmp1760 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1756, tmp416, tmp417,  (int32_t)0,  (int32_t)12, tmp1760);
ClearMemSecret1( (int32_t)960, tmp416);
ClearMemSecret1( (int32_t)960, tmp417);

vector < vector < vector < vector < uint64_t > > > > tmp1763 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1760, tmp1763,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1760);

vector < vector < vector < vector < uint64_t > > > > tmp1765 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1763, tmp420, tmp1765);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128, tmp420);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1763);

vector < vector < vector < vector < uint64_t > > > > tmp1768 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1765,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1765, tmp421, tmp422,  (int32_t)0,  (int32_t)12, tmp1768);
ClearMemSecret1( (int32_t)128, tmp421);
ClearMemSecret1( (int32_t)128, tmp422);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1765);

vector < vector < vector < vector < uint64_t > > > > tmp1772 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1768, tmp1772,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1768);

vector < vector < vector < vector < uint64_t > > > > tmp1774 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1772, tmp425, tmp1774);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp425);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1772);

int32_t tmp1777 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1778 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1774,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1756,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1774, tmp1777, tmp1778);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1774);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)960, tmp1756);

vector < vector < vector < vector < uint64_t > > > > tmp1782 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1778, tmp426, tmp427,  (int32_t)0,  (int32_t)12, tmp1782);
ClearMemSecret1( (int32_t)992, tmp426);
ClearMemSecret1( (int32_t)992, tmp427);

vector < vector < vector < vector < uint64_t > > > > tmp1785 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1782, tmp1785,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1782);

vector < vector < vector < vector < uint64_t > > > > tmp1787 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1785, tmp430, tmp1787);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128, tmp430);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1785);

vector < vector < vector < vector < uint64_t > > > > tmp1790 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1787,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1787, tmp431, tmp432,  (int32_t)0,  (int32_t)12, tmp1790);
ClearMemSecret1( (int32_t)128, tmp432);
ClearMemSecret1( (int32_t)128, tmp431);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1787);

vector < vector < vector < vector < uint64_t > > > > tmp1794 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1790, tmp1794,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1790);

vector < vector < vector < vector < uint64_t > > > > tmp1796 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1794, tmp435, tmp1796);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1794);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp435);

int32_t tmp1799 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1800 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1796,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1778,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1796, tmp1799, tmp1800);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1796);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)992, tmp1778);

vector < vector < vector < vector < uint64_t > > > > tmp1804 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1800, tmp436, tmp437,  (int32_t)0,  (int32_t)12, tmp1804);
ClearMemSecret1( (int32_t)1024, tmp436);
ClearMemSecret1( (int32_t)1024, tmp437);

vector < vector < vector < vector < uint64_t > > > > tmp1807 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1804, tmp1807,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1804);

vector < vector < vector < vector < uint64_t > > > > tmp1809 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1807, tmp440, tmp1809);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)128, tmp440);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1807);

vector < vector < vector < vector < uint64_t > > > > tmp1812 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1809,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1809, tmp441, tmp442,  (int32_t)0,  (int32_t)12, tmp1812);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1809);
ClearMemSecret1( (int32_t)128, tmp441);
ClearMemSecret1( (int32_t)128, tmp442);

vector < vector < vector < vector < uint64_t > > > > tmp1816 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1812, tmp1816,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1812);

vector < vector < vector < vector < uint64_t > > > > tmp1818 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1816, tmp445, tmp1818);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp445);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1816);

int32_t tmp1821 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1822 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1818,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1800,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1818, tmp1821, tmp1822);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp1800);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1818);

vector < vector < vector < vector < uint64_t > > > > tmp1826 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1822, tmp446, tmp447,  (int32_t)0,  (int32_t)12, tmp1826);
ClearMemSecret1( (int32_t)1056, tmp447);
ClearMemSecret1( (int32_t)1056, tmp446);

vector < vector < vector < vector < uint64_t > > > > tmp1829 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1826, tmp1829,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1826);

vector < vector < vector < vector < uint64_t > > > > tmp1831 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1829, tmp450, tmp1831);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1056,  (int32_t)128, tmp450);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1829);

vector < vector < vector < vector < uint64_t > > > > tmp1834 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1831,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1831, tmp451, tmp452,  (int32_t)0,  (int32_t)12, tmp1834);
ClearMemSecret1( (int32_t)128, tmp452);
ClearMemSecret1( (int32_t)128, tmp451);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1831);

vector < vector < vector < vector < uint64_t > > > > tmp1838 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1834, tmp1838,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1834);

vector < vector < vector < vector < uint64_t > > > > tmp1840 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1838, tmp455, tmp1840);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp455);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1838);

int32_t tmp1843 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1844 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1840,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1822,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1840, tmp1843, tmp1844);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1840);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1056, tmp1822);

vector < vector < vector < vector < uint64_t > > > > tmp1848 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1844, tmp456, tmp457,  (int32_t)0,  (int32_t)12, tmp1848);
ClearMemSecret1( (int32_t)1088, tmp457);
ClearMemSecret1( (int32_t)1088, tmp456);

vector < vector < vector < vector < uint64_t > > > > tmp1851 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1848, tmp1851,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1848);

vector < vector < vector < vector < uint64_t > > > > tmp1853 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1851, tmp460, tmp1853);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1851);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1088,  (int32_t)128, tmp460);

vector < vector < vector < vector < uint64_t > > > > tmp1856 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1853,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1853, tmp461, tmp462,  (int32_t)0,  (int32_t)12, tmp1856);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1853);
ClearMemSecret1( (int32_t)128, tmp462);
ClearMemSecret1( (int32_t)128, tmp461);

vector < vector < vector < vector < uint64_t > > > > tmp1860 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1856, tmp1860,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1856);

vector < vector < vector < vector < uint64_t > > > > tmp1862 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1860, tmp465, tmp1862);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp465);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1860);

int32_t tmp1865 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1866 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1862,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1844,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1862, tmp1865, tmp1866);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1088, tmp1844);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1862);

vector < vector < vector < vector < uint64_t > > > > tmp1870 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1866, tmp466, tmp467,  (int32_t)0,  (int32_t)12, tmp1870);
ClearMemSecret1( (int32_t)1120, tmp466);
ClearMemSecret1( (int32_t)1120, tmp467);

vector < vector < vector < vector < uint64_t > > > > tmp1873 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1870, tmp1873,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1870);

vector < vector < vector < vector < uint64_t > > > > tmp1875 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1873, tmp470, tmp1875);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1873);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1120,  (int32_t)128, tmp470);

vector < vector < vector < vector < uint64_t > > > > tmp1878 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1875,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1875, tmp471, tmp472,  (int32_t)0,  (int32_t)12, tmp1878);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1875);
ClearMemSecret1( (int32_t)128, tmp472);
ClearMemSecret1( (int32_t)128, tmp471);

vector < vector < vector < vector < uint64_t > > > > tmp1882 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1878, tmp1882,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1878);

vector < vector < vector < vector < uint64_t > > > > tmp1884 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1882, tmp475, tmp1884);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1882);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp475);

int32_t tmp1887 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1888 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1884,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1866,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1884, tmp1887, tmp1888);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1120, tmp1866);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1884);

vector < vector < vector < vector < uint64_t > > > > tmp1892 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1888, tmp476, tmp477,  (int32_t)0,  (int32_t)12, tmp1892);
ClearMemSecret1( (int32_t)1152, tmp477);
ClearMemSecret1( (int32_t)1152, tmp476);

vector < vector < vector < vector < uint64_t > > > > tmp1895 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1892, tmp1895,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1892);

vector < vector < vector < vector < uint64_t > > > > tmp1897 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1895, tmp480, tmp1897);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1895);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)128, tmp480);

vector < vector < vector < vector < uint64_t > > > > tmp1900 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1897,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1897, tmp481, tmp482,  (int32_t)0,  (int32_t)12, tmp1900);
ClearMemSecret1( (int32_t)128, tmp481);
ClearMemSecret1( (int32_t)128, tmp482);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1897);

vector < vector < vector < vector < uint64_t > > > > tmp1904 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1900, tmp1904,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1900);

vector < vector < vector < vector < uint64_t > > > > tmp1906 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1904, tmp485, tmp1906);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp485);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1904);

int32_t tmp1909 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1910 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1906,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1888,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1906, tmp1909, tmp1910);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1906);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1152, tmp1888);

vector < vector < vector < vector < uint64_t > > > > tmp1914 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1910, tmp486, tmp487,  (int32_t)0,  (int32_t)12, tmp1914);
ClearMemSecret1( (int32_t)1184, tmp486);
ClearMemSecret1( (int32_t)1184, tmp487);

vector < vector < vector < vector < uint64_t > > > > tmp1917 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1914, tmp1917,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1914);

vector < vector < vector < vector < uint64_t > > > > tmp1919 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1917, tmp490, tmp1919);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1184,  (int32_t)128, tmp490);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1917);

vector < vector < vector < vector < uint64_t > > > > tmp1922 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1919,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1919, tmp491, tmp492,  (int32_t)0,  (int32_t)12, tmp1922);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1919);
ClearMemSecret1( (int32_t)128, tmp492);
ClearMemSecret1( (int32_t)128, tmp491);

vector < vector < vector < vector < uint64_t > > > > tmp1926 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1922, tmp1926,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1922);

vector < vector < vector < vector < uint64_t > > > > tmp1928 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1926, tmp495, tmp1928);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp495);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1926);

int32_t tmp1931 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1932 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1928,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1910,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1928, tmp1931, tmp1932);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1184, tmp1910);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1928);

vector < vector < vector < vector < uint64_t > > > > tmp1936 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1932, tmp496, tmp497,  (int32_t)0,  (int32_t)12, tmp1936);
ClearMemSecret1( (int32_t)1216, tmp497);
ClearMemSecret1( (int32_t)1216, tmp496);

vector < vector < vector < vector < uint64_t > > > > tmp1939 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1936, tmp1939,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1936);

vector < vector < vector < vector < uint64_t > > > > tmp1941 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1939, tmp500, tmp1941);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1939);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1216,  (int32_t)128, tmp500);

vector < vector < vector < vector < uint64_t > > > > tmp1944 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1941,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1941, tmp501, tmp502,  (int32_t)0,  (int32_t)12, tmp1944);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1941);
ClearMemSecret1( (int32_t)128, tmp502);
ClearMemSecret1( (int32_t)128, tmp501);

vector < vector < vector < vector < uint64_t > > > > tmp1948 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1944, tmp1948,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1944);

vector < vector < vector < vector < uint64_t > > > > tmp1950 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1948, tmp505, tmp1950);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1948);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp505);

int32_t tmp1953 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1954 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1950,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1932,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1950, tmp1953, tmp1954);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1950);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1216, tmp1932);

vector < vector < vector < vector < uint64_t > > > > tmp1958 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1954, tmp506, tmp507,  (int32_t)0,  (int32_t)12, tmp1958);
ClearMemSecret1( (int32_t)1248, tmp506);
ClearMemSecret1( (int32_t)1248, tmp507);

vector < vector < vector < vector < uint64_t > > > > tmp1961 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1958, tmp1961,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1958);

vector < vector < vector < vector < uint64_t > > > > tmp1963 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1961, tmp510, tmp1963);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1961);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1248,  (int32_t)128, tmp510);

vector < vector < vector < vector < uint64_t > > > > tmp1966 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1963,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1963, tmp511, tmp512,  (int32_t)0,  (int32_t)12, tmp1966);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1963);
ClearMemSecret1( (int32_t)128, tmp511);
ClearMemSecret1( (int32_t)128, tmp512);

vector < vector < vector < vector < uint64_t > > > > tmp1970 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1966, tmp1970,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1966);

vector < vector < vector < vector < uint64_t > > > > tmp1972 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1970, tmp515, tmp1972);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp515);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)128, tmp1970);

int32_t tmp1975 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp1976 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1972,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1954,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1972, tmp1975, tmp1976);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1248, tmp1954);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)32, tmp1972);

vector < vector < vector < vector < uint64_t > > > > tmp1980 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280, tmp1976, tmp516, tmp517,  (int32_t)0,  (int32_t)12, tmp1980);
ClearMemSecret1( (int32_t)1280, tmp516);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280, tmp1976);
ClearMemSecret1( (int32_t)1280, tmp517);

vector < vector < vector < vector < uint64_t > > > > tmp1984 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280, tmp1980, tmp1984,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280, tmp1980);

vector < vector < vector < vector < uint64_t > > > > tmp1986 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280,  (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1984, tmp520, tmp1986);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1280,  (int32_t)640, tmp520);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1280, tmp1984);

vector < vector < vector < vector < uint64_t > > > > tmp1989 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
AvgPool( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640,  (int32_t)2,  (int32_t)2,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1986, tmp1989);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)640, tmp1986);

vector < vector < vector < vector < uint64_t > > > > tmp1991 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1989,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1989, tmp521, tmp522,  (int32_t)0,  (int32_t)12, tmp1991);
ClearMemSecret1( (int32_t)640, tmp522);
ClearMemSecret1( (int32_t)640, tmp521);

vector < vector < vector < vector < uint64_t > > > > tmp1994 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1991, tmp1994,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1991);

vector < vector < vector < vector < uint64_t > > > > tmp1996 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp1994, tmp525, tmp1996);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)640,  (int32_t)128, tmp525);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1994);

vector < vector < vector < vector < uint64_t > > > > tmp1999 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1996,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1996, tmp526, tmp527,  (int32_t)0,  (int32_t)12, tmp1999);
ClearMemSecret1( (int32_t)128, tmp526);
ClearMemSecret1( (int32_t)128, tmp527);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1996);

vector < vector < vector < vector < uint64_t > > > > tmp2003 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1999, tmp2003,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp1999);

vector < vector < vector < vector < uint64_t > > > > tmp2005 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2003, tmp530, tmp2005);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp530);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2003);

int32_t tmp2008 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2009 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2005,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1989,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2005, tmp2008, tmp2009);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2005);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)640, tmp1989);

vector < vector < vector < vector < uint64_t > > > > tmp2013 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2009, tmp531, tmp532,  (int32_t)0,  (int32_t)12, tmp2013);
ClearMemSecret1( (int32_t)672, tmp532);
ClearMemSecret1( (int32_t)672, tmp531);

vector < vector < vector < vector < uint64_t > > > > tmp2016 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2013, tmp2016,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2013);

vector < vector < vector < vector < uint64_t > > > > tmp2018 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2016, tmp535, tmp2018);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2016);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)672,  (int32_t)128, tmp535);

vector < vector < vector < vector < uint64_t > > > > tmp2021 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2018,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2018, tmp536, tmp537,  (int32_t)0,  (int32_t)12, tmp2021);
ClearMemSecret1( (int32_t)128, tmp537);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2018);
ClearMemSecret1( (int32_t)128, tmp536);

vector < vector < vector < vector < uint64_t > > > > tmp2025 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2021, tmp2025,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2021);

vector < vector < vector < vector < uint64_t > > > > tmp2027 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2025, tmp540, tmp2027);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2025);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp540);

int32_t tmp2030 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2031 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2027,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2009,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2027, tmp2030, tmp2031);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2027);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)672, tmp2009);

vector < vector < vector < vector < uint64_t > > > > tmp2035 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2031, tmp541, tmp542,  (int32_t)0,  (int32_t)12, tmp2035);
ClearMemSecret1( (int32_t)704, tmp541);
ClearMemSecret1( (int32_t)704, tmp542);

vector < vector < vector < vector < uint64_t > > > > tmp2038 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2035, tmp2038,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2035);

vector < vector < vector < vector < uint64_t > > > > tmp2040 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2038, tmp545, tmp2040);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)704,  (int32_t)128, tmp545);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2038);

vector < vector < vector < vector < uint64_t > > > > tmp2043 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2040,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2040, tmp546, tmp547,  (int32_t)0,  (int32_t)12, tmp2043);
ClearMemSecret1( (int32_t)128, tmp546);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2040);
ClearMemSecret1( (int32_t)128, tmp547);

vector < vector < vector < vector < uint64_t > > > > tmp2047 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2043, tmp2047,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2043);

vector < vector < vector < vector < uint64_t > > > > tmp2049 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2047, tmp550, tmp2049);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2047);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp550);

int32_t tmp2052 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2053 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2049,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2031,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2049, tmp2052, tmp2053);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)704, tmp2031);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2049);

vector < vector < vector < vector < uint64_t > > > > tmp2057 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2053, tmp551, tmp552,  (int32_t)0,  (int32_t)12, tmp2057);
ClearMemSecret1( (int32_t)736, tmp551);
ClearMemSecret1( (int32_t)736, tmp552);

vector < vector < vector < vector < uint64_t > > > > tmp2060 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2057, tmp2060,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2057);

vector < vector < vector < vector < uint64_t > > > > tmp2062 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2060, tmp555, tmp2062);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)736,  (int32_t)128, tmp555);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2060);

vector < vector < vector < vector < uint64_t > > > > tmp2065 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2062,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2062, tmp556, tmp557,  (int32_t)0,  (int32_t)12, tmp2065);
ClearMemSecret1( (int32_t)128, tmp557);
ClearMemSecret1( (int32_t)128, tmp556);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2062);

vector < vector < vector < vector < uint64_t > > > > tmp2069 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2065, tmp2069,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2065);

vector < vector < vector < vector < uint64_t > > > > tmp2071 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2069, tmp560, tmp2071);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp560);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2069);

int32_t tmp2074 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2075 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2071,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2053,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2071, tmp2074, tmp2075);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2071);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)736, tmp2053);

vector < vector < vector < vector < uint64_t > > > > tmp2079 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2075, tmp561, tmp562,  (int32_t)0,  (int32_t)12, tmp2079);
ClearMemSecret1( (int32_t)768, tmp562);
ClearMemSecret1( (int32_t)768, tmp561);

vector < vector < vector < vector < uint64_t > > > > tmp2082 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2079, tmp2082,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2079);

vector < vector < vector < vector < uint64_t > > > > tmp2084 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2082, tmp565, tmp2084);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)768,  (int32_t)128, tmp565);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2082);

vector < vector < vector < vector < uint64_t > > > > tmp2087 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2084,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2084, tmp566, tmp567,  (int32_t)0,  (int32_t)12, tmp2087);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2084);
ClearMemSecret1( (int32_t)128, tmp567);
ClearMemSecret1( (int32_t)128, tmp566);

vector < vector < vector < vector < uint64_t > > > > tmp2091 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2087, tmp2091,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2087);

vector < vector < vector < vector < uint64_t > > > > tmp2093 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2091, tmp570, tmp2093);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2091);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp570);

int32_t tmp2096 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2097 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2093,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2075,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2093, tmp2096, tmp2097);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)768, tmp2075);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2093);

vector < vector < vector < vector < uint64_t > > > > tmp2101 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2097, tmp571, tmp572,  (int32_t)0,  (int32_t)12, tmp2101);
ClearMemSecret1( (int32_t)800, tmp572);
ClearMemSecret1( (int32_t)800, tmp571);

vector < vector < vector < vector < uint64_t > > > > tmp2104 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2101, tmp2104,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2101);

vector < vector < vector < vector < uint64_t > > > > tmp2106 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2104, tmp575, tmp2106);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)800,  (int32_t)128, tmp575);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2104);

vector < vector < vector < vector < uint64_t > > > > tmp2109 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2106,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2106, tmp576, tmp577,  (int32_t)0,  (int32_t)12, tmp2109);
ClearMemSecret1( (int32_t)128, tmp577);
ClearMemSecret1( (int32_t)128, tmp576);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2106);

vector < vector < vector < vector < uint64_t > > > > tmp2113 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2109, tmp2113,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2109);

vector < vector < vector < vector < uint64_t > > > > tmp2115 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2113, tmp580, tmp2115);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2113);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp580);

int32_t tmp2118 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2119 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2115,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2097,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2115, tmp2118, tmp2119);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)800, tmp2097);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2115);

vector < vector < vector < vector < uint64_t > > > > tmp2123 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2119, tmp581, tmp582,  (int32_t)0,  (int32_t)12, tmp2123);
ClearMemSecret1( (int32_t)832, tmp582);
ClearMemSecret1( (int32_t)832, tmp581);

vector < vector < vector < vector < uint64_t > > > > tmp2126 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2123, tmp2126,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2123);

vector < vector < vector < vector < uint64_t > > > > tmp2128 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2126, tmp585, tmp2128);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)832,  (int32_t)128, tmp585);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2126);

vector < vector < vector < vector < uint64_t > > > > tmp2131 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2128,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2128, tmp586, tmp587,  (int32_t)0,  (int32_t)12, tmp2131);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2128);
ClearMemSecret1( (int32_t)128, tmp587);
ClearMemSecret1( (int32_t)128, tmp586);

vector < vector < vector < vector < uint64_t > > > > tmp2135 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2131, tmp2135,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2131);

vector < vector < vector < vector < uint64_t > > > > tmp2137 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2135, tmp590, tmp2137);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp590);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2135);

int32_t tmp2140 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2141 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2137,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2119,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2137, tmp2140, tmp2141);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)832, tmp2119);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2137);

vector < vector < vector < vector < uint64_t > > > > tmp2145 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2141, tmp591, tmp592,  (int32_t)0,  (int32_t)12, tmp2145);
ClearMemSecret1( (int32_t)864, tmp591);
ClearMemSecret1( (int32_t)864, tmp592);

vector < vector < vector < vector < uint64_t > > > > tmp2148 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2145, tmp2148,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2145);

vector < vector < vector < vector < uint64_t > > > > tmp2150 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2148, tmp595, tmp2150);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2148);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)864,  (int32_t)128, tmp595);

vector < vector < vector < vector < uint64_t > > > > tmp2153 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2150,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2150, tmp596, tmp597,  (int32_t)0,  (int32_t)12, tmp2153);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2150);
ClearMemSecret1( (int32_t)128, tmp597);
ClearMemSecret1( (int32_t)128, tmp596);

vector < vector < vector < vector < uint64_t > > > > tmp2157 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2153, tmp2157,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2153);

vector < vector < vector < vector < uint64_t > > > > tmp2159 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2157, tmp600, tmp2159);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2157);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp600);

int32_t tmp2162 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2163 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2159,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2141,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2159, tmp2162, tmp2163);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2159);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)864, tmp2141);

vector < vector < vector < vector < uint64_t > > > > tmp2167 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2163, tmp601, tmp602,  (int32_t)0,  (int32_t)12, tmp2167);
ClearMemSecret1( (int32_t)896, tmp602);
ClearMemSecret1( (int32_t)896, tmp601);

vector < vector < vector < vector < uint64_t > > > > tmp2170 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2167, tmp2170,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2167);

vector < vector < vector < vector < uint64_t > > > > tmp2172 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2170, tmp605, tmp2172);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2170);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)896,  (int32_t)128, tmp605);

vector < vector < vector < vector < uint64_t > > > > tmp2175 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2172,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2172, tmp606, tmp607,  (int32_t)0,  (int32_t)12, tmp2175);
ClearMemSecret1( (int32_t)128, tmp606);
ClearMemSecret1( (int32_t)128, tmp607);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2172);

vector < vector < vector < vector < uint64_t > > > > tmp2179 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2175, tmp2179,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2175);

vector < vector < vector < vector < uint64_t > > > > tmp2181 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2179, tmp610, tmp2181);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2179);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp610);

int32_t tmp2184 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2185 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2181,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2163,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2181, tmp2184, tmp2185);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)896, tmp2163);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2181);

vector < vector < vector < vector < uint64_t > > > > tmp2189 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2185, tmp611, tmp612,  (int32_t)0,  (int32_t)12, tmp2189);
ClearMemSecret1( (int32_t)928, tmp611);
ClearMemSecret1( (int32_t)928, tmp612);

vector < vector < vector < vector < uint64_t > > > > tmp2192 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2189, tmp2192,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2189);

vector < vector < vector < vector < uint64_t > > > > tmp2194 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2192, tmp615, tmp2194);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2192);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)928,  (int32_t)128, tmp615);

vector < vector < vector < vector < uint64_t > > > > tmp2197 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2194,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2194, tmp616, tmp617,  (int32_t)0,  (int32_t)12, tmp2197);
ClearMemSecret1( (int32_t)128, tmp616);
ClearMemSecret1( (int32_t)128, tmp617);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2194);

vector < vector < vector < vector < uint64_t > > > > tmp2201 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2197, tmp2201,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2197);

vector < vector < vector < vector < uint64_t > > > > tmp2203 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2201, tmp620, tmp2203);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2201);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp620);

int32_t tmp2206 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2207 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2203,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2185,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2203, tmp2206, tmp2207);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2203);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)928, tmp2185);

vector < vector < vector < vector < uint64_t > > > > tmp2211 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2207, tmp621, tmp622,  (int32_t)0,  (int32_t)12, tmp2211);
ClearMemSecret1( (int32_t)960, tmp621);
ClearMemSecret1( (int32_t)960, tmp622);

vector < vector < vector < vector < uint64_t > > > > tmp2214 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2211, tmp2214,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2211);

vector < vector < vector < vector < uint64_t > > > > tmp2216 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2214, tmp625, tmp2216);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)960,  (int32_t)128, tmp625);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2214);

vector < vector < vector < vector < uint64_t > > > > tmp2219 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2216,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2216, tmp626, tmp627,  (int32_t)0,  (int32_t)12, tmp2219);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2216);
ClearMemSecret1( (int32_t)128, tmp627);
ClearMemSecret1( (int32_t)128, tmp626);

vector < vector < vector < vector < uint64_t > > > > tmp2223 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2219, tmp2223,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2219);

vector < vector < vector < vector < uint64_t > > > > tmp2225 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2223, tmp630, tmp2225);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2223);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp630);

int32_t tmp2228 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2229 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2225,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2207,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2225, tmp2228, tmp2229);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2225);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)960, tmp2207);

vector < vector < vector < vector < uint64_t > > > > tmp2233 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2229, tmp631, tmp632,  (int32_t)0,  (int32_t)12, tmp2233);
ClearMemSecret1( (int32_t)992, tmp632);
ClearMemSecret1( (int32_t)992, tmp631);

vector < vector < vector < vector < uint64_t > > > > tmp2236 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2233, tmp2236,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2233);

vector < vector < vector < vector < uint64_t > > > > tmp2238 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2236, tmp635, tmp2238);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)992,  (int32_t)128, tmp635);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2236);

vector < vector < vector < vector < uint64_t > > > > tmp2241 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2238,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2238, tmp636, tmp637,  (int32_t)0,  (int32_t)12, tmp2241);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2238);
ClearMemSecret1( (int32_t)128, tmp637);
ClearMemSecret1( (int32_t)128, tmp636);

vector < vector < vector < vector < uint64_t > > > > tmp2245 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2241, tmp2245,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2241);

vector < vector < vector < vector < uint64_t > > > > tmp2247 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2245, tmp640, tmp2247);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2245);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp640);

int32_t tmp2250 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2251 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2247,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2229,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2247, tmp2250, tmp2251);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)992, tmp2229);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2247);

vector < vector < vector < vector < uint64_t > > > > tmp2255 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2251, tmp641, tmp642,  (int32_t)0,  (int32_t)12, tmp2255);
ClearMemSecret1( (int32_t)1024, tmp642);
ClearMemSecret1( (int32_t)1024, tmp641);

vector < vector < vector < vector < uint64_t > > > > tmp2258 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2255, tmp2258,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2255);

vector < vector < vector < vector < uint64_t > > > > tmp2260 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2258, tmp645, tmp2260);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2258);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)128, tmp645);

vector < vector < vector < vector < uint64_t > > > > tmp2263 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2260,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2260, tmp646, tmp647,  (int32_t)0,  (int32_t)12, tmp2263);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2260);
ClearMemSecret1( (int32_t)128, tmp647);
ClearMemSecret1( (int32_t)128, tmp646);

vector < vector < vector < vector < uint64_t > > > > tmp2267 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2263, tmp2267,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2263);

vector < vector < vector < vector < uint64_t > > > > tmp2269 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2267, tmp650, tmp2269);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp650);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2267);

int32_t tmp2272 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2273 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2269,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2251,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2269, tmp2272, tmp2273);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1024, tmp2251);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2269);

vector < vector < vector < vector < uint64_t > > > > tmp2277 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2273, tmp651, tmp652,  (int32_t)0,  (int32_t)12, tmp2277);
ClearMemSecret1( (int32_t)1056, tmp652);
ClearMemSecret1( (int32_t)1056, tmp651);

vector < vector < vector < vector < uint64_t > > > > tmp2280 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2277, tmp2280,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2277);

vector < vector < vector < vector < uint64_t > > > > tmp2282 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2280, tmp655, tmp2282);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2280);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1056,  (int32_t)128, tmp655);

vector < vector < vector < vector < uint64_t > > > > tmp2285 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2282,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2282, tmp656, tmp657,  (int32_t)0,  (int32_t)12, tmp2285);
ClearMemSecret1( (int32_t)128, tmp656);
ClearMemSecret1( (int32_t)128, tmp657);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2282);

vector < vector < vector < vector < uint64_t > > > > tmp2289 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2285, tmp2289,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2285);

vector < vector < vector < vector < uint64_t > > > > tmp2291 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2289, tmp660, tmp2291);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp660);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2289);

int32_t tmp2294 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2295 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2291,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2273,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2291, tmp2294, tmp2295);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1056, tmp2273);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2291);

vector < vector < vector < vector < uint64_t > > > > tmp2299 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2295, tmp661, tmp662,  (int32_t)0,  (int32_t)12, tmp2299);
ClearMemSecret1( (int32_t)1088, tmp661);
ClearMemSecret1( (int32_t)1088, tmp662);

vector < vector < vector < vector < uint64_t > > > > tmp2302 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2299, tmp2302,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2299);

vector < vector < vector < vector < uint64_t > > > > tmp2304 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2302, tmp665, tmp2304);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1088,  (int32_t)128, tmp665);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2302);

vector < vector < vector < vector < uint64_t > > > > tmp2307 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2304,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2304, tmp666, tmp667,  (int32_t)0,  (int32_t)12, tmp2307);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2304);
ClearMemSecret1( (int32_t)128, tmp666);
ClearMemSecret1( (int32_t)128, tmp667);

vector < vector < vector < vector < uint64_t > > > > tmp2311 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2307, tmp2311,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2307);

vector < vector < vector < vector < uint64_t > > > > tmp2313 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2311, tmp670, tmp2313);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp670);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2311);

int32_t tmp2316 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2317 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2313,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2295,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2313, tmp2316, tmp2317);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1088, tmp2295);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2313);

vector < vector < vector < vector < uint64_t > > > > tmp2321 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2317, tmp671, tmp672,  (int32_t)0,  (int32_t)12, tmp2321);
ClearMemSecret1( (int32_t)1120, tmp672);
ClearMemSecret1( (int32_t)1120, tmp671);

vector < vector < vector < vector < uint64_t > > > > tmp2324 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2321, tmp2324,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2321);

vector < vector < vector < vector < uint64_t > > > > tmp2326 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2324, tmp675, tmp2326);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1120,  (int32_t)128, tmp675);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2324);

vector < vector < vector < vector < uint64_t > > > > tmp2329 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2326,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2326, tmp676, tmp677,  (int32_t)0,  (int32_t)12, tmp2329);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2326);
ClearMemSecret1( (int32_t)128, tmp677);
ClearMemSecret1( (int32_t)128, tmp676);

vector < vector < vector < vector < uint64_t > > > > tmp2333 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2329, tmp2333,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2329);

vector < vector < vector < vector < uint64_t > > > > tmp2335 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2333, tmp680, tmp2335);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2333);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp680);

int32_t tmp2338 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2339 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2335,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2317,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2335, tmp2338, tmp2339);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1120, tmp2317);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2335);

vector < vector < vector < vector < uint64_t > > > > tmp2343 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2339, tmp681, tmp682,  (int32_t)0,  (int32_t)12, tmp2343);
ClearMemSecret1( (int32_t)1152, tmp682);
ClearMemSecret1( (int32_t)1152, tmp681);

vector < vector < vector < vector < uint64_t > > > > tmp2346 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2343, tmp2346,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2343);

vector < vector < vector < vector < uint64_t > > > > tmp2348 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2346, tmp685, tmp2348);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)128, tmp685);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2346);

vector < vector < vector < vector < uint64_t > > > > tmp2351 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2348,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2348, tmp686, tmp687,  (int32_t)0,  (int32_t)12, tmp2351);
ClearMemSecret1( (int32_t)128, tmp686);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2348);
ClearMemSecret1( (int32_t)128, tmp687);

vector < vector < vector < vector < uint64_t > > > > tmp2355 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2351, tmp2355,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2351);

vector < vector < vector < vector < uint64_t > > > > tmp2357 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2355, tmp690, tmp2357);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2355);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp690);

int32_t tmp2360 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2361 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2357,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2339,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2357, tmp2360, tmp2361);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp2339);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2357);

vector < vector < vector < vector < uint64_t > > > > tmp2365 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2361, tmp691, tmp692,  (int32_t)0,  (int32_t)12, tmp2365);
ClearMemSecret1( (int32_t)1184, tmp691);
ClearMemSecret1( (int32_t)1184, tmp692);

vector < vector < vector < vector < uint64_t > > > > tmp2368 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2365, tmp2368,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2365);

vector < vector < vector < vector < uint64_t > > > > tmp2370 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2368, tmp695, tmp2370);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1184,  (int32_t)128, tmp695);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2368);

vector < vector < vector < vector < uint64_t > > > > tmp2373 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2370,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2370, tmp696, tmp697,  (int32_t)0,  (int32_t)12, tmp2373);
ClearMemSecret1( (int32_t)128, tmp697);
ClearMemSecret1( (int32_t)128, tmp696);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2370);

vector < vector < vector < vector < uint64_t > > > > tmp2377 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2373, tmp2377,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2373);

vector < vector < vector < vector < uint64_t > > > > tmp2379 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2377, tmp700, tmp2379);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2377);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp700);

int32_t tmp2382 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2383 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2379,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2361,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2379, tmp2382, tmp2383);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2379);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1184, tmp2361);

vector < vector < vector < vector < uint64_t > > > > tmp2387 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2383, tmp701, tmp702,  (int32_t)0,  (int32_t)12, tmp2387);
ClearMemSecret1( (int32_t)1216, tmp702);
ClearMemSecret1( (int32_t)1216, tmp701);

vector < vector < vector < vector < uint64_t > > > > tmp2390 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2387, tmp2390,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2387);

vector < vector < vector < vector < uint64_t > > > > tmp2392 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2390, tmp705, tmp2392);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1216,  (int32_t)128, tmp705);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2390);

vector < vector < vector < vector < uint64_t > > > > tmp2395 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2392,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2392, tmp706, tmp707,  (int32_t)0,  (int32_t)12, tmp2395);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2392);
ClearMemSecret1( (int32_t)128, tmp706);
ClearMemSecret1( (int32_t)128, tmp707);

vector < vector < vector < vector < uint64_t > > > > tmp2399 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2395, tmp2399,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2395);

vector < vector < vector < vector < uint64_t > > > > tmp2401 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2399, tmp710, tmp2401);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2399);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp710);

int32_t tmp2404 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2405 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2401,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2383,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2401, tmp2404, tmp2405);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2401);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1216, tmp2383);

vector < vector < vector < vector < uint64_t > > > > tmp2409 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2405, tmp711, tmp712,  (int32_t)0,  (int32_t)12, tmp2409);
ClearMemSecret1( (int32_t)1248, tmp712);
ClearMemSecret1( (int32_t)1248, tmp711);

vector < vector < vector < vector < uint64_t > > > > tmp2412 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2409, tmp2412,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2409);

vector < vector < vector < vector < uint64_t > > > > tmp2414 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2412, tmp715, tmp2414);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1248,  (int32_t)128, tmp715);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2412);

vector < vector < vector < vector < uint64_t > > > > tmp2417 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2414,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2414, tmp716, tmp717,  (int32_t)0,  (int32_t)12, tmp2417);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2414);
ClearMemSecret1( (int32_t)128, tmp716);
ClearMemSecret1( (int32_t)128, tmp717);

vector < vector < vector < vector < uint64_t > > > > tmp2421 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2417, tmp2421,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2417);

vector < vector < vector < vector < uint64_t > > > > tmp2423 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2421, tmp720, tmp2423);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2421);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp720);

int32_t tmp2426 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2427 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2423,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2405,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2423, tmp2426, tmp2427);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1248, tmp2405);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2423);

vector < vector < vector < vector < uint64_t > > > > tmp2431 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2427, tmp721, tmp722,  (int32_t)0,  (int32_t)12, tmp2431);
ClearMemSecret1( (int32_t)1280, tmp721);
ClearMemSecret1( (int32_t)1280, tmp722);

vector < vector < vector < vector < uint64_t > > > > tmp2434 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2431, tmp2434,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2431);

vector < vector < vector < vector < uint64_t > > > > tmp2436 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2434, tmp725, tmp2436);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1280,  (int32_t)128, tmp725);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2434);

vector < vector < vector < vector < uint64_t > > > > tmp2439 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2436,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2436, tmp726, tmp727,  (int32_t)0,  (int32_t)12, tmp2439);
ClearMemSecret1( (int32_t)128, tmp726);
ClearMemSecret1( (int32_t)128, tmp727);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2436);

vector < vector < vector < vector < uint64_t > > > > tmp2443 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2439, tmp2443,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2439);

vector < vector < vector < vector < uint64_t > > > > tmp2445 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2443, tmp730, tmp2445);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp730);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2443);

int32_t tmp2448 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2449 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2445,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2427,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2445, tmp2448, tmp2449);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2445);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp2427);

vector < vector < vector < vector < uint64_t > > > > tmp2453 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2449, tmp731, tmp732,  (int32_t)0,  (int32_t)12, tmp2453);
ClearMemSecret1( (int32_t)1312, tmp731);
ClearMemSecret1( (int32_t)1312, tmp732);

vector < vector < vector < vector < uint64_t > > > > tmp2456 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2453, tmp2456,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2453);

vector < vector < vector < vector < uint64_t > > > > tmp2458 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2456, tmp735, tmp2458);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1312,  (int32_t)128, tmp735);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2456);

vector < vector < vector < vector < uint64_t > > > > tmp2461 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2458,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2458, tmp736, tmp737,  (int32_t)0,  (int32_t)12, tmp2461);
ClearMemSecret1( (int32_t)128, tmp737);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2458);
ClearMemSecret1( (int32_t)128, tmp736);

vector < vector < vector < vector < uint64_t > > > > tmp2465 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2461, tmp2465,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2461);

vector < vector < vector < vector < uint64_t > > > > tmp2467 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2465, tmp740, tmp2467);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2465);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp740);

int32_t tmp2470 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2471 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2467,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2449,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2467, tmp2470, tmp2471);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1312, tmp2449);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2467);

vector < vector < vector < vector < uint64_t > > > > tmp2475 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2471, tmp741, tmp742,  (int32_t)0,  (int32_t)12, tmp2475);
ClearMemSecret1( (int32_t)1344, tmp742);
ClearMemSecret1( (int32_t)1344, tmp741);

vector < vector < vector < vector < uint64_t > > > > tmp2478 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2475, tmp2478,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2475);

vector < vector < vector < vector < uint64_t > > > > tmp2480 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2478, tmp745, tmp2480);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2478);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1344,  (int32_t)128, tmp745);

vector < vector < vector < vector < uint64_t > > > > tmp2483 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2480,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2480, tmp746, tmp747,  (int32_t)0,  (int32_t)12, tmp2483);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2480);
ClearMemSecret1( (int32_t)128, tmp747);
ClearMemSecret1( (int32_t)128, tmp746);

vector < vector < vector < vector < uint64_t > > > > tmp2487 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2483, tmp2487,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2483);

vector < vector < vector < vector < uint64_t > > > > tmp2489 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2487, tmp750, tmp2489);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp750);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2487);

int32_t tmp2492 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2493 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2489,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2471,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2489, tmp2492, tmp2493);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2489);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1344, tmp2471);

vector < vector < vector < vector < uint64_t > > > > tmp2497 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2493, tmp751, tmp752,  (int32_t)0,  (int32_t)12, tmp2497);
ClearMemSecret1( (int32_t)1376, tmp752);
ClearMemSecret1( (int32_t)1376, tmp751);

vector < vector < vector < vector < uint64_t > > > > tmp2500 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2497, tmp2500,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2497);

vector < vector < vector < vector < uint64_t > > > > tmp2502 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2500, tmp755, tmp2502);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1376,  (int32_t)128, tmp755);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2500);

vector < vector < vector < vector < uint64_t > > > > tmp2505 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2502,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2502, tmp756, tmp757,  (int32_t)0,  (int32_t)12, tmp2505);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2502);
ClearMemSecret1( (int32_t)128, tmp757);
ClearMemSecret1( (int32_t)128, tmp756);

vector < vector < vector < vector < uint64_t > > > > tmp2509 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2505, tmp2509,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2505);

vector < vector < vector < vector < uint64_t > > > > tmp2511 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2509, tmp760, tmp2511);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2509);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp760);

int32_t tmp2514 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2515 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2511,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2493,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2511, tmp2514, tmp2515);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2511);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1376, tmp2493);

vector < vector < vector < vector < uint64_t > > > > tmp2519 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2515, tmp761, tmp762,  (int32_t)0,  (int32_t)12, tmp2519);
ClearMemSecret1( (int32_t)1408, tmp762);
ClearMemSecret1( (int32_t)1408, tmp761);

vector < vector < vector < vector < uint64_t > > > > tmp2522 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2519, tmp2522,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2519);

vector < vector < vector < vector < uint64_t > > > > tmp2524 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2522, tmp765, tmp2524);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1408,  (int32_t)128, tmp765);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2522);

vector < vector < vector < vector < uint64_t > > > > tmp2527 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2524,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2524, tmp766, tmp767,  (int32_t)0,  (int32_t)12, tmp2527);
ClearMemSecret1( (int32_t)128, tmp767);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2524);
ClearMemSecret1( (int32_t)128, tmp766);

vector < vector < vector < vector < uint64_t > > > > tmp2531 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2527, tmp2531,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2527);

vector < vector < vector < vector < uint64_t > > > > tmp2533 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2531, tmp770, tmp2533);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp770);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2531);

int32_t tmp2536 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2537 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2533,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2515,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2533, tmp2536, tmp2537);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2533);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1408, tmp2515);

vector < vector < vector < vector < uint64_t > > > > tmp2541 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2537, tmp771, tmp772,  (int32_t)0,  (int32_t)12, tmp2541);
ClearMemSecret1( (int32_t)1440, tmp772);
ClearMemSecret1( (int32_t)1440, tmp771);

vector < vector < vector < vector < uint64_t > > > > tmp2544 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2541, tmp2544,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2541);

vector < vector < vector < vector < uint64_t > > > > tmp2546 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2544, tmp775, tmp2546);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2544);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1440,  (int32_t)128, tmp775);

vector < vector < vector < vector < uint64_t > > > > tmp2549 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2546,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2546, tmp776, tmp777,  (int32_t)0,  (int32_t)12, tmp2549);
ClearMemSecret1( (int32_t)128, tmp777);
ClearMemSecret1( (int32_t)128, tmp776);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2546);

vector < vector < vector < vector < uint64_t > > > > tmp2553 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2549, tmp2553,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2549);

vector < vector < vector < vector < uint64_t > > > > tmp2555 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2553, tmp780, tmp2555);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp780);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2553);

int32_t tmp2558 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2559 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2555,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2537,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2555, tmp2558, tmp2559);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2555);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1440, tmp2537);

vector < vector < vector < vector < uint64_t > > > > tmp2563 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2559, tmp781, tmp782,  (int32_t)0,  (int32_t)12, tmp2563);
ClearMemSecret1( (int32_t)1472, tmp781);
ClearMemSecret1( (int32_t)1472, tmp782);

vector < vector < vector < vector < uint64_t > > > > tmp2566 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2563, tmp2566,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2563);

vector < vector < vector < vector < uint64_t > > > > tmp2568 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2566, tmp785, tmp2568);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1472,  (int32_t)128, tmp785);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2566);

vector < vector < vector < vector < uint64_t > > > > tmp2571 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2568,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2568, tmp786, tmp787,  (int32_t)0,  (int32_t)12, tmp2571);
ClearMemSecret1( (int32_t)128, tmp786);
ClearMemSecret1( (int32_t)128, tmp787);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2568);

vector < vector < vector < vector < uint64_t > > > > tmp2575 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2571, tmp2575,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2571);

vector < vector < vector < vector < uint64_t > > > > tmp2577 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2575, tmp790, tmp2577);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp790);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2575);

int32_t tmp2580 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2581 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2577,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2559,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2577, tmp2580, tmp2581);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1472, tmp2559);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2577);

vector < vector < vector < vector < uint64_t > > > > tmp2585 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2581, tmp791, tmp792,  (int32_t)0,  (int32_t)12, tmp2585);
ClearMemSecret1( (int32_t)1504, tmp791);
ClearMemSecret1( (int32_t)1504, tmp792);

vector < vector < vector < vector < uint64_t > > > > tmp2588 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2585, tmp2588,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2585);

vector < vector < vector < vector < uint64_t > > > > tmp2590 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2588, tmp795, tmp2590);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1504,  (int32_t)128, tmp795);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2588);

vector < vector < vector < vector < uint64_t > > > > tmp2593 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2590,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2590, tmp796, tmp797,  (int32_t)0,  (int32_t)12, tmp2593);
ClearMemSecret1( (int32_t)128, tmp797);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2590);
ClearMemSecret1( (int32_t)128, tmp796);

vector < vector < vector < vector < uint64_t > > > > tmp2597 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2593, tmp2597,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2593);

vector < vector < vector < vector < uint64_t > > > > tmp2599 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2597, tmp800, tmp2599);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp800);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2597);

int32_t tmp2602 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2603 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2599,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2581,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2599, tmp2602, tmp2603);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2599);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1504, tmp2581);

vector < vector < vector < vector < uint64_t > > > > tmp2607 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2603, tmp801, tmp802,  (int32_t)0,  (int32_t)12, tmp2607);
ClearMemSecret1( (int32_t)1536, tmp801);
ClearMemSecret1( (int32_t)1536, tmp802);

vector < vector < vector < vector < uint64_t > > > > tmp2610 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2607, tmp2610,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2607);

vector < vector < vector < vector < uint64_t > > > > tmp2612 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2610, tmp805, tmp2612);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1536,  (int32_t)128, tmp805);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2610);

vector < vector < vector < vector < uint64_t > > > > tmp2615 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2612,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2612, tmp806, tmp807,  (int32_t)0,  (int32_t)12, tmp2615);
ClearMemSecret1( (int32_t)128, tmp806);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2612);
ClearMemSecret1( (int32_t)128, tmp807);

vector < vector < vector < vector < uint64_t > > > > tmp2619 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2615, tmp2619,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2615);

vector < vector < vector < vector < uint64_t > > > > tmp2621 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2619, tmp810, tmp2621);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2619);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp810);

int32_t tmp2624 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2625 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2621,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2603,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2621, tmp2624, tmp2625);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1536, tmp2603);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2621);

vector < vector < vector < vector < uint64_t > > > > tmp2629 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2625, tmp811, tmp812,  (int32_t)0,  (int32_t)12, tmp2629);
ClearMemSecret1( (int32_t)1568, tmp812);
ClearMemSecret1( (int32_t)1568, tmp811);

vector < vector < vector < vector < uint64_t > > > > tmp2632 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2629, tmp2632,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2629);

vector < vector < vector < vector < uint64_t > > > > tmp2634 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2632, tmp815, tmp2634);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2632);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1568,  (int32_t)128, tmp815);

vector < vector < vector < vector < uint64_t > > > > tmp2637 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2634,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2634, tmp816, tmp817,  (int32_t)0,  (int32_t)12, tmp2637);
ClearMemSecret1( (int32_t)128, tmp817);
ClearMemSecret1( (int32_t)128, tmp816);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2634);

vector < vector < vector < vector < uint64_t > > > > tmp2641 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2637, tmp2641,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2637);

vector < vector < vector < vector < uint64_t > > > > tmp2643 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2641, tmp820, tmp2643);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2641);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp820);

int32_t tmp2646 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2647 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2643,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2625,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2643, tmp2646, tmp2647);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2643);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1568, tmp2625);

vector < vector < vector < vector < uint64_t > > > > tmp2651 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2647, tmp821, tmp822,  (int32_t)0,  (int32_t)12, tmp2651);
ClearMemSecret1( (int32_t)1600, tmp822);
ClearMemSecret1( (int32_t)1600, tmp821);

vector < vector < vector < vector < uint64_t > > > > tmp2654 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2651, tmp2654,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2651);

vector < vector < vector < vector < uint64_t > > > > tmp2656 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2654, tmp825, tmp2656);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2654);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1600,  (int32_t)128, tmp825);

vector < vector < vector < vector < uint64_t > > > > tmp2659 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2656,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2656, tmp826, tmp827,  (int32_t)0,  (int32_t)12, tmp2659);
ClearMemSecret1( (int32_t)128, tmp827);
ClearMemSecret1( (int32_t)128, tmp826);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2656);

vector < vector < vector < vector < uint64_t > > > > tmp2663 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2659, tmp2663,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2659);

vector < vector < vector < vector < uint64_t > > > > tmp2665 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2663, tmp830, tmp2665);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2663);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp830);

int32_t tmp2668 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2669 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2665,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2647,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2665, tmp2668, tmp2669);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1600, tmp2647);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2665);

vector < vector < vector < vector < uint64_t > > > > tmp2673 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2669, tmp831, tmp832,  (int32_t)0,  (int32_t)12, tmp2673);
ClearMemSecret1( (int32_t)1632, tmp831);
ClearMemSecret1( (int32_t)1632, tmp832);

vector < vector < vector < vector < uint64_t > > > > tmp2676 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2673, tmp2676,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2673);

vector < vector < vector < vector < uint64_t > > > > tmp2678 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2676, tmp835, tmp2678);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1632,  (int32_t)128, tmp835);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2676);

vector < vector < vector < vector < uint64_t > > > > tmp2681 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2678,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2678, tmp836, tmp837,  (int32_t)0,  (int32_t)12, tmp2681);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2678);
ClearMemSecret1( (int32_t)128, tmp837);
ClearMemSecret1( (int32_t)128, tmp836);

vector < vector < vector < vector < uint64_t > > > > tmp2685 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2681, tmp2685,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2681);

vector < vector < vector < vector < uint64_t > > > > tmp2687 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp2685, tmp840, tmp2687);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)32, tmp840);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)128, tmp2685);

int32_t tmp2690 =  (int32_t)3;

vector < vector < vector < vector < uint64_t > > > > tmp2691 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2687,  (int32_t)12);
Concat2T444( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2669,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2687, tmp2690, tmp2691);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)32, tmp2687);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1632, tmp2669);

vector < vector < vector < vector < uint64_t > > > > tmp2695 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2691, tmp841, tmp842,  (int32_t)0,  (int32_t)12, tmp2695);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2691);
ClearMemSecret1( (int32_t)1664, tmp841);
ClearMemSecret1( (int32_t)1664, tmp842);

vector < vector < vector < vector < uint64_t > > > > tmp2699 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2695, tmp2699,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2695);

vector < vector < vector < vector < uint64_t > > > > tmp2701 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1664);
AvgPool( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1664,  (int32_t)7,  (int32_t)7,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2699, tmp2701);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1664, tmp2699);

vector < vector < vector < vector < uint64_t > > > > tmp2703 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000);
Conv2DWrapper( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1664,  (int32_t)1,  (int32_t)1,  (int32_t)1000,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp2701, tmp845, tmp2703);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1664, tmp2701);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1664,  (int32_t)1000, tmp845);
ScaleUp1( (int32_t)1000, tmp846,  (int32_t)12);

vector < vector < vector < vector < uint64_t > > > > tmp2706 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1000; i3++){
tmp2706[i0][i1][i2][i3] = tmp2703[i0][i1][i2][i3]+tmp846[i3];
}
}
}
}
ClearMemSecret1( (int32_t)1000, tmp846);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp2703);

int32_t tmp2709 =  (int32_t)3;

vector < vector < vector < uint64_t > > > tmp2710 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1);
ArgMax3( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp2706, tmp2709, tmp2710);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1000, tmp2706);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
cout << (funcReconstruct2PCCons(tmp2710[i0][i1][i2], 2)) << endl;
}
}
}
cout << "----------------------------------" << endl;
cout << NUM_OF_PARTIES << "PC code, P" << partyNum << endl;
cout << NUM_ITERATIONS << " iterations, " << whichNetwork << endl;
cout << "----------------------------------" << endl << endl;


/****************************** CLEAN-UP ******************************/
delete aes_common;
delete aes_indep;
delete aes_a_1;
delete aes_a_2;
delete aes_b_1;
delete aes_b_2;
delete aes_c_1;
delete aes_share_conv_bit_shares_p0_p2;
delete aes_share_conv_bit_shares_p1_p2;
delete aes_share_conv_shares_mod_odd_p0_p2;
delete aes_share_conv_shares_mod_odd_p1_p2;
delete aes_comp_msb_shares_lsb_p0_p2;
delete aes_comp_msb_shares_lsb_p1_p2;
delete aes_comp_msb_shares_bit_vec_p0_p2;
delete aes_comp_msb_shares_bit_vec_p1_p2;
delete aes_conv_opti_a_1;
delete aes_conv_opti_a_2;
delete aes_conv_opti_b_1;
delete aes_conv_opti_b_2;
delete aes_conv_opti_c_1;
delete aes_parallel;
deleteObjects();

return 0;

}

